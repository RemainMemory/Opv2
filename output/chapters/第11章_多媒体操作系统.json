[
  {
    "一级标题": "第11章_多媒体操作系统",
    "二级内容": [
      {
        "二级标题": "11.1_多媒体系统简介",
        "三级内容": [
          {
            "三级标题": "11.1.1 多媒体的概念 一一",
            "正文": "1.数据、信息与媒体 所谓数据，是反映客观事物及其运动状态的信号，如人体感觉器官或观测仪器的感知 所形成的以文本、数字、事件或图像等形式保存的原始记录。数据与数据之间没有建立任 何联系或关系，呈分散和孤立的特性。数据必须经过加工处理才能形成信息。 信息是以数据的形式存在和进行运行处理的，其实质是对客观事物的运动特征及内涵 的抽象，是由一系列有组织、有关系的数据组成的。 所谓媒体，是指媒介、传媒、媒质或介质，在计算机领域赋有两种含义：一是指用以 存储传输信息的实体，如磁带、磁盘、光盘和半导体存储器、光纤等；另一种是指信息的 载体，客观世界中存在着各种各样不同形式的媒体，称做不同的信息媒体，如数字、文字、 声音、图像和图形，多媒体技术中的媒体是指后者。\n\n2.媒体的分类 一般地，媒体可分为以下六类：\n\n（1）感觉媒体：是人们的感觉器官所能感觉到信息的自然种类，如，语音、音乐、图 形、图像、文字、动画、气味等。\n\n(2）表示媒体：说明交换信息的类型，定义信息的特征，一般以编码的形式描述，如 声音编码和文本编码等。 348  如显示器、打印机和音箱等输出设备，键盘、鼠标、扫描仪和摄像机等输入设备。\n\n（4）存储媒体：存储数据的物理设备，如磁盘、磁带、光盘、内存、U盘等。\n\n（5）传输媒体：用以传输数据的物理设备介质，如电缆、光纤、无线电波等。\n\n（6）交换媒体，在系统之间交换信息的手段和类型，可以是存储媒体或传输媒体，也 可以是两种媒体的组合，如网络、电子邮件等。\n\n3.多媒体 所谓多媒体（multimedia)，目前没有统一的定义，一般是指多种方法、多种形态传输（传 播）的信息介质、多种载体的表现形式以及多种存储、显示和传递方式。在计算机领域，多 媒体往往是指多媒体技术，即是同时对多个感觉媒体信息进行获取、处理、编辑、存储和 展示的理论、技术、设备、标准等规范的总称。 多媒体技术将成熟的音像技术、计算机技术和通信网络技术进行逻辑上的集成，形成 了一种多维信息处理技术。该技术的核心是能够对多媒体信息进行集成与交互等综合处理 的多媒体计算机技术。"
          },
          {
            "三级标题": "11.1.2 超文本和超媒体",
            "正文": "1．超文本(hypertext) 超文本是一种文本信息的组织方式，相比传统的线性文本组织方式而言，超文本的组 织方式是非线性的，与人的思维方式和工作方式更加接近。 在超文本的组织结构中，文本按照其内部信息的逻辑独立性及相关性，被划分为多个 不同大小的信息块，将这些信息块作为不同的结点，通过结点之间的链接，组织成一种非 线性的网状结构。显然，在这种网状结构中，作为基本单位的结点之间除了链接指针描述 了它们之间逻辑上的相关性外，不会存在任何固定的顺序关系，亦即文本的信息块之间也 不存在任何固定的顺序关系。\n\n2.超链接(hyperlink) 超链接也称为超文本链接(hypertextlink)，是指文本中的词、短语、符号、图像、声音 剪辑或影视剪辑之间的链接，或者是指它们与其它的文件、超文本文件之间的链接。 通常将词、短语、符号、图像、声音剪辑、影视剪辑和其它文件称为对象（或者称为文 档元素)，因此，超链接就是对象(或者文档元素）之间的链接，这些对象不受任何物理位置 和逻辑空间的限制，可以集中在一个文件中，或者分布在不同的文件中，可以在一台主机 中，也可以在网络中的其它主机中。\n\n3.超媒体（Hypermedia) 所谓超媒体，就是多媒体与超文本的结合，在多媒体技术的支持下，文本信息不仅可 以包含文字，还可以包含诸如图形、图像、视频、音频等多媒体信息，这些信息按照超文 本结构和超链接方式进行组织，是节点和链源类型更加多样化、链结构更加复杂的超文本。 一般超媒体所构成的超媒体系统具备网状复杂信息链接结构、多媒体信息节点、导航和浏 览功能、窗口功能，以及网络共享及交互式的用户与程序接口等特征。 349  计算机操作系统"
          },
          {
            "三级标题": "11.1.3 多媒体文件的特点 在多媒体计算机系统中，可以将多媒体信息都集成在一个文件中进行保存，形成一个 多媒体文件。多媒体文件与传统的文件有着很大的不同，主要表现如下：",
            "正文": "1.多样性 所谓多样性，是指在一份多媒体文件中集成了多种媒体文件。例如在一部数字电影中， 就可能包含有一个视频、多个音频、多个横向滚动的字幕等，相应地在一个多媒体文件中 就有一个视频文件、多个音频文件以及多个包含多种语言的文本文件，因此一部数字电影 往往是由多个不同类型的文件组成的。\n\n2.极高的数据率 为了保证有好的视觉和听觉感受，视频和音频都必须具有很高的数据率，相应的所需 要的存储量就非常大。例如，为了保存一小时的CD音乐，需要的存储容量约1.4GB；一 （1280×720），一小时要求的存储容量则达到648GB。显然，目前多数计算机系统是无法对 它们进行直接处理的。为此，在对这些信号进行处理之前，通常必须先对它们进行数倍到 数十倍的压缩。值得一提的是，如果要想在网络上传输多媒体文件，由于网络传输速度的 限制，通常都需要先进行大幅度的压缩。\n\n3.实时性 在对多媒体文件进行播放时，为保证播放质量，要求有很高的实时性。例如，计算机 获得从CD驱动器送来的位流后，必须在非常短的时间内将位流转换为音乐。如果由CD盘 到内存的传输时间和计算机对它的处理时间过长，就会使放出的音乐严重失真。类似地，对 于数字电影，每秒钟需要播放25帧，即每隔40ms就播放一帧，如果由DVD盘传输到内存 和计算机对它的处理时间过长，每一帧不能按时处理完毕，将会使电影看起来感觉有些跳跃。\n\n4.集成性 在多媒体中包含了文本、静止图像、音频、视频等各种类型的媒体，而实际需要的， 则往往是将多种媒体集成在一起使用。因此集成性是多媒体的一个重要特征。多媒体的集 成性包含了如下两方面的含义：\n\n（1）将多媒体的硬件和软件进行集成。不同的媒体往往需要采用不同的硬件和软件进 行处理。例如，为了将音频变换为声音信号，需要配置声卡；如果希望将图像和照片输入 计算机，就需要配置扫描器；为了能播放DVD光碟，需要配置DVD驱动器。另外，还需 要配置相应设备的驱动程序、与媒体有关的软件，如CD、DVD、MP3播放软件等。\n\n（2）将多媒体信息进行集成。将各种多媒体设备所产生的信息按照一定的组织结构或 数据类型集成为一个有机的整体。例如，在一部数字电影中，就需要将一个视频、多个音 频、多个横向滚动的（不同语言)字幕有机地集成为一个多媒体文件。在播放一个多种媒体 文件时，不仅需要将它们同时播出，而且还应保证多种媒体之间的同步。\n\n5.交互性 在多媒体系统中，多媒体文件还有一个非常重要的特点一一使用时的交互性，即在多 媒体系统中，信息以超媒体结构进行组织，可以方便地实现人机交互。换而言之，人可以 350  第十一章多媒体操作系统 按照自己的思维习惯，按照自己的意愿主动地选择和接受信息，拟定信息的使用路径。对 于仅集成了多种媒体而不具有交互性的系统，通常不把它称为多媒体系统。例如，在电视 机播放的节目中，也包含了视频、音频和文字，但并不把电视机称为多媒体设备，而却把 VCD、DVD设备称为多媒体设备，因为它具有交互性。交互性可使人们在使用该设备时， 具有对设备的可控性，能更好地满足人们的要求。"
          },
          {
            "三级标题": "11.1.4 多媒体硬件与软件系统",
            "正文": "1.多媒体硬件系统的组成 多媒体硬件系统是在传统计算机系统的基础上，再增加某些能对多媒体信息进行处理 的硬件。因此，它除了需要较高配置的常规计算机主机硬件，如处理机、内存、硬盘驱动 器等外，还应增加用于对音频信号和视频信号进行处理的硬件，诸如音频、视频、视频处 包括以下几部分：\n\n（1）多媒体主机：可以是中、大型机，也可以是工作站，然而目前更普遍使用的是多 媒体个人计算机，即MPC(MultimediaPersonalComputer)。\n\n（2）多媒体输入设备：如视频、音频输入设备，包括摄像机、录像机、扫描仪、传真 机、数字相机、话筒、绘图仪等。\n\n（3）多媒体输出设备：如视频、音频播放设备，包括电视机、投影电视、大屏幕投影 仪、音响等，以及打印机、绘图仪、高分辨率屏幕等。\n\n（4）多媒体存储设备，如硬盘、光盘、声像磁带等。\n\n(5）多媒体接口卡：根据多媒体系统获取、编辑音频或视频的需要，插接在计算机上， 以解决各种媒体数据的输入输出问题，常用的接口卡有声卡、显示卡、视频压缩卡、视频 捕捉卡、视频播放卡、光盘接口卡、家电控制卡、通信卡等。\n\n（6）人机交互设备：如键盘、鼠标、触摸屏、绘图板、操纵杆、光笔、手写输入设备 和智能传感器等。\n\n2.声卡（soundcard) 声卡又称音频卡，用于处理音频信号。声卡可用来接受话筒、录音机、乐器等输入的 音频（模拟)信号，通过模/数变换，将其转换为计算机能够识别和处理的数字信号。反之， 声卡也能把计算机中存储的数据经数/模变换转换为声音信号，再通过连接在声卡上的音箱 或耳机播放出来，也可用录音设备记录下来。声卡可根据其量化精度将其分为8位、16位 和32位几档。位数越高，其量化精度也就越高，相应的，声音的音质就越好。\n\n3.视频卡（videocard) 视频卡又称显示卡，用于处理视频信号。它除了用于对视频信号进行采集外，还可对 所采集的信息进行编辑、特技处理，进而形成十分精美的画面。对于多媒体的应用，一般 要求视频卡能提供800×600、1024×768、1280×1024或更高像素的分辨率，这样才有可能 很好地观看高清晰电视和数字电影。\n\n4.数码相机 数码相机与传统相机相比，两者用于成像的光敏介质不同，传统相机采用的是分布在 351  计算机操作系统 胶片上的感光化学介质，而数码相机是使用CCD作为光敏介质。CCD的作用是将所拍摄 到的光信号转换为模拟电信号，再经过模/数转换变为二进制数字信号。这样便可将图像以 数字形式存储在相机的内存中。为了节省内存，通常都采用JEPG方式存储。 数码相机最重要的技术指标是像素数，像素越多，分辨率越高，现在相机的像素一般 在数百万到一千万。数码相机的另一个指标是数码相机的光学变焦，一般在2一4倍之间。 第三个指标是内存容量，内存容量越大所能存储的照片也就越多，内存一般采用CF卡和 SD卡，其容量为数百MB～2GB。\n\n5.数码摄像机 1998年，第一部家用数码摄像机横空出世，由于它有着很高的清晰度、体积小巧、使 用方便，并能利用计算机对影像进行处理，因而深受用户欢迎，因此它很快就取代了传统 的模拟式摄像机。它也使用CCD作为光敏介质。当前数码摄像机常采用下述几种存储介质：\n\n（1）磁带，这是最早使用的存储介质，将拍摄所得图像存储在磁带上。磁带是顺序存 储设备，使用上不方便，而且用计算机进行后期处理也存在着一定的难度。\n\n（2）磁盘，将拍摄所得的影像存储在微磁盘上，当前微磁盘容量为数十GB，可连续拍摄 数小时，由于微磁盘是随机存取设备，故能随机存取，使用方便，另外后期处理也比较方便。\n\n(3）DVD光盘，将拍摄所得的影像即时直接刻录在DVD光盘上，拍完了，光盘也刻录 好了，且可立即在DVD播放器上播放。在DV中使用的是8CM光盘，单面盘的容量是1.4GB。\n\n6.智能传感器 智能传感器是一种具有采集、处理、交换信息功能，集成了传感器、微处理机、通信 装置的嵌入式设备。智能传感器可与外界物理环境交互，将收集到的信息通过传感器网络 传送给其它的计算设备，如传统的计算机等。智能传感器一般集成了低功耗的微控制器、 若干存储器单元、无线电或光通信装置、传感器等组件，通过传感器、动臂机构以及通信 装置，实现与外界物理环境交互。与一般传感器相比，智能传感器其有以下三个优点：\n\n（1）通过软件技术可实现高精度、成本低的信息采集。\n\n(2）具有一定的信息存储和可编程功能，实现功能的多样化。\n\n（3）与无线网络的信息交换与通信功能。如可穿戴技术把多媒体、智能传感器和无线 通信等技术嵌入人们的衣着中，可支持手势和眼动操作等多种交互方式。\n\n7.多媒体软件系统 多媒体软件系统也称为多媒体软件平台，是指多媒体系统运行、开发的各类软件和开 发工具及多媒体应用软件的总和。硬件是多媒体系统的基础，软件是多媒体系统的灵魂。 多媒体软件系统可划分为如下几部分。\n\n（1）多媒体驱动软件：用于直接操作和控制硬件，具备设备的初始化、对设备操作、 基于硬件的压缩解压和图像快速变换等基本硬件功能调用。 调度和管理、文件管理、存储管理、网络及通信的机制和管理、与用户及程序的接口等功能。\n\n（3）多媒体应用软件：在基于多媒体硬件的基础上，在多媒体操作系统平台上设计开发的、 用于编辑和组织多媒体数据，并将数据与相关应用程序集成，面向应用而构建的软件系统。 除了上述的基础软件之外，多媒体软件系统还包括多媒体数据库管理系统、多媒体压 352  第十一章：多媒体操作系统 缩/解压缩软件、多媒体声像同步软件、多媒体通信软件，以及不同领域中的应用所需要有 的多种开发工具等。"
          }
        ]
      },
      {
        "二级标题": "11.2_多媒体文件中的各种媒体",
        "三级内容": [
          {
            "三级标题": "11.2.1 音频信号",
            "正文": "1.模拟音频和数字音频\n\n（1）模拟音频。声波在时间上是连续的，故属于模拟信号。现在收音机、电视机、DVD 等设备中所发出的声音等都属于模拟音频。声音是由多种不同频率的信号合成的，而声音 的一个重要参数一—频带，就是用来描述声音信号的频率范围的。一般人耳能听到的音频 信号频率范围为20Hz~20kHz。\n\n(2）数字音频。在使用计算机对模拟音频进行处理之前，必须先经过模/数转换，将模 拟音频转换成数字音频。模/数转换分为如下三个步骤： ①采样。每隔一定的时间间隔，在模拟音频的波形上取得一个幅值，称之为采样，采 样的频率称为采样频率，一般语音信号的采样频率是8kHz，而高保真音乐的采样频率为 40kHz。 ②量化。量化是将该幅值转换为二进制的位序列，二进制的位数多少称为量化精度， 若采用8位时，其量化精度仅为1/255，现在量化主要采用16位和32位。 ③编码。经量化后的声音已是数字音频形式，为便于计算机保存和处理，还须对数据 进行压缩和编码，然后将它形成文件存在磁盘上。\n\n2.数字音频文件类型 数字音频文件格式有多种：①WAV文件，又称为波形文件（其包络线为波形)，文件后 缀名为wav，它是直接从模/数转换得到的，未经过压缩，故该格式需要很大的存储容量； ②MIDI文件，这种格式的特点是它能模仿原始乐器的各种演奏技巧，文件又非常小，已 编码的压缩格式，制作MP3可选择不同压缩比率，但压缩比越大，音质越差，MP3是当前 最流行的音频文件格式；④APE文件，WAV格式的品质高，但占用空间大，如把WAV 压缩为MP3格式后，便不能还原为CD的品质，但将WAV格式压缩为APE格式，其容量 约小一半，且仍可还原为CD品质。"
          },
          {
            "三级标题": "11.2.2 图像",
            "正文": "1.图像的数字表示 素，称为像素。每个像素用若干个二进制的位来表示其亮度、颜色和属性。如果图像只有 两种亮度值，即黑白图像，可用一位来表示。如果要表示灰度图像，则需要多位二进制数 353  计算机操作系统 表示，如用8位来表示，就可从白到黑分为256个不同的灰度，它可以精确地显现一般的 黑白照片。显现彩色照片一般需要用24位、36位或48位来表示彩色，用24位可产生1667 万种不同颜色的组合，已完全能够满足一般用户的需要。同样，我们把屏幕上的一个点也 称为一个像素，屏幕上的一个像素与图像的一个像素是一一对应的。为了描述一幅图像通 常需要非常大的存储容量。例如，为了存储一幅640×480的像素矩阵，每个像素用24位 表示，便需要921.6KB的存储容量。\n\n2.图像的属性 一幅图像最主要的属性是分辨率、色彩深度和真/伪彩色三个值。 1）分辨率 （dpi)来表示，我们可利用图像分辨率来确定一幅图像的像素数目：②显示器分辨率，是指 显示屏上能够显示的像素多少，对于分辨率为1024×768的显示器，整个显示屏包含有 796432个像素。由于显示器分辨率可用来确定一幅图像的显示区域大小，因此，如果图像 分辨率大于显示器分辨率，则在显示屏上只能显示部分图像，反之，若图像分辨率小于显 示器分辨率，则图像只占用一部分显示屏幕。 2）色彩深度 为了表现一幅彩色照片的色彩，每个像素需要用许多二进制位，所用二进制位的多少 就是色彩深度。当我们用24位来表示色彩时，色彩深度就为24。色彩深度也就是色彩的 分辨率，显然，色彩深度越大，它所能表示的颜色数也越多。但由于24位的色彩分辨率已 远远超过人眼的分辨率，所以在一般情况下已经足够了。 3）真/伪彩色 由于任何一种颜色都可由三种基本颜色按不同比例合成，目前常用红、绿、蓝三色， 因此，当色彩深度为24时，红色（R)占8位，绿色（G)占8位，蓝色（B）占8位，可以简单表 示为RGB8：8：8。把用RGB8：8：8表示的色彩称为真彩色图像，或全彩色图像。 间，而是对图像中的不同颜色进行采样，将所采样的各个像素的RGB分量之值分别保存在 一张颜色表中。要显示图像时，再从表中取出，经适当处理后还原出原有图像。人们将用 这种方式所形成的图像的颜色称为“伪彩色”。\n\n3.图像文件格式 数字图像可采用多种文件格式存储在计算机中，四种最常用的图像文件格式为：\n\n（1）BMP格式。BMP采用位映射存储格式，色彩深度可选1位、4位、8位和24位， 一般不进行图像压缩，因此所占存储空间较大。\n\n(2）GIP格式。该格式可在一个文件中存放多幅彩色图像，若将这些图像用较慢的速度 依次读出，并显示在屏幕上，便可产生幻灯片效果。如果用较快的速度依次读出，便是简 单的动画，GIP图像色彩深度从1位到8位。\n\n(3)TIFF格式。这是为扫描仪和桌面出版系统开发的图像文件格式，现已得到广泛应用。\n\n(4）JPEG格式。JPEG文件是一种经过JPEG算法压缩过的文件，其压缩比很高，约为 5：1到50：1，非常适用于需要处理大量图片的场合。 354  第十一章多媒体操作系统"
          },
          {
            "三级标题": "11.2.3 视频信号 一",
            "正文": "1.模拟视频 当前流行的电视是模拟视频，电视信号通过光栅扫描的方法显示在屏幕上，从屏幕顶 部开始逐行地向下扫描，直到最底部，由此形成一幅图像，称为一帧。水平扫描线所能分 辨出的点数称为水平分辨率，一帧中垂直扫描的行数称为垂直分辨率。在彩色电视中使用 了R、G、B三种基本色进行配色，这三种信号可以分别传输。 1）彩色电视的制式 电视信号的标准也称为制式。目前世界上主要有三种制式：\n\n(1）NTSC制式，采用此制式的主要国家有美国、加拿大等，该制式有525条扫描线， 每秒钟30帧。\n\n(2）PAL制式，采用此制式的主要国家有德国、英国、中国等，该制式有625条扫描 线，每秒钟25帧。\n\n(3）SECAM制式，采用此制式的主要国家有法国及东欧、中东各国，该制式有625条 扫描线，每秒钟25帧。 2）隔行扫描和逐行扫描 虽然每秒25帧已完全能够使人眼感觉图像是连续的，但有一部分人会感觉到图像闪 烁，这是因为在新图像到来(亮)之前，原图像在视网膜上已逐渐减弱（暗)。如果增加帧频到 每秒50帧，则由于视网膜上更多的是新图像，故而可以消除闪烁现象，但会导致对带宽提 出更高的要求。一种巧妙的方法是，先利用半帧的时间从上到下地扫描奇数行，把半帧称 为一个场，然后再利用半帧的时间从上到下地扫描偶数行。实际表明，每秒50场已完全感 觉不到闪烁现象。这一技术被称为隔行扫描。而把依次扫描每一行的技术称为逐行扫描。\n\n2.数字视频 如同前面所介绍的数字图像一样，数字视频中的每一帧也是由大量的像素组成的，每 个像素用若干二进制位来表示。对于彩色电视，一般用24位，红、绿、蓝各占用8位。为 了消除电视中的闪烁现象，采用了隔行扫描技术。在计算机中是否也应采用隔行扫描技术 呢？由于为计算机配置的显示器自身也带有内存，其存储器容量足够用来存放数帧的数据， 于是它可以在一个帧周期时间（40ms）内，将一帧图像在屏幕上扫描三次或更多，即每秒钟 扫描75次或更多，因此没有必要再隔行扫描。而通常的电视是无法使用这一方法的，因为 电视机是模拟视频，每帧信息无法存储在RAM中。\n\n3.视频文件格式 1）MPEG文件格式 MPEG(MotionPictureExpertsGroup)是运动图像压缩算法，它于1993年成为国际标准。 该算法是针对运动图像设计的，是基于相互连续的几帧相差甚微这样的事实来进行压缩的。 因此在单位时间内先采集第一帧中的数据，并将它保存起来，对于以后几帧只存储其中与 第一帧不同的部分。MPEG的平均压缩比为50：1，最高压缩比可达200：1。 2）GIF文件格式 GIF(GraphicsInterchangeFormat)是采用无损压缩方法所产生的一种高压缩比的彩色图 355  计算机操作系统 像文件。为了减少对网络频带的要求，采用了隔行扫描方式。该格式被广泛应用于Intermnet 上的大量彩色动画。 3）AVI文件格式 这种文件格式又称为音频视频交错(audiovideointerleaved)格式，该格式允许音频和视 频交错在一起同步播放，支持256色和压缩，但并未限定压缩标准，因此，也造成AVI的 格式不具有兼容性，即用某种压缩标准产生AVI的文件，必须使用相应的解压缩算法，才 能将它进行解压。该算法具有调用方便、图像质量好等优点，但文件体积过于庞大，主要 用于在光盘上保存数字电影、电视等影像。"
          },
          {
            "三级标题": "11.2.4 多媒体数据压缩及其标准 无论是图像、音乐、动画还是数字电影，它们都要求用非常大的存储空间来存放，而 现在计算机根本不可能提供如此大的存储空间，解决的方法只能是先对它们进行大幅度的 压缩，以便于存储和处理。如果多媒体要在网络上传送，其压缩比需要更大。",
            "正文": "1.数据压缩和解压缩 压缩数据进行解压缩。压缩与解压缩间允许存在不对称性。这是因为：\n\n（1）在许多情况下，一个多媒体文件只需要一次压缩，但却需要经常解压缩。基于这 样的不对称性，如果解压缩算法的速度快且不需要硬件，那么即使压缩的算法速度慢且需 要硬件，这也是值得的。\n\n(2）压缩与解压缩并不需要是完全可逆的，即当一个多媒体文件被压缩后，再对它进 好的压缩效果。当前对静止图像、运动图像和音频的压缩，都已制定出了国际标准。\n\n2.静止图像的压缩标准 联合图像专家小组JPEG(JointPhotographicExportsGroup)研制出的数字压缩编码方 法，被称为JPEG算法，它被确定为静止图像压缩的国际标准。JPEG专家组开发了两种基 本的压缩算法：一种是无损压缩算法；另一种是有损压缩算法。在压缩比为25：1的情况 下，被还原的图像与原始图像之间相差甚微，不为人们所查觉。当前广泛将该算法用于对 静止图像进行压缩，一般为1/4、1/8、1/16等。JPEG算法对于多媒体十分重要，因为在运 动图像的压缩标准MPEG中，仍需要利用JIPEG来先对每一顿运动图像进行压缩。\n\n3.运动图像的压缩算法 运动图像专家小组MPEG(MotionPictureExportsGroup)研制出的运动图像压缩编码技 术的标准化方法，被称为MPEG算法。该算法是基于对电影中存在的空间和时间冗余进行 压缩的。压缩过程分为两步：第一步是先利用JIPEG算法，基于空间允余对视频图像中的 每一顿进行压缩，由此所形成的帧称为I帧；第二步是进行每帧之间的压缩。由于相邻的 每两帧之间通常差别甚小，因此只需要保留与前面一帧的差值即可，这样的帧称为P帧。 在实际情况中，仍需定时插入I帧，这是因为，如果所有的帧都是直接或间接地依赖于第 一帧，则当用户错过第一帧时，它所看到的将全是P帧，就无法形成正常的图像，如果每 隔一定时间（0.5～1秒），就在视频流中插入一幅1帧，那么用户在任何时间点播，都会很快像文件。为了减少对网络频带的要求，采用了隔行扫描方式。该格式被广泛应用于Intermnet 上的大量彩色动画。 3）AVI文件格式 这种文件格式又称为音频视频交错(audiovideointerleaved)格式，该格式允许音频和视 频交错在一起同步播放，支持256色和压缩，但并未限定压缩标准，因此，也造成AVI的 格式不具有兼容性，即用某种压缩标准产生AVI的文件，必须使用相应的解压缩算法，才 能将它进行解压。该算法具有调用方便、图像质量好等优点，但文件体积过于庞大，主要 用于在光盘上保存数字电影、电视等影像。\n\n4.运动图像的压缩标准 MPEG算法被确定为运动图像压缩的国际标准，已在全世界范围得到广泛的应用，下 面是几种常用的MPEG标准：\n\n（1）MPEG-I标准，它同时采用了顿内图像数据压缩和帧间图像数据压缩两种方法， 对视频信号进行压缩。对NTSC制式的分辨率为352×240，对PAL制式的分辨率为360× 288。其图像的质量适用于家用录像机和VCD。\n\n(2）MPEG-ⅡI标准，它具有比MPEG-I更高的指标，对NTSC制式的分辨率为720× 480，对PAL制式的分辨率为720×576。其图像的质量适用于DVD和交互式多媒体应用等。\n\n(3）MPEG-IV标准，这是最进几年流行起来的压缩标准，它可以获得多种视频格式， 具有很大的压缩比，它可将一部120分钟长的电影，压缩成300MB左右，供网上观看。\n\n5.音频压缩标准 在多媒体应用中，最常用的音频压缩标准是MPEG的音频压缩算法。它是第一个高保 真音频数据压缩国际标准，该算法提供了3个独立的压缩层次。第一层（MPEGLayer1)音 频压缩算法主要用于数字录像机中的音频，压缩后的音频速率为384KB/s。第二层（MPEG Layer2)音频压缩算法主要用于数字广播电视的音频、CD-ROM和VCD中的音频，压缩后 的音频速率为192KB/s。第三层(MPEGLayer3)音频压缩算法能获得较好的音质，当前最 流行的MP3便是在这一层进行压缩的音乐，在制作MP3时可选择不同的压缩比，一般选择 10倍左右的压缩比即能将一个40MB的WAV文件压缩为4MB左右的MP3格式的文件。"
          }
        ]
      },
      {
        "二级标题": "11.3_多媒体进程管理中的问题和接纳控制",
        "三级内容": [
          {
            "三级标题": "11.3.1 实时任务的处理需求和描述 多媒体进程（线程）与通常的进程（线程）之间有许多相似之处，比如它们需要一定数量的 资源，具有三个基本运行状态等。但它们也各有自己的特点，因此，在对多媒体进程进行 管理时，必须考虑多媒体数据应遵循的时序需求。为此，应为系统配置接纳机制，来控制 同时运行的进程的数目，并选用适当的调度算法，来满足进程对截止时间的要求。",
            "正文": "1.实时任务的处理需求 在通常的多媒体系统中，必须按照严格的时间间隔对实时任务进行处理。或者说，必 须周期性地对数据进行处理，并在一规定的截止时间前完成。 而且是在每一个周期里都提供这样的保证，否则会引起难以预料的后果。 357  计算机操作系统\n\n（2）对在系统中运行的软实时SRT任务，进程管理应当保证它们的大多数截止时间要 求，仅对极少数的截止时间要求，进程管理如不能保证，其所引发的后果并不会十分严重。\n\n(3）当系统中有硬实时任务时，决不允许出现优先级倒置的情况，这样才能保证硬实 时任务的截止时间需求。如果系统中仅有软实时任务，则只允许很少出现优先级倒置的情 况，以便能保证软实时任务的大多数截止时间。\n\n（4）实时任务的处理时间，不仅包含每个周期对实时任务本身的处理时间，还应包含 为调度每一个任务所花费的时间，因此，应尽量减少实时调度所付出的开销。\n\n2.软实时任务的时间特性描述 在多媒体系统中，是对连续媒体数据流进行处理。在播放数字电影时，媒体服务器将 周期性地（对于PAL制式为40ms）逐帧送出数据。相应地，媒体服务器中的处理机必须在规 定的时间内对它进行处理后送给用户。可见播放数字电影将联系着一个截止时间或称为最 后时限。这说明数字电影是一个要求比较严格的周期性软实时任务。 为了对它们进行描述，应给出它们的时序限制，其中包含有开始时间s、截止时间d 和周期时间p三个时间指标，以及所需要的CPU处理时间e。这样我们对周期性任务T的 时间限制可以用(s,e,d,p)来描述，由此可以算出T的速率为r=1/p。图11-1示出了T的时 须在s+（k-1)p+d之前完成。 周期任务T 图11-1周期任务的时间特性"
          },
          {
            "三级标题": "11.3.2 多媒体进程管理中必须解决的问题 一 由于多媒体任务一般是运行在具有多媒体功能的通用操作系统平台上的，故系统中不 仅有软实时任务，而且还可能有一般任务，相应的进程管理必须解决如下问题：",
            "正文": "1.同时运行不同类型的软实时任务 通常媒体服务器可向众多的用户提供各种多媒体服务，如数字电影和电视服务。在系 统中，每一部数字电影都是作为一个软实时任务运行的，彼此间相互独立。不同的软实时 们有不同的开始时间、截止时间、周期时间和CPU处理时间。简而言之，多媒体进程管理 必须具有能支持多种不同类型的软实时任务同时运行的能力。\n\n2.支持软实时任务和非实时任务同时运行 一个具有多媒体功能的通用操作系统，它既应面向软实时任务的用户，又需面向非实 358  时任务的用户，如交互型作业的用户。因此，在系统中，应当允许多种类型的SRT任务和 不同类型的非实时任务并存。相应的进程管理应具备以下两方面的功能：一方面需要满足 SRT任务对截止时间的需求；另一方面又应使非实时任务的用户满意，并能很好地协调多 种任务的并发运行。\n\n3.提供适当的进程接纳机制 在多道程序环境下，如果在系统中同时运行的SRT任务太多，将难以保证实时任务的 截止时间需求。反之，若在系统中的SRT任务太少，CPU又会得不到充分利用。为解决此 矛盾而引入了对进程的接纳控制机制，目前常用的是基于预留的进程接纳机制。当新进入 的SRT任务提出接纳请求时，接纳机制将计算是否有足够的CPU时间片（带宽）来接纳该进 程，如果有足够的CPU带宽，便接纳它，并为每一个被接纳的SRT任务预留它在运行时 所需要的CPU带宽，如果已无足够的带宽，便拒绝接纳。\n\n4.采用实时调度算法 实时调度在保证SRT任务的实时性方面起着至关重要的作用。在具有多媒体功能的操作 系统中，一个好的实时调度算法应能向每个SRT任务提供可以接受的截止时间保证，即能满 足每一个SRT任务绝大多数的截止时间需求。在SRT系统中，使用最多的两种调度算法是：\n\n（1）速率单调算法，该算法简单有效，比较适用于周期性任务，现已被广泛应用于多 媒体系统中。"
          },
          {
            "三级标题": "11.3.3 软实时任务的接纳控制 1 为了能在任何负载情况（包含过载）下，都可以基本上保证软实时任务的截止时间要求， 需要在进程管理中新增两个重要的功能和机制：一是CPU带宽预留功能和机制：二是CPU 带宽调度功能和机制。为此，在进程管理中应配置两个重要的组件：①CPU代理（broker) 实体，它的主要功能是根据新进入系统进程的请求，确定是否接纳它作为SRT任务；②软 实时任务CPU调度实体，这是用于对SRT任务进行实时调度的程序。",
            "正文": "1.SRT任务带宽和尽力而为任务带宽 为了能确保SRT任务的实时性，并适当考虑非实时任务的运行，将CPU的带宽分为 两部分：\n\n（1）SRT任务带宽。把CPU的一部分带宽分配给SRT任务运行。如果SRT任务被接 纳了，它将获得（分配到）一部分SRT任务带宽，进程管理便会尽可能地保证它们的实时性。\n\n（2）尽力而为任务带宽。如果SRT任务未能被接纳，系统则有可能将该SRT任务分配到 尽力而为任务带宽中运行，此时系统只是尽可能地让它们得到运行的机会，但不做任何保证。 这两种带宽的分配比例可视具体情况而定，如果系统中的SRT任务较多，尽力而为任 务带宽的比例将可能很小，反之则可（稍)大些。例如，两种带宽的比例可以是70%和30%， 即用70%的时间来保证SRT任务的运行。带宽比例的划分可视情况而改变，如软实时任务 带宽未能被充分使用，便可将其中的一部分重新分配给尽力而为的任务运行。\n\n2.接纳控制 SRT任务在进入系统后，必需向CPU代理给定其定时服务质量参数，其中包含SRT 359  计算机操作系统 任务的运行周期(p)、每一周期中的运行时间(t)和CPU占有率u。当CPU代理收到请求后， 首先执行接纳控制。它根据一定的调度策略计算，确定是否可以接纳该任务。如果在接纳 后，不仅能够保证它所要求的截止时间需求，而且还不会影响到原有SRT任务的运行，则 CPU代理便可以接纳该进程，将它插入到进程就绪队列中等待调度。如果不能保证，将拒 绝接纳。此时请求进程可有两个选择：\n\n（1）等待以后再次申请接纳控制，直到被接纳为止。\n\n（2）由系统将该进程放入到尽力而为任务队列中运行。\n\n3.CPU代理进程 CPU代理的主要任务是，接收应用程序的接纳请求，根据接纳策略，做出是否接纳的 决定，并将被接纳的进程放入就绪队列。至于应调度哪一个进程运行，则应由进程调度程 序确定。通常，系统把CPU代理进程作为一个守护进程，平时它处于睡眠状态，一旦有新 的应用程序发来接纳请求时，代理进程将被唤醒，并根据该任务的请求来确定系统是否接 纳它。如果接纳了该进程，CPU代理将为它预留足够的CPU带宽，以调度时间的形式写入 到预留表（也就是供实时调度程序使用的调度表）中。 CPU代理进程必须拥有超级用户特权，以便能够根据需要，修改被接纳进程的优先级， 固定的实时优先级。需要说明的是，接纳控制没有必要实时运行，因为对进程的接纳并不 要求实时处理，因此，CPU代理进程可采取动态优先级方式运行。然而任何SRT任务的调 度，都是通过实时进程调度程序来完成的，显然实时调度程序必须是实时进程。\n\n4.预留策略 在基于预留策略的进程管理中，如何为SRT任务预留CPU带宽是至关重要的，涉及 到多个方面的事情。预留策略所需考虑的问题较多，下面介绍较为重要的几个问题： 1）预留模式 有两种预留模式：\n\n（1）立即预留，一旦预留请求到达，CPU代理立刻为之服务，如果被接纳，便立即将 它放入就绪队列。\n\n(2）高级预留，在这种预留模式中，请求进程不仅要给出进程的运行周期和利用率， 还需给出任务处理的开始时间和结束时间，CPU代理需要保留当前和未来的许多预留信息， 并考虑到调度情况，做好接纳控制。这样才有可能准确地估算出可以同时运行的SRT任务。 2）基于服务质量参数范围的预留 通常服务质量是有一定范围的，由此形成三种预留策略：\n\n（1）最小预留策略，基于最小的服务质量参数所产生的接纳控制，该策略比较适合于 数据率比较稳定的进程，如动画。\n\n(2）平均预留策略，基于平均的服务质量参数所产生的接纳控制，该策略比较适合于 数据偶尔出现差错的多媒体任务。\n\n(3）最大预留策略，基于最高的服务质量参数所产生的接纳控制，该策略可以保证所 有实时任务的截止时间，即它可以获得最好的实时性保证。 360  第十一章多媒体操作系统 3）预留排序 应如何确定对预留的排序。有两种预留排序策略：\n\n（1）按先来先服务策略排序，先到达的请求进程优先获得服务。\n\n(2）按优先级排序，根据进程的优先级大小依次为所有请求进程进行服务。"
          }
        ]
      },
      {
        "二级标题": "11.4_多媒体实时调度",
        "三级内容": [
          {
            "三级标题": "11.4.1 最简单的实时调度方法 在多媒体服务器中，将为所播放的每一部数字电影建立一个进程。其主要任务是，不 断接收从硬盘上传送来的帧，经适当处理后，便送往屏幕。最简单的实时调度方法是，假 定所要播放的电影都具有相同的类型，如都是采用相同的制式、分辨率和压缩比的彩色数 字电影。这样，为这些电影所建立的进程可具有相同的周期和处理时间。因此，可将它们 按FCFS原则排成一个进程就绪队列，并采用定时轮转的策略来调度和运行它们。 在这样的情况下，进程调度的实现十分简单。设置系统中的定时器，每隔40ms嘀嗒 一次，让所有的进程在此时间内依次运行一次。首先选择就绪队列的队首进程运行，当它 只要系统中的进程数目不超过规定值，便能使所有进程在40ms内都执行一次。等到下一 次嘀嗒时，又重新调度队首进程运行，如此不断地循环执行。这样就能保证每部电影一帧 接一帧地正常播放。 事实上，这种最简单的实时调度方法只能用于要求不高的场合，即所播放的电影具有 相同的类型。但现实情况要复杂得多，电影的类型不同，每部电影可能采用了不同的制式、 色彩、分辨率和压缩比等。这将使不同电影的每一帧其大小相差甚多，进而导致每个进程 用于处理每部电影时，所需要的CPU时间会相差很大。此外，点播数字电影的用户数目经 常发生变化，而且还可能有许多用户点播同一部电影。这种简单的调度方法是很难满足实 际需要的。显然，此时需要一种能用于同时播放多部不同数字电影和动画的实时调度方法。 下面我们先介绍在多媒体中用得较多的速率单调调度算法。",
            "正文": ""
          },
          {
            "三级标题": "11.4.2 速率单调调度（RateMonotonicScheduling，RMS）算法 RMS算法是一个静态的、优先级驱动的算法，适用于抢占式优先级调度方式以及实时 任务是周期性的情况。在采用该算法时，系统中的进程应满足如下条件：",
            "正文": "(1）在系统中允许同时存在周期性进程和非周期性进程，所有周期性任务具有固定的 周期。\n\n(2）所有的进程之间相互独立，互不依赖。\n\n(3）对于周期性进程而言，所有进程在一个周期中，所需完成的工作量是相同的，而 361  计算机操作系统 且任务还必须在周期内完成，不会影响到下一个周期的任务。 由于该调度算法主要是照顾周期性进程，而对于非周期性进程则仅以忙里偷闲的方式 来处理，故非周期性进程不应设有最终时限的限制。\n\n1.优先级的确定 在利用速率单调调度算法进行实时调度的系统中，代理进程将根据各个进程的请求速 率（周期时间的倒数），分配给每一个进程一个静态优先级，在整个运行期间不变。该优先 级的大小与它的重要程度无关，只取决于进程的请求速率，请求速率最高的任务将获得最 高的优先级。实际上，进程的优先级大小就等于进程的运行频（速）率。 例如，有两个任务A和B，它们的周期分别是50ms和25ms，即它们的运行频率分 优先级与运行速率的关系是一个单调递增的函数，故把该算法称为速率单调调度算法。在 运行期间调度程序总是优先调度优先级最高的就绪进程，如有必要，还可抢占正在运行的 进程的处理机。\n\n2.调度算法能否有效调度的衡量 在一个实时系统中，需要对调度算法是否能有效调度进行衡量，该衡量标准是依据调 其中T是进程P的周期时间，C是进程P所需的处理机时间总量，U;=C/T;是进程P的 处理机使用率。显然，在实时系统中必须保持多个进程的处理机使用率的总和不能超过1， 1对应于处理机的总使用率，也就是调度上限，只有这样才有可能成功地进行调度，亦即 应保持下面的不等式成立： (11.1) T T T, 周期2 周期！ 处理 处理 空闲 任务P，执行时间C 时间 任务P，周期T; 图11-2周期性任务的时序图 应当注意，上面的表达式忽略了处理机的调度和进程的切换时间，在实际应用中，调 度上限应取比1小的数，且随着处理机数目的增加而减小。LinandLayiand证明了对于任 何周期性进程系统，如果能保持下面不等式成立，就可以保证RMS算法正确工作。 ≤n（21-1) (11.2) TT T 在上式中，当n=1时，n（2lm-1)=1。n=2时n(2l/m-1)=0.828。n=3时，n（2lm-1)= 362  第十一章多媒体操作系统\n\n0.779，随着n的增加，n(2lm-1)的值将逐渐减小，调度上限n(2\"m-1)将收敛于0.693。假 如有三个周期性进程：进程P的C=20，T=100，U=0.2，进程P2的C2=40，T2=150， U2=0.267，进程P3的C=100，T=350，U3=0.286。这三个进程的总使用率为0.2+0.267+\n\n0.286=0.753，它小于上界0.779，因此可以使用RMS调度算法进行调度。 由于大多数实时系统都会有部分软实时任务或非实时任务，系统管理员可以赋予非实 时任务较低的优先级，而让它仅在处理机已处理完实时任务的空闲时间来运行。值得一提 的是，RMS算法在广泛的应用中已经发现，公式（11.2)中的上限值偏于保守，处理机的总 使用率能达到90%\n\n3.RMS算法实例 假如系统中有三个周期性进程，进程A每30ms运行一次，每次执行10ms：进程B 每40ms运行一次，每次执行15ms；进程C每50ms运行一次，每次执行5ms；图11-3 中的上面三行分别示出了A、B、C三个进程的周期和执行时间。由于优先级反比于进程的 周期，因此A、B、C三个进程的优先级分别为33、25和20。在t=0ms时，三个进程都处 于就绪状态，调度程序首先调度进程A运行；在t=10ms时，A运行完成，选择运行B； 在t=25ms时，B运行完成，选择运行C；在t=30ms时，C运行完成，此时A、B和C三 个进程都运行了一次，而又该A第二次运行。又花了30ms，到t=60ms时，A、B和C三 个进程又都运行了一次。到t=70ms时，系统变为空闲，到t=80ms时，B开始运行； 然而到了t=90ms时，B尚未运行完成，A又变为就绪状态，于是它抢占B而运行，到 t=100ms时，A完成后B再继续运行。图11-3中的第四行示出了用RMS算法进行调度时 的情况。 AA1 A2 A3 A4 A5 B BI B2 B4 C 网 四 RMS A1 A2 B2 A3 A4 e A5B4 EDF A2 B2 B3 A1 A3 A5B4 110120130 20 30 40 50 60 70 80 90 100 140 10 时间(ms) 图11-3RMS实时调度例子"
          },
          {
            "三级标题": "11.4.3 EDF算法与RMS调度算法的比较 一← 在第三章中，我们已经介绍了最早截止时间优先（EDF）调度算法，该算法是否可用作视 频服务器中的调度？把它与RMS算法比较，哪一种算法更好，各有何优缺点？这些将是本 章要阐述的问题。",
            "正文": "1.用RMS算法调度失败举例 现在我们来看另外一个例子：现有三个进程A、B和C，它们的周期与前例相同，只 是在此将进程A每次的运行时间由10ms增加至15ms，进程B和C每次的运行时间不变。 363  计算机操作系统 对于RMS算法，由于优先级只与周期有关，而与进程每次运行的时间多少无关，因此这三 个进程的优先级仍为33、25和20。调度程序先调度A运行，在t=15时调度B运行，在t=30 时进程A再次就绪，故调度A运行，在t=45时B又再次就绪，由于它的优先级高于进程C， 因此又调度B运行，等到t=60进程B结束时，进程C已错过其最后期限，RMS调度失败。"
          },
          {
            "三级标题": "15.15.5 何以会失败呢？我们来计算处理机的利用率，它们为",
            "正文": "0.975，而三个进 304050 程所允许的最大利用率仅为0.780。那么用EDF算法是否可以使这三个进程正常运行呢？我 们通过一个例子来说明。\n\n2.用EDF算法调度成功举例 在采用EDF算法进行调度时，由图11-4可以看出，前30ms时与RMS一样。在t=30 时，A2和C1都处于就绪态，如果按RMS算法，由于进程A的优先级高于C，此时应调 运行。在t=35时，A才再次运行，t=50时调度B运行。当t=90时，A第四次就绪，A与 正在运行的B最后时限同为120，基于不是必要就不抢占的原则，仍让B继续运行。在该 例中，直到t=150，处理机一直处于忙碌状态。 A A1 A2 A3 A4 A5 B B2 B4 C RMS A1 B1 A2 B2 失败 A EDF B1 A2 B2A3 B3A4A5B4 10 20 30 40 50 6070 8090100110120 130140 时间/ms 图11-4用RMS和EDF进行调度 使用EDF算法比用EDF算法可能需要付出更多的系统开销。在一个实际的视频服务 器中，应采用何种调度算法需要视具体情况而定。如果系统中的多个实时进程的处理机总 利用率低于RMS调度上限的限制时，可以选用RMS算法，否则应选用EDF算法。\n\n3.RMS与EDF算法的比较\n\n（1）处理机的利用率。在利用RMS算法时，处理机的利用率存在着一个上限。它随进 程数的增加而减小，逐渐趋于最低的上限为0.693。然而对于EDF算法，并不存在这样严 格的限制，因而该算法可以达到100%的处理机利用率。事实上，对于任意一组任务，只要 用静态优先级调度算法能够调度的，这一组任务也必定可用EDF算法来调度。\n\n(2）算法复杂度。RMS算法比较简单，计算出的每一个进程的优先级，在任务运行期 间通常不会改变。而EDF算法的开销较大，因为它所依据的是动态优先级，它会不断地改 变，每次调度时都需要先计算所有进程截止时间的大小，再从中选择最小的。\n\n(3）调度的稳定性。RMS算法易于保证调度的稳定性，因为RMS算法在调度时所依 364  据的优先级是静态的。因此只需要赋予重要进程较高的优先级，使之在进程整个运行期间 都能保证优先获得处理机。然而对于EDF算法，由于所依据的截止时间是动态的，截止时 间在运行期间不断变化，因此很难使最重要进程的截止时间得到保证。"
          }
        ]
      },
      {
        "二级标题": "11.5_媒体服务器的特征和接纳控制",
        "三级内容": [
          {
            "三级标题": "11.5.1 媒体服务器的特征",
            "正文": "1.多媒体文件的多种媒体性 如前所述，一部数字电影是由多种媒体文件组成的。其中包含了一个视频文件、若干种 语言的音频文件，以及不同国家文字的文本文件，图11-5示出了一部电影所包含的文件，而 且在播放时，这些媒体数据流之间还必须保持同步。例如，在播放一部数字电影时，图像画 面和相应的声音或滚动字幕应当同时出现，即使图像画面、声音或字幕之间出现了很小的不 同步，也会使播放失败。因此，媒体服务器需要具有保持多种媒体数据流同步的能力。 帧 12°34\n\n6789..10 英语 音频 法语 音频 德语 音频 英语 11213|4]56]7]8]9.].10 字幕 法语 -123-45678910 字幕 快进 快倒 图11-5一部电影所包含的多种媒体的文件\n\n2.拉型和推型文件服务器 在传统的服务器中，进程要访问一个文件时，应先用open系统调用将文件打开，然后 再用read系统调用把文件中的数据读出。如果把这种方式也用于多媒体文件系统中，则用 户每发出一个read系统调用命令时，服务器便送出一帧数据，如图11-6(a)所示。该方式一 方面要求用户必须以精确的时间间隔不断发出read命令，读出一顿数据；另一方面要求服务 器每个周期都能及时地提供数据。可见，该方式不仅麻烦，而且也很难满足实时性要求。通 常把传统文件服务器称为拉型服务器。因为它需要用户不断发出命令，把数据“拉”过来。 365  计算机操作系统 为了解决上述问题，在多媒体文件服务器（视频服务器)中，采用了类似于录像机中所 用的工作方式。由用户进程发出start系统调用命令，并给出文件名和有关参数，然后视频 服务器便会以所需的速度，每隔一定的时间送出一帧数据，再由用户进程及时对它进行处 理。图11-6(b)示出了这种工作方式。通常把这种服务器称为推型服务器，因为它不断将数 据“推”给用户。 视频服务器 视频服务器 客户 客户 开始 请求 块！ 块1 时 块2 请求2 间 块3 块2 块4 请求3 块5 块3 (a)拉型服务器 (b）推型服务器 图11-6拉型服务器和推型服务器\n\n3.多媒体文件的存储空间分配方式 在传统的文件系统中，文件组织的一个重要目标是通过减少内部和外部磁盘碎片，提 高磁盘空间的利用率。为此，存储空间的分配主要采用基于盘块的离散分配方式。而在多 媒体文件系统中，文件组织的一个重要目标是能提供恒定速率的数据流和能及时地检索数 据。如果将一个多媒体文件的数据盘块分散地存放在磁盘的不同位置，将会使在传送一个 连续的数据流时，不断地进行寻道，从一个盘块转到另一个盘块，导致所传送的数据流出 现断断续续的现象。因此在视频服务器中，对多媒体文件主要采用连续分配方式。当然这 样可能会引起较多的内部和外部碎片，但可以赢得时间，即以空间换取时间。\n\n4.人机交互性 观看节目时，还可选择自已所熟悉的语言音频和字幕，并且可以根据需要随时更换。此外， 用户还可以随时停止（或暂停）正在观看的电视，或（让电视）从一集跳至下一集，或让电影快 进或快退等，即媒体服务器需要具有人机交互的功能。 传统的电视在传输的实现上比较简单，每套节目只需要一条频（信）道，而不管有多少 人看。然而能进行人机交互的媒体服务器实现起来就困难得多，主要表现为：\n\n（1）它需要为每一个用户准备一条信道，如果允许1000个用户同时收看节目，就需要 有1000条信道。 许多不同的节目。\n\n（3）有的节目可能只有一个用户观看，但有些流行节目则可能有许多用户同时或接近 同时观看，为此，服务器必须能够让众多用户同时观看一个节目，即众多用户能同时进行 人机交互。"
          },
          {
            "三级标题": "11.5.2 存储器管理中的接纳控制 为了能保证SRT任务的实时性，存储器必须能及时地提供数据，而存储器能否及时提 366  供数据的关键是SRT任务运行时所需的数据是否驻留在物理内存中。因此，在存储器管理 中增加了存储器页面锁定功能。",
            "正文": "1.存储器页面锁定功能 对于某个SRT任务来说，如果其某些页面未在物理内存，而在运行中又需要用到这些 页面上的代码或数据，则将发生缺页中断，这意味着所需之页面必须从磁盘中读取。由于 读盘所需的时间不仅较长，而且是不确定的，这无疑会给SRT任务带来极大的影响。为避 免发生缺页中断情况，一个行之有效的方法是将SRT任务运行时所需之代码和数据锁定在 物理内存中。只有这样才有可能保证SRT任务的截止时间。 由于物理内存是非常宝贵的资源，而且容量有限，将SRT任务锁定在内存中，必将减 少内存的可用空间，导致系统综合性能的降低。因此不少操作系统都规定了只充许将一部 分内存空间分配给SRT任务，通常最多控制在60%～70%内。\n\n2.存储器代理 为了能保证每一个SRT任务的实时性，如同处理机预留CPU带宽一样，我们也引I入 了存储空间预留功能，为每一个SRT任务预留锁定的存储空间。为实现该功能，在存储器 管理中增加了两个功能实体：存储器代理和存储器控制器。 为了能为SRT任务预留其所需要的存储器空间，由存储器代理锁定一定数量的内存空 间，把它称为全局预留存储空间，它可分为两部分：①接纳存储空间，这部分已经分配给 了被接纳的SRT任务，正在使用：②可利用存储空间，即可供新的预留请求使用的存储 空间。在确定全局预留存储空间的大小时，应当十分谨慎。首先应为内核和交互式进程留 有足够的空间，否则，可能会导致内核和交互式进程在运行时发生频繁的页面交换。 SRT任务在进入系统后，必须向存储器代理声明，请求其运行时所需要的内存数量， 存储器代理将对请求进行如下的检查： 所请求的存储空间≤可用存储空间 如果条件成立便接纳它，为它预留存储空间，否则拒绝接纳。凡被接纳的SRT任务，存储 器代理将向它提供一个预留标识符ID，并将该预留ID放入预留表中。\n\n3.存储器控制器 获得数据。在SRT任务执行时，将ID传送给存储器控制器。后者利用预留表检查该预留 ID是否合法，如果合法，便为SRT任务分配并锁定存储器。存储器控制器还把存储器的钥 匙传送给SRT任务，SRT收到后，便建立起存储段与自已的地址空间之间的映射关系。当 SRT任务执行完成后，又将向存储器管理程序发送一释放请求，其中也包含了存储器的钥 匙。存储器管理程序收到该请求后，便释放它所占有的锁定存储空间，并向存储器代理归 还该可用存储空间。"
          },
          {
            "三级标题": "11.5.3 媒体服务器的接纳控制 一 一 通常一个媒体服务器可以同时为多个用户提供服务，由于每一个多媒体数据流都有定 时要求，为了保证服务质量，媒体服务器同样也需要设置有接纳控制功能。该功能根据接 纳控制算法确定是否应该接纳某用户对指定数据流的请求。 367  计算机操作系统",
            "正文": "1.媒体服务器的服务质量 不同的SRT任务，所要求的服务质量并不完全相同。因此，一个媒体服务器应当能够 提供几种服务质量，以满足不同用户的需要。通常，可以提供如下三种服务质量保证：\n\n（1）确定型的保证。这是最高的服务质量保证，它能完全保证SRT任务的所有截止时 间。为实现这样的保证，在接纳控制的算法中必须假定系统与实现实时性有关所有部分都 是处于最坏的情况，如磁盘的寻道时间最长、磁盘旋转延迟时间最长等。\n\n（2）统计型的保证。它能以较高概率保证SRT任务的所有截止时间。为了实现这样的 保证，在接纳控制的算法中将假定系统与实现实时性有关所有部分都处于一般情况。\n\n（3）尽力而为型保证。没有为SRT任务的截止时间提供任何保证，只是在完成对所有 确定型和统计型的服务之后，如果处理机还有剩余时间，才会调度这类任务运行。\n\n2.接纳控制 对于不同的服务质量保证和不同的服务所采用的接纳控制条件是不一样的，在这里只 是讨论接纳控制条件中最基本的问题。 由磁盘送出的。在每一个周期中，每部电影都将播放一帧。每一帧包含了Ki个盘块，这样 处理机在每个周期将处理K、K2、、K、\"\"、K序列盘块中的数据。我们必须了解媒体 服务器的传送速率能否保证SRT任务播放的实时性，为此需要进行两方面的计算：①计算 播放一帧时需要的总时间。②计算媒体服务器传送每一帧数据所需的时间，进而计算出每 一个周期需要的总时间。如果每一个周期都播放一顿时所需的总服务时间都能大于媒体服务 器在相应周期传送相关数据所需的总时间，那么就可以保证所有任务的实时性，反之则不能。 对于确定型的保证和统计型的保证，在计算方法上是完全相同的，差别仅在于所使用 的参数有所不同。对于确定型的保证，在计算中所采用的应当是最坏情况下的参数，如磁 盘的寻道时间最长，而对于统计型的保证所用的应当是统计性参数。"
          }
        ]
      },
      {
        "二级标题": "11.6_多媒体存储器的分配方法",
        "三级内容": [
          {
            "三级标题": "11.6.1 交叉连续存放方式",
            "正文": "1.多媒体文件存放中的问题 多媒体文件存放最重要的要求是，存放在硬盘上的数据如何能快速地传送到输出设备 上，不会发生因送出数据不及时而使屏幕上的画面发生颤动。在采用离散分配方式时，在 磁盘传输速率足够高的情况下，送出数据不够及时最主要的原因是在传输一帧的过程中需 要进行多次寻道，由于寻道和磁盘旋转延迟通常都需要数十毫秒，很难及时将数据送出。 因此，多媒体文件都采用连续文件。 368  第十一章多媒体操作系统 通常在一部数字电影中，每一帧中都同时包含了视频、音频和文字信息，即使其中的 每一种媒体文件都是连续文件，但如果这些文件之间未连续存储，在传输一帧信息时，还 需要从视频文件跳到音频文件，再从音频文件跳到文本文件的多次寻道。换言之，传送每 一帧信息仍然需要进行多次寻道，因而仍不能满足多媒体播放的要求。\n\n2.交叉连续存放方式 在该方式中，不仅要求多媒体中的每个文件是连续文件，而且还需在不同文件间采取 按帧交叉的方式存放。首先存放第一帧中的视频数据，紧靠着它存放第一帧中的各种音频数 据，然后是存放第一帧中的多个文字数据，如图11-7所示。在从磁盘读出时，最简单的方法 是将每一帧中所有数据全部读出到内存的缓冲区中，然后只将用户所需之部分传送给用户。 这种存放方式的明显优点是，每一帧信息只读一次，不会发生多次寻道，因此能保证 硬盘上的数据快速传送到输出设备上，图像不会发生颤动。其缺点是，每次读出的数据中 有许多是用户并不需要的，例如，通常用户只需要一条音频和一种文字字幕，其它的音频 和文字字幕都是不需要的。这不仅增加了磁盘I/O的负担，也占用了更多的内存缓冲区。 此外，交叉连续存放方式还不能实现随机访问、快进和快退等功能。因此该方式只适用于 不要求随机访问和快进快退的简单播放方式。 第1帧 第2帧 第3帧 人 人 V 视频AAATT视频AAATT视频AAATT 音频 文本 轨迹 轨迹 图11-7交叉连续存放方式"
          },
          {
            "三级标题": "11.6.2 顿索引存放方式 ：一 为了克服交叉连续存放方式的缺点，即在每一部数字电影中所包含的视频文件、音频 文件和多个文本文件都需要连续存放，而引入了索引存放方式。该方式又可分为两种：",
            "正文": "(1）帧索引存放方式，又称为小盘块法。\n\n(2）块索引存放方式，又称为大盘块法。\n\n1.帧索引存放方式的基本原理 在小盘块法中，所选定的盘块大小应远小于顿的大小。对于每秒30顿的MPEG-ⅡI而 言，帧的平均大小为16KB，通常选定盘块大小仅为1KB或2KB，故将它又称为小盘块 法。这样，电影中的每一帧信息需要存放在一连串的连续盘块中。和前面一样，在这一串 连续的盘块中，仍是包含了一个视频、多个音频和多个文本文件的数据。 在系统中，为每部电影建立一个帧索引表。其中的每一个表项至少应有两个字段，一 个是地址字段，它用于存放相应帧所在盘块的始址，如第i个帧索引表项中的地址字段指 向第i帧所在盘块的始址。另一个是帧长字段，用于存放该帧的盘块数目，如11-8（a)所示。 在播放电影时，首先从帧索引表的第一帧索引表项中找到第一帧的盘块始址，从中将该帧 的内容全部读出。然后再从帧索引表的第二个帧索引表项中找到第二帧的盘块始址，再将 369  计算机操作系统 第二帧的内容全部读出。 帧索引 磁盘块大小 块索引 小于顿的大小 磁盘块大小 大于顿的大小 1 音频\n\n111111111114 11E 文本 帧 P帧 未用 (a)小磁盘块 (b)大磁盘块 图11-8索引存放方式\n\n2.帧索引存放方式的性能分析\n\n（1）支持随机访问。由于采用了帧索引表，该方式能很好地支持随机访问。例如当我 们要读第i帧时，可以直接依据索引号i值，从帧索引表中找到相应的表项，从该表项中的 地址字段便可找到第i帧所在盘块的始址，接着将该帧读出。\n\n（2）关于快进、快退问题。帧索引存放方式可以支持快进，但效果不一定好。为了达 到好的效果，可以专门制作一个快进文件。如果文件没有经过压缩，只要每10帧显示一帧， 便可以10倍的速度快速前进，如果希望以20倍的速度快进，只须每20顿显示一帧。当需 要快进时，系统必须能够找到快进文件，然后跳到该文件的正确地方进行播放。\n\n（3）磁盘碎片较小。在采取帧索引存放方式时，对每一顿采用连续存放方式，最后一 个盘块可能会有一些空闲空间。但由于盘块较小，相应的磁盘碎片也较小。如果某数字电 影有N帧，每个盘块的大小为1KB，由此引I起的磁盘碎片平均为N×1/2KB。对于一部 70分钟的电影，如果每秒钟25帧，整个电影约有100K帧，其所产生的磁盘碎片平均大 约是50MB(70×60×25/2)。\n\n（4）顿索引表大。在小盘块法中，需要为每一帧设置一个表项，由于一部电影需要很 多的帧，对于一部2小时的电影，如果每秒钟30帧，大约有216K帧（120×30×60)。因 地址为4个字节），由此可以算出帧索引表大约为1MB。帧索引表不仅要占用磁盘空间， 而且在播放时还需将它调入内存，这样又会占用很大的内存空间。\n\n（5）缓冲管理简单。在小盘块法中由于每次操作都是读出一帧，为了提高磁盘的输出 速度，可以采用双缓冲方式，一个缓冲用于播放当前帧，另一个缓冲用于存放下一帧。当 一帧播放完后，可以立即播放另一个缓冲中的内容。\n\n（6）存储管理复杂。由于在小盘块法中，要求为每一帧都分配一连串连续的盘块，以 使磁盘上的数据能更快地传输。此时，磁盘空闲空间的组织就不能再采用传统OS中的位 示图、链表法等，而需要用一种较为复杂的方法。"
          },
          {
            "三级标题": "11.6.3 块索引存放方式 一一一←",
            "正文": "1.块索引存放方式的基本原理 在块索引存放方式中所选定的盘块较大，其大小应远大于一帧的大小，如256KB，以 370  第十一章多媒体操作系统 便在一个盘块中可以存放多个帧，故将它称为大盘块法。由于在大盘块法中每个数据块的 大小是相同的，故把这种组织称为恒定数据长度。 在大盘块法中，所配置的索引表采用的是块索引，它是以盘块号为索引，而不是以帧 号为索引。在每一个索引表项中同样需要两个字段，一个帧号字段用来存放在该块中的第 一个帧的帧号，另一个字段存放该块中所存放的帧数。另外还需要几个地址字段，用于存 放在本盘块中每一帧的盘块始址。这样通过查找盘块号，就可以找到含有指定帧的大盘块， 然后再从相应地址项中找到指定帧的盘块始址。大盘块法如图11-8(b)所示。\n\n2.块索引存放方式的性能分析\n\n（1）支持随机访问。块索引存放方式虽然可以实现随机访问，但要比帧索引存放方式 复杂些。例如，当我们要读第i帧时，可以直接根据索引号i，找到包含了指定帧的块索引 表项，然后，从该表项中的地址字段中，找到指定顿的盘块始址，最后便可将该顿读出。\n\n(2）磁盘碎片较大。在采取块索引存放方式时，在一个大盘块中可以存储多个帧，当 盘块中的存储空间不足以装下后面一顿时，可采取两种处理方法：①一帧跨越两个盘块， 该方法是继续装入下一帧，直到大盘块全部装满，剩余部分再装入下一个盘块。该方法的 主要问题是，通常会发生再次寻道，影响播放质量。②让剩余部分空闲，只要不能装下后 面一帧，便让剩余的空间空着，由此会形成磁盘空间的浪费，我们把它称为内部碎片。大 盘块法可能造成比小盘块法更大的碎片。\n\n（3）块索引表小。在采取大盘块方式时，需要为每一块设置一个块索引表项。由于每 均能存放16个帧，因此块索引表要比帧索引表小得多(1/16)。如上所述，对于一部2小时 的电影，大约有216K帧，相应地，在块索引表中只有13500个索引项，而每个表项需要 8个字节（帧的大小字段用1个字节，磁盘地址为4个字节，3个字节为帧的盘块始址），块 索引表的大小仅为100KB左右，它比帧索引表小了约90%。这不仅可明显减小所占用的 磁盘空间，而且在播放时，还可明显减小占用的内存空间。\n\n（4）缓冲管理复杂。在大盘块法中，虽然也可以采用双缓冲方式，但两个大缓冲需占 完全不用一次将一个大盘块中的内容全部读出。对此可采用循环缓冲方式，即在系统中设 置多个缓冲，每个缓冲稍大于磁盘块的大小，将这些缓冲组成循环缓冲器，整个循环缓冲 器的容量应大于一帧的容量再加上一个盘块的容量。"
          },
          {
            "三级标题": "11.6.4 近似视频点播的文件存放 对于视频点播，用户可使用遥控器选择自己想看的电影或电视节目。但视频点播的实 现是有相当难度的，因为如果有100个用户在观看同一部新电影，而通常他们的进度都不 太可能完全相同，由此需要100个同样的新电影的数据流，这将需要大量的系统资源。而 近似视频点播则可以大大减少对系统资源的需求。",
            "正文": "1.近似视频点播(nearvideoondemand) 近似视频点播是视频点播的一种近似，它是每隔一定时间开始一次播放。例如，从晚 8点开始第1次播出，到晚8:05开始第2次播出，8:10开始第3次播出，。如果某用户 371  计算机操作系统 想在8:08时看该电影，那他只须等2分钟，到8:10时便可看到。图11-9示出了近似视频 点播的数据流图。在8:05，第一个数据流处于第9000帧时，便开始第二个数据，在8:10，第 间到9:55时，开始第24个数据流。到10:00整时，第一个数据流终止，又重新从第0帧开始。 数据流 0090001800027000360004500054000630007200081000 0900018000270003600045000540006300072000 2 09000180002700036000450005400063000 3 0000000900070008100060 4 第3个数据流中 090001800020003600 5 的第9000帧数据 在8:20送出 090001800027000 6 7 0900018000 。 8 9 8:00 8:05 8:10 8:15 8:20 8:25 8:30 8:35 8:40 8:45 时间— 图11-9近似视频点播的数据流图 这样做的最大好处是，对于一部两个小时的电影，只需要24个数据流（每5分钟一个） 就能满足所有用户的需要，而用户数量基本上不受限制。如果说视频点播是出租汽车，一 招手它就来，非常方便，但需要很多的出租车才能满足要求，那么近似视频点播就像是公 共汽车，每隔一定时间就开一班车，它就能满足非常多的人的需要。在采用近似视频点播 时需要考虑两个问题：\n\n(1）间隔时间大小。数据流之间的间隔时间应选择多长？间隔时间越小，用户的等待时 间越少，但一部电影需要的数据流也就越多。例如间隔2分钟，此时用户的最大等待时间 只有2分钟，但对于2小时的一部电影就需要60个数据流。反之，间隔时间越大，用户的 最大等待时间就越长，但一部电影需要的数据流也就越少。\n\n(2）用户数的多少。就像是否要开通一路公交车一样，只有当需要乘这一路车的人数 达到一定数量时，才会开通该路公交车，而且人数越多，开出的班车的间隔时间也就越短。 类似地，只有当需要观看某部电影的人数达到一定数量时，才需要开通该电影的近似视频 点播，而且人数越多，间隔时间越小。\n\n2.近似视频点播的文件存放 在近似视频点播中，即使电影文件是连续文件，但在它以24个数据流错时送出时，由 于每两个相邻的数据流都相差9000帧，因此从一条数据流转至下一个数据流时就需要进行 372  第十一章多媒体操作系统 寻道。但如果能采用如图11-10所示的方法，则几乎可以完全消除寻道操作。其基本思想 是，将24路数据流中的在同一时间播放的24帧依次放在一起，作为一个记录写入磁盘。 在播放时，也将它们一起读出，这样就避免了寻道。例如，在某个时刻，24路数据流刚好 开始，需要播放第0帧，23路数据流需要播放第9000帧，22路数据流需要播放第18000 帧，而21路数据流需要播放第27000帧，“，直到1路数据流需要播放第207000帧。由 于这24帧已被一起读入内存，故不存在寻道问题。 磁盘块从磁盘读出的顺序 数据流：数据流！ 数据流！ 数据流！ 24 23 15 1 1 1 磁道1 9000 18000 27000 36000 4500054000630007200081000 207000 磁道2 9001 18001 27001 3600145001 54001 163001 81001 207001 磁道3 2 9002 18002 27002 36002 45002 254002 63002 72002 81002 . 207002 第27002顿（大约为电影的第15分钟） 图11-10近似视频点播的文件存放"
          },
          {
            "三级标题": "11.6.5 多部电影的存储方法",
            "正文": "1.单个磁盘的情况 前面所考虑的只是在视频服务器上存储了单部电影，但实际情况往往是视频服务器上 存储了多部电影。如果这些电影被随机地存放在磁盘的各个地方，那么当多个用户需要同 时观看这些电影时，必然会造成磁头的频繁来回摆动。应如何在磁盘上存储多部电影呢？ 通常，每一部电影的点击率是不同的。我们在将这些电影存储在磁盘上时，应当将电 影的流行因素考虑进去，使越流行的电影越容易被访问到。事实上，有许多流行的事物， 如流行电影、流行音乐、访问Web网页等，大体上都遵循一种可预测模式，该模式又被称 为Zipf定律。该定律可描述为： 1°2*3*4* N 其中，C是一个常数，其值可由上式算出，当N为10、100或1000时，C值分别为0.341、\n\n0.193和0.134。上式中的1、2、3、4等分别可以表示第1流行的电影、第2流行的电影等。 当系统中存储了1000部电影时，第1流行的电影被点击的概率为0.134，第2、3、4流行 的电影被点击的概率分别为：0.067、0.045、0.034。由此产生了一个管风琴算法(organ-pipe algorithm)。该算法规定，将第1流行的电影存储在磁盘的中央，第2、3流行的电影存储 在第1流行的电影的两边，第4、5流行的电影又存储在第2、3流行的电影的外面两边， 如图11-11所示。 373  计算机操作系统 使用 频率 电影 电影 电影 电影电影电影电影电影 电影 电影 电影 10 8 6 5 7 9\n\n11. 柱面— 图11-11多部电影按管风琴算法分布 不难看出，该算法是试图把磁头保持在磁盘的中央。当服务器上装有1000部电影时， 根据Zipf定律，排在前5名的流行电影被点播的概率之和将达到0.307。这意味着有30% 的时间，磁头是位于前五部电影的磁道上，而它们都是处于磁盘的中间部分。实践证明， 如果每一部电影都是如图11-11所示的连续文件，按管风琴算法分布的方式会工作的很好。\n\n2.多个磁盘情况 为了满足众多用户的需要，配置在视频服务器上的磁盘系统通常都需要很大的存储容 量，因此在视频服务器上的磁盘系统，大都采用许多个磁盘来扩大磁盘系统的容量，如采 用RAID磁盘阵列。 为简单起见，假定系统中有四个磁盘，将第一部电影A全部放在磁盘1上，电影B、 C和D分别全部放在磁盘2、3和4上，如图11-12（a）所示。这种存放方式实现简单，故障 特性简单明了，如果某一个磁盘发生故障，在该盘上的电影信息可能丢失，问题并不严重， 因为还可从DVD再装入到另一个盘中。这种存放方式的缺点是，各个磁盘上的负荷与电 影的流行程度有关，可能会很不均衡。另一种存放方式是将一部电影分为几部分，分别存 入一个磁盘中，这样在磁盘1上同时存放了A、B、C、D四部电影的一部分。同样，在磁 盘2上也同时存放了A、B、C、D四部电影的一部分，如图11-12(b）所示。由于每部电影 都是从头开始的，故该方式可能会引起磁盘1的负荷增加。进一步改进是采取交叉存放， 25 3 4 2 3 4 磁盘 A0 BO CO A1 A2B45 A7 D4 D5 D7 (a)无条带 (b)采用相同的条带模式 2 ④ 26日6048 D1 D2 D3 D5 D6 D7 D4 D6 D5 D4 D7 (c)交错条带 (d)随机条带 图11-12在多个磁盘上的存放方式 374  第十一章多媒体操作系统 将每一部电影的起始部分放入不同的盘中，如图11-12(c)所示。第四种存放方式是采取随 机存放，如图 11-12(d)所示。"
          }
        ]
      },
      {
        "二级标题": "11.7_高速缓存与磁盘调度",
        "三级内容": [
          {
            "三级标题": "11.7.1 高速缓存 一 对于传统的OS，在内存中设置高速缓存的主要目的，是为了减少对磁盘的访问时间。 所采取的方法是将那些在不久之后可能会被访问的盘块数据放入到高速缓存中，以便以后 需要时，可直接从高速缓存中读取，这样就节省了对磁盘的访问时间。然而在播放一部电 影时，通常是从头到尾顺序访问，除了某些特殊情况，如重看等，一个盘块一般不会使用 两次，因此传统高速缓存技术是不可取的。但高速缓存在多媒体系统中仍有其可用之处。",
            "正文": "1.块高速缓存 虽说当一个用户在看一部电影时，刚放过的盘块不会被重用，但如果是有多个用户几 乎同时在看一部电影，刚放过的盘块则可能会被多次重用。例如，第一个用户于晚8点开 始观看，第二个用户8：01开始看，这样第一个用户看过的内容在1分钟后，就要被第二个 用户使用。换言之，当有多个用户几乎同时在看一部电影时，将已看过的部分放入高速缓 存是非常有效的方法。为了管理上的方便，应该在那些有多个用户几乎同时观看的电影上 标上“可高速缓存”的标记，而其它的电影就不需要高速缓存了。\n\n2.将两条视频流合并 如果两条视频流在时间上相差很少，我们可以对两条视频流进行合并。例如，第一个 用户在晚8点观看一部电影，第二个用户在过了10秒后观看同一部电影。虽说我们可以利 用高速缓存来保留10秒钟已放过的电影，但这会要求占据很大的存储空间。一个行之有效 的方法是通过改变两部电影的播放频率，将两条视频数据流进行合并，使其成为一条视频 数据流，如图11-13所示。 图中，两部电影均以每分钟1800帧的速度播放，用户1所看电影的视频流在前，用户 2所看电影的视频流在后，为了能将这两个视频流合并，可以放慢用户1电影视频流的速 度，从每分钟1800帧降为1750帧，反之加快用户2电影视频流的速度，从每分钟1800帧 升为1850帧。在3分钟后，它们都处在第5550帧。此时可以将两个视频流合并为一个视 频流，以每分钟1800帧的正常速度播放。在此期间用户1的视频流速度放慢了2.8%，用 户2的视频流速度加快了2.8%，通常用户是感觉不出来的。 另外一个合并视频流的方法是，在用户1所播放的电影中适当地插播一些广告，用户 2仍以正常速度播放电影，经过一段时间后用户2的视频流就会赶上用户1的视频流，以 后就可以只播放一条视频流。 375  计算机操作系统 10秒钟 1分钟 2分钟 3分钟 4分钟 3 用户1 6 2 0 0 0 0 0 0 0 用户2 0 时间 开始晚于10秒 (a)两个用户观看失步10秒钟的同一部电影 较慢播放 正常速度 用户1 用户2 较快播放 正常速度 (b)将两个视频流合并为一个 图11-13将两条视频流合并\n\n3.文件高速缓冲 在一个为公众服务的视频服务中心，通常都应当备有许多电影和电视剧节目。由于在 DVD光碟中的电影或电视剧所占用的存储空间都非常大，一般都有数GB，因而不可能都 装入视频服务器的磁盘上，而是仍然放在光盘或磁带上。在需要播放某部电影时，再将它们 复制到磁盘上。但因光盘特别是磁带的低速性，要将这些电影从光盘复制到磁盘上需要花很 多的时间。于是在大多数视频服务器中，都是将用户请求最频繁的电影文件放入内存的高速 缓冲中，而把流行的整部电影文件放在磁盘上。其它的电影文件仍然放在DVD光盘或磁带上。 还可采取另一种方法来使用高速缓冲，在磁盘中先存放每一部电影的最初几分钟片段， 当用户请求到某部电影时，先从磁盘中将该电影的第一片段复制到高速缓冲，并开始播放， 此时该电影已被复制的第一片段(部分)仍保留在磁盘中以备其它用户请求。与此同时，又 将该电影的第二个片段复制到磁盘上，继而又将它送入高速缓冲，同样其拷贝也仍保留在 磁盘上。与此同时又将该电影的第三个片段复制到磁盘上。如果在相当长时间内再无其它 用户请求，这时可从高速缓冲中清除该电影。"
          },
          {
            "三级标题": "11.7.2 静态磁盘调度 在多媒体系统中对磁盘调度提出了比传统OS更为严格的要求。其主要原因是：",
            "正文": "（1）多媒体文件的数据量特别大，相应地要求数据传输速率也非常高。\n\n（2）为保证电影的播放质量，要求具有很高的实时性；\n\n(3）对于一台视频服务器，可能要同时处理成百上千的用户请求。 376  第十一章多媒体操作系统 但它也有比传统OS更容易处理的地方，即在播放时有着很强的可预测性。\n\n1.可预测性 在传统OS中，用户对磁盘的请求是难以预测的，因此一般只提供了预读一个盘块数 据的功能。而在多媒体系统中，无论是电影还是电视剧都是连续播放的，即在播放了第i帧 后，紧接着就会播放第i+1帧，这就大大提高了请求的可预测性。例如在播放每秒25帧的 电影时，视频服务器每隔40ms就向用户提供下一帧信息。在采用双缓冲的情况时，便可在 播放第i帧时，提前从磁盘上读取第i+1帧，即实现了播放第i顿和读取第i+1帧并行处理。\n\n2.按磁道顺序排序 相同的顿频、分辨率。这时，系统可以为每一部电影建立一个进程，在进程调度时采用轮转 法方式。首先让第一个进程运行，当它运行完后调度第二个进程运行，直至最后一个进程运 行完毕。这里的关键问题是，所有进程运行一次的时间，应小于每帧之间的时间间隔40ms。 用户所观看的10部电影被分布在不同的磁道上，应根据什么原则对磁盘请求进行排序呢？ 一种较好的方法是按请求磁道顺序号进行排序，磁道号最小的排在最前面，图11-14示出了磁 盘请求的处理顺序。由图可以看出，视频流2是最小磁道号92，因此它最先被处理；视频流 4是第二小磁道号130，因此它第二个被处理；视频流1是最大的磁道号701，因此它应最后 一个被处理。对寻道经过这样的优化后，可以大大减少处理每一个请求的平均时间。 视频流 12345678910 奇数帧的缓冲区 偶数帧的缓冲区： 0 口 请求的磁盘块 70192281130326410160466204524 L 优化算法 磁盘请求被处理的顺序 92 2130160204281326410466524701 图11-14磁盘请求的处理顺序 为了能连续不断地将视频流传送给用户，在内存中应为每个视频流设置两个缓冲区，当 有10个视频流时，便应设置20个缓冲区。在第1个帧周期，电影播放使用第一组缓冲区中 的数据，将磁盘中数据传送到第二组缓冲区。在该帧周期结束时，电影播放使用第二组缓冲 区中的数据，将磁盘中的数据传送到第一组缓冲区。此外，我们还可以增加缓冲区的大小， 使其能装入两帧数据，每一次从磁盘中读取两帧数据，这样可使磁盘的操作次数减半。"
          },
          {
            "三级标题": "11.7.3 动态磁盘调度 为简单起见，在前面曾假设，所有的电影具有相同的分辨率和帧频。现在再来分析当 多部电影具有不同的分辨率和帧频时，所播放的电影对磁盘的请求会带有一定随机性的情 况。当它们提出读磁盘请求时，需要明确指定磁盘块号以及何时需要该磁盘块中的数据， 377  计算机操作系统 亦即最终时限，错过该时间将会影响到播放质量。考虑到为读出盘块内容和对该内容进行 处理都需花费一定的时间，我们把该时间表示为△T，由此可以算出最晚读该盘块的时间应 当是T=最终时限-△T。",
            "正文": "1.动态磁盘调度算法应考虑的因素 当第一个用户提出观看某部电影的要求时，由于此时尚无其他用户请求，故可立即获 得服务。在此期间可能会有其他用户发来请求，它们都会被挂起。当第一个用户请求完成 时，怎样从被挂起的用户请求中选择一个，即应采用什么样的磁盘调度算法，主要应考虑 这样两个因素：\n\n（1）令磁盘总寻道时间最小，这是性能因素。为使磁盘的总寻道时间最小，在电梯调 度算法中需要根据磁盘请求中的磁道号来排序。\n\n(2）能满足截止时间要求，这是实时因素。为使电影的播放质量能满足用户的要求， 应在截止时间前向用户提供所需的数据。\n\n2.Scan-EDF算法 上述的性能因素和实时因素经常会发生矛盾。为了满足前者，往往会错过最终时限。 反之，为了满足后者，则又会增加总寻道时间。Scan-EDF算法同时考虑这两个因素，并将 算法的基本思想是，基于实时因素是硬性要求的这一特性，先考虑截止时间要求，将多个 截止时间相近的磁盘请求放在一个组中，由此可以形成若干个组，在每一个组中再按照磁 道序号进行排序。 我们通过图11-15所示的例子来说明该算法。当t=700时，磁盘驱动器得知：已有11 个请求因要访问本磁盘而被挂起，它们的截止时间和访问的磁道数不相同。该调度算法将\n\n330、440、676和680。然后采用电梯调度算法对它们进行调度。只要这五个请求能在最终 时限前完成，就能保证较好的播放质量，该算法便算取得了成功。 请求(按照最终时限排序) 分批在一起 330 676 110 680 220 755280 550812103 柱面 700 710 720 730 740 750 最终时限(ms) 一 图11-15scan-EDF算法示意图 如果在运行上面的11个视频流时又收到了新的用户请求，系统是否应该接纳新的请求 呢？确定是否接纳的基本准则是，如果这次接纳并不会导致现有的视频流频繁地错过它们 的截止时间，那么就可以接纳，否则应该拒绝接纳。一个简单的方法是，计算出为一个用 户播放一部电影平均需要多少系统资源量，包括内存和磁盘空间，以及所需的处理机时间 等，如果现有的所有资源都能满足要求，就可以接纳，否则拒绝接纳。另一个计算方法更为细致，虽然是否接纳的基本准则是相同的，但该方法要进一步考 虑用户所要看的电影的特性。由于不同性质的电影具有不同的分辨率和数据率。如黑白电 影的数据率要比彩色电影的低得多，所需的各种资源都会少得多。如果在某个时刻，系统 中所剩余的资源足以播放一部黑白片，但不能满足播放一部彩色片的需要，若此时用户请求 的就是一部黑白片，就可以接纳他的请求；但如果用户请求的是一部彩色片，则拒绝接纳。"
          }
        ]
      }
    ]
  }
]
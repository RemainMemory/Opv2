[
  {
    "一级标题": "第8章_磁盘存储器的管理",
    "二级内容": [
      {
        "二级标题": "8.1_外存的组织方式",
        "三级内容": [
          {
            "三级标题": "8.1.1 连续组织方式 连续组织方式又称连续分配方式，要求为每一个文件分配一组相邻接的盘块。例如， 第一个盘块的地址为b，则第二个盘块的地址为b+1，第三个盘块的地址为b+2，“\"。通常， 它们都位于一条磁道上，在进行读/写时，不必移动磁头。在采用连续组织方式时，可把逻 辑文件中的记录顺序地存储到邻接的各物理盘块中，这样所形成的文件结构称为顺序文件 结构，此时的物理文件称为顺序文件。 这种组织方式保证了逻辑文件中的记录顺序与存储器中文件占用盘块的顺序的一致 性。为使系统能找到文件存放的地址，应在目录项的“文件物理地址”字段中记录该文件 250  第八章磁盘存储器的管理 第一个记录所在的盘块号和文件长度(以盘块为单位)。图8-1示出了连续组织方式的情况。 图中假定了记录与盘块的大小相同。Count文件的第一个盘块号是0，文件长度为2，因此 是在盘块号为0和1的两盘块中存放文件1的数据。 count 目录 file start length count 2 tr 14 3 mail 19 3 1213415 list 28 3 f 6 2 图8-1磁盘空间的连续组织方式 如同内存的动态分区分配一样，随着文件建立时空间的分配和文件删除时空间的回收， 将使磁盘空间被分割成许多小块，这些较小的连续区已难于用来存储文件，此即外存的碎 片。同样，我们也可以利用紧凑的方法，将盘上所有的文件紧靠在一起，把所有的碎片拼 接成一大片连续的存储空间。但为了将外存空闲空间进行一次紧凑，所花费的时间远比将 内存紧凑一次所花费的时间多。 连续组织方式的主要优点有：",
            "正文": "（1）顺序访问容易。访问连续文件非常容易，系统可从目录中找到该顺序文件所在的第一 个盘块号，从此开始逐个盘块地往下读/写。连续分配也支持对定长记录的文件进行随机存取。\n\n（2）顺序访问速度快。由连续分配所装入的文件，其所占用的盘块可能是位于一条或 几条相邻的磁道上，磁头的移动距离最少，因此，这种对文件访问的速度是几种存储空间 分配方式中最高的一种。 连续组织方式的主要缺点如下：\n\n（1）要求为一个文件分配连续的存储空间。由内存的连续分配得知，这样便会产生出 许多外部碎片，严重地降低了外存空间的利用率。如果是定期地利用紧凑方法来消除碎片， 则又需花费大量的机器时间。\n\n(2）必须事先知道文件的长度。要将一个文件装入一个连续的存储区中，必须事先知 道文件的大小。知道文件的大小有时只能靠估算，如果估计的文件大小比实际文件小，就 会因存储空间不足而中止文件的拷贝，要求用户重新估算后再次拷贝。这就促使用户将文 件长度估得比实际的大，从而造成浪费。\n\n(3）不能灵活地删除和插入记录。为保持文件的有序性，在删除和插入记录时，都需 要对相邻的记录做物理上的移动，还会动态地改变文件的大小。\n\n(4）对于那些动态增长的文件，由于事先很难知道文件的最终大小，因而很难为其分 配空间，而即使事先知道文件的最终大小，在采用预分配存储空间的方法时，也会使大量 的存储空间长期空闲。 251  计算机操作系统"
          },
          {
            "三级标题": "8.1.2 链接组织方式 如果可以将文件装到多个离散的盘块中，就可消除连续组织方式的上述缺点。在采用 链接组织方式时，可为文件分配多个不连续的盘块，再通过每个盘块上的链接指针，将同 属于一个文件的多个离散的盘块链接成一个链表，由此所形成的物理文件称为链接文件。 链接组织方式的主要优点是：",
            "正文": "（1）消除了磁盘的外部碎片，提高了外存的利用率。\n\n(2）对插入、删除和修改记录都非常容易。\n\n(3）能适应文件的动态增长，无需事先知道文件的大小。 链接方式又可分为隐式链接和显式链接两种形式。\n\n1.隐式链接 在采用隐式链接组织方式时，在文件目录的每个目录项中，都须含有指向链接文件第 一个盘块和最后一个盘块的指针。图8-2中示出了一个占用5个盘块的链接式文件。在相 应的目录项中，指示了其第一个盘块号是9，最后一个盘块号是25。而在每个盘块中都含 有一个指向下一个盘块的指针，如在第一个盘块9中设置了第二个盘块的盘块号是16；在 16号盘块中又设置了第三个盘块的盘块号1。如果指针占用4个字节，对于盘块大小为512 字节的磁盘，则每个盘块中只有508个字节可供用户使用。 目录 count file start length jeep 9 25 4 8 12 14 15[ 16 mai 119 1s 图8-2磁盘空间的链接式分配 隐式链接组织方式的主要问题在于，它只适合于顺序访问，它对随机访问是极其低效 的。如果要访问文件所在的第i个盘块，则必须先读出文件的第一个盘块，··\"\"，就这样 顺序地查找直至第i块。当i=100时，需启动100次磁盘去实现读盘块的操作，平均每次都 要花费几十ms。可见，随机访问的速度很低。此外，只通过链接指针将一大批离散的盘块 链接起来，其可靠性较差，因为只要其中的任何一个指针出现问题，都会导致整个链的断开。 为了提高检索速度和减小指针所占用的存储空间，可以将几个盘块组成一个簇 (cluster)。比如，一个簇可包含4个盘块，在进行盘块分配时，是以簇为单位进行的。在链 接文件中的每个元素也是以簇为单位的。这样将会成倍地减小查找指定块的时间，而且也 可减小指针所占用的存储空间，但却增大了内部碎片，而且这种改进也是非常有限的。 252  第八章磁盘存储器的管理\n\n2.显式链接 这是指把用于链接文件各物理块的指针显式地存放在内存的一张链接表中。该表在整 个磁盘中仅设置一张，如图8-3所示。表的序号是物理盘块号，从0开始，直至N-1；N 为盘块总数。在每个表项中存放链接指针，即下一 个盘块号。在该表中，凡是属于某一文件的第一个 物理块号 FAT FCB 盘块号，或者说是每一条链的链首指针所对应的盘 0 块号，均作为文件地址被填入相应文件的FCB的“物 2 2 4 理地址”字段中。由于查找记录的过程是在内存中 3 4 进行的，因而不仅显著地提高了检索速度，而且大 5 大减少了访问磁盘的次数。由于分配给文件的所有 盘块号都放在该表中，故把该表称为文件分配表 图8-3显式链接结构 FAT(FileAllocation Table)。"
          },
          {
            "三级标题": "8.1.3 FAT技术 一 微软公司早、中期推出的操作系统一直都是采用的FAT技术。即利用文件分配表FAT 来记录每个文件中所有盘块之间的链接。在MS-DOS中，最早使用的是12位的FAT12， 后来为16位的FAT16。在Windows95和Windows98操作系统中则升级为32位的FAT32。 WindowsNT/2000/XP及以后的Windows操作系统又进一步发展为新技术文件系统 NTFS(NewTechnologyFileSystem) 在FAT中引I入了“卷”的概念，支持将一个物理磁盘分成四个逻辑磁盘，每个逻辑磁 盘就是一个卷（也称为分区），也就是说每个卷都是一个能够被单独格式化和使用的逻辑单 元，供文件系统分配空间时使用。一个卷中包含了文件系统信息、一组文件以及空闲空间。 每个卷都专门划出一个单独区域来存放自己的目录和FAT表，以及自己的逻辑驱动器字母。 需要指出的是，在现代OS中，一个物理磁盘可以划分为多个卷，一个卷也可以由多个物 理磁盘组成。",
            "正文": "1. FAT12 FAT FCB 0 1）早期的FAT12文件系统 FAT12是以盘块为基本分配单位的。由于FAT 4 2 3 是文件系统中最重要的数据结构，为了安全起见， 6 4 在每个分区中都配有两张相同的文件分配表FAT1 EOF 5 FCB 11= 6 和FAT2。在FAT的每个表项中存放下一个盘块号， 7 它实际上是用于盘块之间的链接的指针，通过它可 9 8 9 以将一个文件的所有的盘块链接起来，而将文件的 5— 第一个盘块号放在自己的FCB中。图8-4示出了 EOF- MS-DOS的文件物理结构，这里示出了两个文件， 文件A占用三个盘块，其盘块号依次为4、6、11； 图8-4MS-DOS的文件物理结构 文件B则依次占用9、10及5号三个盘块。每个文 253  计算机操作系统 每个FAT中共含有2.4K个表项，由于每个FAT表项占12位，故FAT表占用3.6KB的存 储空间。 现在我们来计算以盘块为分配单位时所允许的最大磁盘容量。由于每个FAT表项为12 每个盘块（也称扇区）的大小一般是512字节，那么，每个磁盘分区的容量为2MB（4096×512B）； 一个物理磁盘能支持4个逻辑磁盘分区，所以相应的磁盘最大容量仅为8MB。这对最早时 期的硬盘还可应付，但很快磁盘的容量就超过了8MB，FAT12是否还可继续用呢，回答虽 是肯定的，但需要引入一个新的分配单位一簇。 2）以簇为单位的FAT12文件系统 稍加分析便可看出，如果把每个盘块（扇区）的容量增大n倍，则磁盘的最大容量便可 增加n倍。但要增加盘块的容量是不方便和不灵活的。为此，引入了簇（cluster）的概念。簇 是一组相邻的扇区，在FAT中它是作为一个虚拟扇区。在进行盘块分配时，是以簇作为分 配的基本单位。簇的大小一般是2n(n为整数)个盘块，在MS-DOS的实际运用中，簇的容 簇应包含扇区的数量与磁盘容量的大小直接有关。例如，当一个簇仅有一个扇区时，磁盘 的最大容量为8MB；当一个簇包含了八个扇区时，磁盘的最大容量便可达到64MB。 表中的项数（在相同的磁盘容量下，FAT表的项数是与簇的大小成反比)，使FAT表占用更 少的存储空间，并减少访问FAT表的存取开销：但这样也会造成更大的簇内零头（它与存储 器管理中的页内零头相似）。 FAT12存在的主要问题是，随着支持硬盘的容量的增加，相应的簇内碎片也将随之成 倍地增加，限制了磁盘的最大容量，通常只能是数十MB。此外，FAT12只能支持短文件 名，即8+3格式的文件名。\n\n2.FAT16 FAT12对磁盘容量限制的原因在于，FAT12表中的表项有限制，亦即最多只允许4096 个。这样，随着磁盘容量的增加，必定会引起簇的大小和簇内碎片也随之增加。要想增加 FAT表中的表项数，就必须增加FAT表的位数(宽度)。如果我们将FAT表项位数增至16 位，最大表项数将增至65536(2\")个，此时便能将一个磁盘分区分为65536(2\")个簇。我 们把具有16位表宽的FAT表称为FAT16。在FAT16的每个簇中可以有的盘块数为4、8、， 直到64，由此得出FAT16可以管理的最大分区空间为216×64×512=2048MB。虽然FAT16 还必须很大，簇内碎片所造成的浪费也越大。例如，当要求磁盘分区的大小为8GB时，则 每个簇的大小达到128KB，这意味着内部零头最大可达到128KB。一般而言，对于1GB~ 4GB的硬盘来说，大约会浪费10%～20%的空间。为了解决这一问题，微软推出了FAT32。\n\n3.FAT32 由于FAT16表的长度只有65535项，随着磁盘容量的增加，簇的大小也必然会随之增 加，为了减少簇内零，也就应当增加FAT表的长度，为此需要再增加FAT表的宽度，这样 254  第八章磁盘存储器的管理 也就由FAT16演变为FAT32。 FAT32是FAT系列文件系统的最后一个产 块大小 FAT12 FAT16 FAT32 品。每一簇在FAT表中的表项占据4字节，允\n\n0.5KB 2MB 许管理比FAT16更多的簇，允许采用较小的簇。 1KB 4MB FAT32的每个簇都固定为4KB，即每簇为8个 2KB 8MB\n\n128 MB 盘块，FAT32分区格式可以管理的单个最大磁盘\n\n4 KB 16MB 256MB 1TB 空间大到4KB×23²=2TB。三种FAT类型的最 大分区以及所对应的块的大小如图8-5所示。 8KB 512MB 2TB 由于FAT32能支持更小的簇，使之具有更高\n\n16 KB 1024MB 2TB 的存储器利用率。例如，两个磁盘容量都为2GB， 32KB 2048MB 2TB 一个磁盘采用了FAT16文件系统，簇的大小为 图8-5FAT中簇的大小与最大分区的对应关系 32KB；另一个磁盘采用了FAT32文件系统，簇 的大小只有4KB。通常情况下，FAT32比FAT16的存储器利用率提高了15%。FAT32主要 应用于Windows98及后续Windows系统，同时支持长文件名，能够有效地节省硬盘空间。 FAT32仍然有着明显的不足之处：首先是由于文件分配表的扩大，运行速度比FAT16 格式要慢：其次，FAT32有最小管理空间的限制，FAT32卷必须至少有65537个簇，所以 FAT32不支持容量小于512MB的分区，因此对于小分区，则仍然需要使用FAT16或FAT12。 再之，FAT32的单个文件的长度也不能大于4GB；最后，FAT32最大的限制在于兼容性方 面，FAT32不能保持向下兼容。"
          },
          {
            "三级标题": "8.1.4 NTFS的文件组织方式",
            "正文": "1.NTFS新特征 NTFS(NewTechnologyFileSystem)是一个专门为WindowsNT开发的、全新的文件系 统，并适用于Windows2000/XP及后续的WindowsOS。NTFS具有许多新的特征： 首先，它使用了64位磁盘地址； 其次，在NTFS中可以很好地支持长文件名，单个文件名限制在255个字符以内，全 路径名为32767个字符； 第三，具有系统容错功能，即在系统出现故障或差错时，仍能保证系统正常运行； 第四，能保证系统中的数据一致性，这是一个非常有用的功能。 此外NTFS还提供了文件加密、文件压缩等功能。\n\n2.磁盘组织 NTFS是以簇作为磁盘空间分配和回收的基本单位的。一个文件占用若干个簇，一个 簇只属于一个文件。这样，在为文件分配磁盘空间时，就无须知道盘块的大小，只要根据 不同的磁盘容量，选择相应大小的簇，即使NTFS具有了与磁盘物理块大小无关的独立性。 在NTFS文件系统中，把卷上簇的大小称为“卷因子”，卷因子是在磁盘格式化时确定 的，其大小也是物理磁盘扇区的整数倍。簇的大小可由格式化命令按磁盘容量和应用需求 来确定，可以为512B、1KB、·，最大可达64KB。对于小磁盘(≤512MB)，默认簇大 小为512字节；对于1GB磁盘，默认簇大小为1KB；对于2GB的磁盘，则默认簇为4KB。 255  计算机操作系统 事实上，为了在传输效率和簇内碎片之间进行折中，NTFS在大多数情况下都是使用4KB。 对于簇的定位，NTFS是采用逻辑簇号LCN(LogicalClusterNumber)和虚拟簇号 简单的编号，NTFS在进行地址映射时，可以通过卷因子与LCN的乘积，算出卷上的物理 字节偏移量，从而得到文件数据所在的物理磁盘地址。为了方便文件中数据的引I用，NTFS 还可以使用VCN，以文件为单位，将属于某个文件的簇按顺序进行编号。只要知道了文件 开始的簇地址，便可将VCN映射到LCN。\n\n3.文件的组织 在NTFS中，以卷为单位，将一个卷中的所有文件信息、目录信息以及可用的未分配 空间信息，都以文件记录的方式记录在一张主控文件表MFT(MasterFileTable)中，该表是 NTFS卷结构的中心，从逻辑上讲，卷中的每个文件作为一条记录，在MFT表中占有一行， 其中还包括MFT自已的这一行。每行大小固定为1KB，每行称为该行所对应文件的元数 据（metadata），也称为文件控制字。 在MFT表中，每个元数据都将其所对应文件的所有信息（包括文件的内容等）组织在所 对应文件的一组属性中。由于文件大小相差悬殊，其属性所需空间大小也相差很大。当文 件较小时，其属性值所占空间也较小，可以将文件的所有属性直接记录在元数据中。而当 文件较大时，元数据仅能记录文件的一部分属性，其余属性，如文件的内容等，只好记录 到卷中的其它可用簇中，并将这些簇按其所记录文件的属性进行分类，分别链接成多个队 列，并将指向这些队列的指针保存在元数据中。 例如对于一个真正的数据文件，即属性为DATA的文件，如果很小，就直接将其存储 在MFT表中对应的元数据中，这样对文件数据的访问仅需要对MFT表进行访问即可，减 少了磁盘访问次数，显著地提高了对小文件存取的效率。如果文件较大，则文件的真正数 据往往保存在其它簇中。此时通过元数据中指向文件DATA属性的队列指针，可以方便地 查找到这些簇，完成对文件数据的访问。 实际上，文件在存储过程中，数据往往连续存放在若干个相邻的簇中，仅用一个指针记 录这几个相邻的簇即可，而不是每个簇需要一个指针，从而可以节省指针所耗费的空间。一 般地，采用上述方式，只需十几个字节就可以含有FAT32所需几百个KB才可拥有的信息量。 NTFS的不足之处在于，它只能被WindowsNT所识别。NTFS文件系统可以存取FAT 等文件系统的文件，但NTFS文件却不能被FAT等文件系统所存取，缺乏兼容性。Windows 的95/98/98SE和Me版都不能识别NTFS文件系统。"
          },
          {
            "三级标题": "8.1.5 索引组织方式 一一+",
            "正文": "1.单级索引组织方式 链接组织方式虽然解决了连续组织方式所存在的问题（即不便于随机访问)，但又出现 了另外两个问题，即：①不能支持高效的直接存取，要对一个较大的文件进行存取，须在 FAT中顺序地查找许多盘块号；②FAT需占用较大的内存空间，由于一个文件所占用盘块 到一个文件的所有盘块号。当磁盘容量较大时，FAT可能要占用数MB以上的内存空间。 256  第八章磁盘存储器的管理 事实上，在打开某个文件时，只需把该文件占用的盘块的编号调入内存即可，完全没 有必要将整个FAT调入内存。为此，应将每个文件所对应的盘块号集中地放在一起，在访 问到某个文件时，将该文件所对应的盘块号一起调入内存。索引分配方法就是基于这种想 法所形成的一种分配方法。它为每个文件分配一个索引块（表），把分配给该文件的所有盘 块号都记录在该索引块中。在建立一个文件时，只须在为之建立的目录项中填上指向该索 引块的指针。图8-6示出了磁盘空间的索引分配图。 目录 file 块序号 jeep 19 96 03711 19 图8-6索引1分配方式 索引组织方式的主要优点是支持直接访问。当要读文件的第i个盘块时，可以方便地 直接从该文件的索引块中找到第i个盘块的盘块号；此外索引分配方式也不会产生外部碎 片。当文件较大时，索引分配方式无疑要优于链接分配方式。 索引组织方式的主要问题是，每当建立一个索引文件时，应为该文件分配一个索引块， 将分配给该文件的所有盘块号记录于其中。在每一个索引块中可存放数百个盘块号。但对 于中、小型文件，其本身通常只占有数个到数十个盘块，甚至更少，但仍须为之分配一索 引块。可见，对于小文件采用索引分配方式时，其索引块的利用率将是极低的。\n\n2.多级索引组织方式 时，OS须再为该文件分配另一个索引块，用于将以后继续为之分配的盘块号记录于其中。依 此类推，再通过链指针将各索引块按序链接起来。显然，当文件太大，其索引块太多时，这种 方法是低效的。此时，应为这些索引块再建立一级索引，称为第一级索引，即系统再分配一个 索引块，作为第一级索引的索引块，将第一块、第二块、··等索引块的盘块号填入到此索引 表中，这样便形成了两级索引分配方式。如果文件非常大时，还可用三级、四级索引分配方式。 1KB，每个盘块号占4个字节，则在一个索引块中可存放256个盘块号。这样，在两级索引 时，最多可包含的存放文件的盘块的盘块号总数N=256×256=64K个。由此可得出结论： 采用两级索引时，所允许的文件最大长度为64MB。倘若盘块的大小为4KB，在采用单级索 引时所允许的最大文件长度为4MB，而在采用两级索引时所允许的最大文件长度可达4GB。 257  计算机操作系统 第二级索引 主索引 360 磁盘空间 360 105 0 740 106 254 2 740 105 106 356 357 254 1125 ： 1125 356 357 985 985 图8-7两级索引分配 多级索引的主要优点是：大大加快了对大型文件的查找速度。其主要缺点是，在访问 一个盘块时，其所需启动磁盘的次数随着索引级数的增加而增多，即使是对于小文件，也 是如此。实际情况是，通常总是以中、小文件居多，而大文件是较少的。因此可见，如果 在文件系统中仅采用了多级索引组织方式，并不能获得理想的效果。\n\n3.增量式索引组织方式 1）增量式索引组织方式的基本思想 为了能较全面地照顾到小、中、大及特大型作业，可以采取多种组织方式来构成文件 的物理结构。如果盘块的大小为1KB或4KB，对于小文件（如1KB～10KB或4KB～40KB） 而言，最多只会占用10个盘块，为了能提高对数量众多的小型作业的访问速度，最好能将 它们的每一个盘块地址都直接放入文件控制块FCB（或索引结点）中，这样就可以直接从 FCB中获得该文件的盘块地址。一般把这种寻址方式又称为直接寻址。对于中等文件（如 11KB～256KB或5KB～4MB)，可以采用单级索引I组织方式。此时为获得该文件的盘块 地址，只需先从FCB中找到该文件的索引表，从中便可获得，可将它称为一次间址；对于 大型和特大型文件，可以采用两级和三级索引组织方式，或称为二次间址和三次间址。所 谓增量式索引组织方式，就是基于上述的基本思想来组织的，它既采用了直接寻址方式， 又采用了单级和多级索引组织方式(间接寻址)。通常又可将这种组织方式称为混合组织方 式。在UNIX系统中所采用的就是这种组织方式。 2）UNIXSystemV的组织方式 在UNIXSystemV的索引结点中设有13个地址项，即i.addr(0)～i.addr(12)，如图8-8 所示。\n\n（1）直接地址。为了提高对文件的检索速度，在索引结点中可设置10个直接地址项， 即用i.addr(0)～i.addr(9)来存放直接地址，也称为直接盘块号，即directblocks。换言之，在 这里的每项中所存放的是该文件数据所在盘块的盘块号。假如每个盘块的大小为4KB，当 258  第八章磁盘存储器的管理 文件不大于40KB时，便可直接从索引结点中读出该文件的全部盘块号。\n\n(2）一次间接地址。对于大、中型文件，只采用直接地址是不现实的。为此，可再利 用索引|结点中的地址项i.addr（10)来提供一次间接地址（singleindirect)。这种方式的实质就是 一级索引分配方式。图中的一次间址块也就是索引块，系统将分配给文件的多个盘块号记 入其中。在一次间址块中可存放1K个盘块号，因而允许文件长达4MB。\n\n（3）多次间接地址。当文件长度大于4MB+40KB时，使用一次间址与10个直接地 址项时地址空间仍不足，系统还需采用二次间址分配方式。这时，用地址项i.addr（11)提供 二次间接地址（doubleindirect)。该方式的实质是两级索引分配方式。系统此时是在二次间 址块中记入所有一次间址块的盘号。在采用二次间址方式时，文件最大长度可达4GB。同 理，地址项i.addr（12)作为三次间接地址（tripleindirect)，其所允许的文件最大长度可达4TB。 mode owners (2) time stamps (3) size data block count i.addr (0) data i.addr (1) direct blocks data data data single indirect data data doubleindirect data triple indirect data 图8-8混合索引方式\n\n8.2 文件存储空间的管理 为了实现前面任何一种文件组织方式，都需要为文件分配盘块，因此必须知道磁盘上 哪些盘块是可用于分配的。故在为文件分配磁盘时，除了需要文件分配表外，系统还应为 可分配存储空间设置相应的数据结构，即设置一个磁盘分配表（DiskAllocationTable)，用于 记住可供分配的存储空间情况。此外，还应提供对盘块进行分配和回收的手段。不论哪种 分配和回收方式，存储空间的基本分配单位都是磁盘块而非字节。下面介绍几种常用的文 件存储空间的管理方法。"
          },
          {
            "三级标题": "8.2.1 空闲表法和空闲链表法",
            "正文": "1.空闲表法 1）空闲表 空闲表法属于连续分配方式，它与内存的动态分配方式雷同，它为每个文件分配一块 259"
          }
        ]
      },
      {
        "二级标题": "8.2_文件存储空间的管理",
        "三级内容": [
          {
            "三级标题": "8.2.1 空闲表法和空闲链表法",
            "正文": "1.空闲表法 1）空闲表 空闲表法属于连续分配方式，它与内存的动态分配方式雷同，它为每个文件分配一块 259  计算机操作系统 连续的存储空间。即系统也为外存上的所有空闲区建立一张空闲表，每个空闲区对应于一 个空闲表项，其中包括表项序号、该空闲区的第一个盘块号、该区的空闲盘块数等信息。 再将所有空闲区按其起始盘块号递增的次序排列，形成空闲盘块表，如图8-9所示。 序号 第一空闲盘块号 空闲盘块数 1 2 4 2 9 3 3 15 5 4 一 一 图8-9空闲盘块表 2）存储空间的分配与回收 空闲盘区的分配与内存的分区（动态）分配类似，同样是采用首次适应算法和最佳适应 算法等，它们对存储空间的利用率大体相当，都优于最坏适应算法。在系统为某新创建的 文件分配空闲盘块时，先顺序地检索空闲表的各表项，直至找到第一个其大小能满足要求 的空闲区，再将该盘区分配给用户（进程），同时修改空闲表。系统在对用户所释放的存储 空间进行回收时，也采取类似于内存回收的方法，即要考虑回收区是否与空闲表中插入点 的前区和后区相邻接，对相邻接者应予以合并。 应该说明，在内存分配上，虽然较少采用连续分配方式，然而在外存的管理中，由于 这种分配方式具有较高的分配速度，可减少访问磁盘的IO频率，故它在诸多分配方式中 仍占有一席之地。例如，在前面所介绍的对换方式中，对对换空间，一般都采用连续分配 邻接的几个盘块；当文件较大时，便采用离散分配方式。另外，对于多媒体文件，为了能 减少磁头的寻道时间，也采用连续分配方式。\n\n2.空闲链表法 空闲链表法是将所有空闲盘区拉成一条空闲链。根据构成链所用基本元素的不同，可 把链表分成两种形式：空闲盘块链和空闲盘区链。 1）空闲盘块链 这是将磁盘上的所有空闲空间以盘块为单位拉成一条链，其中的每一个盘块都有指向 后继盘块的指针。当用户因创建文件而请求分配存储空间时，系统从链首开始，依次摘下 适当数目的空闲盘块分配给用户。当用户因删除文件而释放存储空间时，系统将回收的盘 块依次挂在空闲盘块链的末尾。这种方法的优点是用于分配和回收一个盘块的过程非常简 单，但在为一个文件分配盘块时，可能要重复操作多次，分配和回收的效率较低。又因为 它是以盘块为单位，相应的空闲盘块链会很长。 2)空闲盘区链 这是将磁盘上的所有空闲盘区(每个盘区可包含若干个盘块)拉成一条链。在每个盘区 上除含有用于指示下一个空闲盘区的指针外，还应有能指明本盘区大小(盘块数)的信息。 分配盘区的方法与内存的动态分区分配类似，通常采用首次适应算法。在回收盘区时，同 260  第八章磁盘存储器的管理 样也要将回收区与相邻接的空闲盘区相合并。在采用首次适应算法时，为了提高对空闲盘 区的检索速度，可以采用显式链接方法，亦即，在内存中为空闲盘区建立一张链表。这种 方法的优点和缺点刚好与前一种方法的优缺点相反，即分配与回收的过程比较复杂，但分 配和会收的效率可能较高，每次为文件分配多个连续的块，且空闲盘区链较短。"
          },
          {
            "三级标题": "8.2.2 位示图法 一",
            "正文": "1.位示图 位示图是利用二进制的一位来表示磁盘中一个盘块的使用情况。当其值为“0”时，表 示对应的盘块空闲：为“1”时，表示已分配。有的系统把“0”作为盘块已分配的标志， 把“1”作为空闲标志。（它们在本质上是相同的，都是用一位的两种状态来标志空闲和已 分配两种情况。）磁盘上的所有盘块都有一个二进制位与之对应，这样，由所有盘块所对应 的位构成一个集合，称为位示图。通常可用mxn个位数来构成位示图，并使mxn等于磁 盘的总块数，如图8-10所示。位示图也可描述为一个二维数组map[m,n]: 12345678910111213141516 1 0 0 0 0 0 1 1 0 2 0 0 0 0 0 1 1 > 1 0 3 1 1 0 0 0 1 1 0 0 0 4 16 图8-10位示图\n\n2.盘块的分配 根据位示图进行盘块分配时，可分三步进行：\n\n（1）顺序扫描位示图，从中找出一个或一组其值为“0”的二进制位（“0”表示空闲时）。 的二进制位位于位示图的第i行、第i列，则其相应的盘块号应按下式计算： b=n(i-1)+j 式中，n代表每行的位数。\n\n(3）修改位示图，令map[i,j]=1。\n\n3.盘块的回收 盘块的回收分两步：\n\n(1）将回收盘块的盘块号转换成位示图中的行号和列号。转换公式为： i=(b - 1)DIV n + 1 j= (b - 1)MOD n + 1\n\n(2）修改位示图。令map[i,j]=0。 这种方法的主要优点是从位示图中很容易找到一个或一组相邻接的空闲盘块。例如， 我们需要找到6个相邻接的空闲盘块，这只需在位示图中找出6个其值连续为“0”的位即 261  计算机操作系统 可。此外，由于位示图很小，占用空间少，因而可将它保存在内存中，进而使在每次进行 盘区分配时，无需首先把盘区分配表读入内存，从而节省了许多磁盘的启动操作。因此， 位示图常用于微型机和小型机中，如CP/M、Apple-DOS等OS中。"
          },
          {
            "三级标题": "8.2.3 成组链接法 空闲表法和空闲链表法都不适用于大型文件系统，因为这会使空闲表或空闲链表太长。 在UNIX系统中采用的是成组链接法，这是将上述两种方法相结合而形成的一种空闲盘块 管理方法，它兼备了上述两种方法的优点而克服了两种方法均有的表太长的缺点。",
            "正文": "1.空闲盘块的组织\n\n（1）空闲盘块号栈，用来存放当前可用的一组空闲盘块的盘块号（最多含100个号），以 及栈中尚有的空闲盘块（号）数N。顺便指出，N还兼作栈顶指针用。例如，当N=100时， 它指向S.free（99)。由于栈是临界资源，每次只允许一个进程去访问，故系统为栈设置了一 把锁。图8-11左部示出了空闲盘块号栈的结构。其中，S.free(0)是栈底，栈满时的栈顶为 S.free(99)。 100 100 99 400 0 空闲盘 399 7999 块号栈 100 301 7901 S.free 100 300 0 300 400 7900 299 299 399 7899 7999 202 99 201 201 301 7801 7901 图8-11空闲盘块的成组链接法\n\n(2）文件区中的所有空闲盘块被分成若干个组，比如，将每100个盘块作为一组。假 定盘上共有10000个盘块，每块大小为1KB，其中第201～7999号盘块用于存放文件，即 作为文件区，这样，该区的最末一组盘块号应为7901～7999；次末组为7801～7900，， 倒数第二组的盘块号为301～400；第一组为201～300，如图8-11所示。\n\n(3）将每一组含有的盘块总数N和该组所有的盘块号记入其前一组的第一个盘块的 S.free(0)～S.free(99)中。这样，由各组的第一个盘块可链成一条链。\n\n(4）将第一组的盘块总数和所有的盘块号记入空闲盘块号栈中，作为当前可供分配的 空闲盘块号。\n\n(5）最末一组只有99个盘块，其盘块号分别记入其前一组的S.free(1)～S.free(99)中， 262  第八章磁盘存储器的管理 而在S.free(O)中则存放“0”，作为空闲盘块链的结束标志。（注：最后一组的盘块数应为 99，不应是100，因为这是指可供使用的空闲盘块。其编号应为(1～99)，0号中放空闲盘 块链的结尾标志。）\n\n2.空闲盘块的分配与回收 当系统要为用户分配文件所需的盘块时，须调用盘块分配过程来完成。该过程首先检 查空闲盘块号栈是否上锁，如未上锁，便从栈顶取出一空闲盘块号，将与之对应的盘块分 配给用户，然后将栈顶指针下移一格。若该盘块号已是栈底，即S.free（O)，这是当前栈中 最后一个可分配的盘块号。由于在该盘块号所对应的盘块中记有下一组可用的盘块号，因 此，须调用磁盘读过程将栈底盘块号所对应盘块的内容读入栈中，作为新的盘块号栈的内 容，并把原栈底对应的盘块分配出去（其中的有用数据已读入栈中）。然后，再分配一相应 的缓冲区（作为该盘块的缓冲区）。最后，把栈中的空闲盘块数减1并返回。 在系统回收空闲盘块时，须调用盘块回收过程进行回收。它是将回收盘块的盘块号记 入空闲盘块号栈的顶部，并执行空闲盘块数加1操作。当栈中空闲盘块号数目已达100时， 表示栈已满，便将现有栈中的100个盘块号记入新回收的盘块中，再将其盘块号作为新栈底。 /8.3提高磁盘1/0速度的途径 文件系统的性能可表现在多个方面，其中至关重要的一个方面是对文件的访问速度。 为了提高对文件的访问速度，可从三方面着手：\n\n（1）改进文件的目录结构以及检索目录的方法来减少对目录的查找时间；\n\n(2）选取好的文件存储结构，以提高对文件的访问速度；\n\n（3）提高磁盘的I/O速度，能将文件中的数据快速地从磁盘传送到内存中，或者相反。 速度作一简单介绍。 目前，磁盘的IO速度远低于对内存的访问速度，通常要低上4～6个数量级。因此， 磁盘的IO已成为计算机系统的瓶颈。于是，人们便干方百计地去提高磁盘I/O的速度， 其中最主要的技术便是采用磁盘高速缓存。"
          },
          {
            "三级标题": "8.3.1 磁盘高速缓存（DiskCache) 一一一一一一 在前面介绍的高速缓存，是指在内存和CPU之间所增设的一个小容量高速存储器。而 在这里所要介绍的磁盘高速缓存，是指在内存中为磁盘盘块设置的一个缓冲区，在缓冲区中 保存了某些盘块的副本。当出现一个访问磁盘的请求时，由核心先去查看磁盘高速缓冲器， 看所请求的盘块内容是否已在磁盘高速缓存中，如果在，便可从磁盘高速缓存中去获取，这 样就省去了启动磁盘操作，而且可使本次访问速度提高几个数量级；如果不在，才需要启动 磁盘将所需要的盘块内容读入，并把所需盘块内容送给磁盘高速缓存，以便以后又需要访问 该盘块的数据时，便可直接从高速缓存中提取。在设计磁盘高速缓存时需要考虑的问题有：",
            "正文": "(1）如何将磁盘高速缓存中的数据传送给请求进程；\n\n(2）采用什么样的置换策略； 263"
          }
        ]
      },
      {
        "二级标题": "8.3_提高磁盘IO速度的途径",
        "三级内容": [
          {
            "三级标题": "8.3.1 磁盘高速缓存（DiskCache) 一一一一一一 在前面介绍的高速缓存，是指在内存和CPU之间所增设的一个小容量高速存储器。而 在这里所要介绍的磁盘高速缓存，是指在内存中为磁盘盘块设置的一个缓冲区，在缓冲区中 保存了某些盘块的副本。当出现一个访问磁盘的请求时，由核心先去查看磁盘高速缓冲器， 看所请求的盘块内容是否已在磁盘高速缓存中，如果在，便可从磁盘高速缓存中去获取，这 样就省去了启动磁盘操作，而且可使本次访问速度提高几个数量级；如果不在，才需要启动 磁盘将所需要的盘块内容读入，并把所需盘块内容送给磁盘高速缓存，以便以后又需要访问 该盘块的数据时，便可直接从高速缓存中提取。在设计磁盘高速缓存时需要考虑的问题有：",
            "正文": "(1）如何将磁盘高速缓存中的数据传送给请求进程；\n\n(2）采用什么样的置换策略； 263  计算机操作系统\n\n(3）已修改的盘块数据在何时被写回磁盘。 下面对它们做简单介绍。\n\n1.数据交付(DataDelivery)方式 如果IVO请求所需要的数据能从磁盘高速缓存中获取，此时就需要将磁盘高速缓存中 的数据传送给请求进程。所谓的数据交付就是指将磁盘高速缓存中的数据传送给请求者进 程。系统可以采取两种方式将数据交付给请求进程：\n\n（1）数据交付，这是直接将高速缓存中的数据传送到请求者进程的内存工作区中；\n\n(2）指针交付，只将指向高速缓存中某区域的指针交付给请求者进程。后一种方式由于 所传送的数据量少，因而节省了数据从磁盘高速缓存存储空间到进程的内存工作区的时间。\n\n2.置换算法 如同请求调页(段)一样，在将磁盘中的盘块数据读入高速缓存时，同样会出现因高速 缓存中已装满盘块数据，而需要将其中某些盘块的数据先换出的问题。相应地，也存在着 采用哪种置换算法的问题。较常用的算法仍然是最近最久未使用算法LRU、最近未使用算 法NRU及最少使用算法LFU等。由于请求调页中的联想存储器与高速缓存（磁盘IVO中)的 工作情况不同，因而使得在置换算法中所应考虑的问题也有所差异。因此，现在不少系统在 设计其高速缓存的置换算法时，除了考虑到最近最久未使用这一原则外，还考虑了以下几点：\n\n（1）访问频率。通常，每执行一条指令时，便可能访问一次联想存储器，亦即联想存 储器的访问频率基本上与指令执行的频率相当。而对磁盘高速缓存的访问频率，则与磁盘 I/O的频率相当。因此，对联想存储器的访问频率远远高于对磁盘高速缓存的访问频率。\n\n（2）可预见性。在磁盘高速缓存中的各盘块数据，有哪些数据可能在较长时间内不会 再被访问，又有哪些数据可能很快就再被访问，会有相当一部分是可预知的。例如，对二 次地址及目录块等，在它被访问后，可能会很久都不再被访问。又如，正在写入数据的未 满盘块，可能会很快又被访问。\n\n（3）数据的一致性。由于磁盘高速缓存在内存中，而内存是一种易失性的存储器，一 旦系统发生故障，存放在缓存中的数据将会丢失；而其中有些盘块（如索引结点盘块）中的 数据已被修改，但尚未拷回磁盘。因此，当系统发生故障后，可能造成数据的不一致性。 基于上述考虑，在有的系统中便将磁盘高速缓存中的所有盘块数据拉成一条LRU链。 对于那些会严重影响到数据一致性的盘块数据和很久都可能不再使用的盘块数据，都放在 LRU链的头部，使它们能被优先写回磁盘，以减少发生数据不一致性的概率，或者可以尽 早地腾出高速缓存的空间。对于那些可能在不久之后便要再次使用的盘块数据，应挂在LRU 链的尾部，以便在以后需要时，只要该块中数据尚未被写回磁盘，便可直接从LRU链中找 到它们。\n\n3.周期性地写回磁盘 还有一种情况值得注意，那就是根据LRU算法，那些经常要被访问的盘块数据可能会 一直保留在高速缓存中，长期不会被写回磁盘。这是因为链中任一元素在被访问之后，又 被挂到链尾而不被写回磁盘，只有一直未被访问的元素才有可能移到链首，而被写回磁盘。 为了解决这一问题，在UNIX系统中专门增设了一个修改(update)程序，使之在后台运行， 该程序周期性地调用一个系统调用SYNC。其主要功能是强制性地将所有在高速缓存中已 264  第八章磁盘存储器的管理 修改的盘块数据写回磁盘。一般是把两次调用SYNC的时间间隔定为30s。这样，因系统 故障所造成的工作损失不会超过30s的工作量。"
          },
          {
            "三级标题": "8.3.2 提高磁盘1/0速度的其它方法 能有效地提高磁盘I/O速度的方法还有许多，如提前读、延迟写等，现介绍如下：",
            "正文": "1.提前读 如果是采用顺序访问方式对文件进行访问，便可以预知下一次要读的盘块。此时可采 取预先读方式，即在读当前块的同时，还要求将下一个盘块（提前读的块）中的数据也读入 缓冲区。这样，当下一次要读该盘块中的数据时，由于该数据已被提前读入缓冲区，因而 此时便可直接从缓冲区中取得下一盘块的数据，而不须再去启动磁盘I/O，从而大大减少了 读数据的时间，有效地提高了磁盘IO的速度。“提前读”功能已被广泛采用。\n\n2.延迟写 延迟写是指缓冲区A中的数据本应立即写回磁盘，但考虑到该缓冲区中的数据可能会 在不久之后再被本进程或其它进程访问（共享资源），因而并不立即将该缓冲区A中的数据 写入磁盘，而是将它挂在空闲缓冲区队列的末尾。随着空闲缓冲区的使用，缓冲区也缓缓 往前移动，直至移到空闲缓冲队列之首。当再有进程申请到该缓冲区时，才将该缓冲区中 的数据写入磁盘，而把该缓冲区作为空闲缓冲区分配出去。只要该缓冲区A仍在队列中时， 任何访问该数据的进程，都可直接读出其中的数据而不必访问磁盘。这样，又可进一步减 少磁盘的IVO时间。同样，延迟写功能也已被广泛采用。\n\n3.优化物理块的分布 在采用链接组织和索引组织方式时，可以将一个文件分散在磁盘的任意位置，但如果 安排得过于分散，会增加磁头的移动距离。例如，将文件的第一个盘块安排在最里的一条 磁道上，而把第二个盘块安排在最外的一条磁道上，这样，在读完第一个盘块后转去读第 二个盘块时，磁头要从最里的磁道移到最外的磁道上。如果我们将这两个数据块安排在属 于同一条磁道的两个盘块上，显然会由于消除了磁头在磁道间的移动，而大大提高对这两 个盘块的访问速度。 对文件盘块位置的优化，应在为文件分配盘块时进行。如果系统中的空白存储空间是 采用位示图方式表示时，要将同属于一个文件的盘块安排在同一条磁道上或相邻的磁道上 是十分容易的事。这时，只要从位示图中找到一片相邻接的多个空闲盘块即可。但当系统 采用线性表（链）法来组织空闲存储空间时，要为一文件分配多个相邻接的盘块就要困难一 些。此时，我们可以将在同一条磁道上的若干个盘块组成一簇，例如，一簇包括4个盘块， 在分配存储空间时，以簇为单位进行分配。这样就可以保证在访问这几个盘块时，不必移 动磁头或者仅移动一条磁道的距离，从而减少了磁头的平均移动距离。\n\n4.虚拟盘 由于访问内存的速度远高于访问磁盘的速度，于是有人试图利用内存空间去仿真磁盘， 形成所谓虚拟盘，又称为RAM盘。该盘的设备驱动程序也可以接受所有标准的磁盘操作， 但这些操作的执行不是在磁盘上而是在内存中。这对用户都是透明的。换言之，用户不会 发现这与真正的磁盘操作有什么不同，而仅仅是略微快些而已。虚拟盘的主要问题是：它 265  计算机操作系统 是易失性存储器，故一旦系统或电源发生故障，或系统再启动时，原来保存在虚拟盘中的 数据将会丢失。因此，虚拟盘通常用于存放临时文件，如编译程序所产生的目标程序等。 虚拟盘与磁盘高速缓存的主要区别在于：虚拟盘中的内容完全由用户控制，而磁盘高速缓 存中的内容则是由OS控制的。例如，RAM盘在开始时是空的，仅当用户（程序）在RAM 盘中创建了文件后，RAM盘中才有内容。"
          },
          {
            "三级标题": "8.3.3 廉价磁盘余阵列（RAID） 当今存在着一种非常有用的设计思想，如果使用一个组件对性能的改进受到了很大的 限制，那么可通过使用多个相同的组件来获得性能的大幅度提高，这种情况在计算机领域中 已屡见不鲜。正是在这种设计思想推动下，由单处理机系统演变为多处理机系统；在芯片上 由单核演变为多核。同样也用该思想来指导磁盘存储器的设计，人们于1987年开发出由多 个小磁盘组成一个大容量的廉价磁盘余阵列(RedundantArrayofInexpensiveDisk，RAID)。 该系统是利用一台磁盘阵列控制器来统一管理和控制一组(几台到几十台)磁盘驱动器， 组成一个大型磁盘系统。RAID不仅是大幅度地增加了磁盘的容量，而且也极大地提高了磁",
            "正文": "1.并行交叉存取 这是把在大、中型机中，用于提高访问内存速度的并行交叉存取技术应用到磁盘存储 系统中，以提高对磁盘的IVO速度。在该系统中，有多台磁盘驱动器，系统将每一盘块中 的数据分为若干个子盘块数据，再把每一个子盘块的数据分别存储到各个不同磁盘中的相 同位置上。以后当要将一个盘块的数据传送到内存时，采取并行传输方式，将各个盘块中 的子盘块数据同时向内存中传输，从而使传输时间大大减少。例如，在存放一个文件时， 磁盘上；·；将第N个数据子块放在第N个磁盘上。以后在读取数据时，采取并行读取 方式，即同时从第1～N个数据子块中读出数据，这样便把磁盘I/O的速度提高了N-1倍。 图8-12示出了磁盘并行交义存取方式。 Vm 图8-12磁盘并行交叉存取方式\n\n2.RAID的分级 RAID在刚被推出时，是分成6级的，后来文增加了RAID6级和RAID7级。\n\n（1）RAIDO级。本级仅提供了并行交叉存取。RAIDO级的主要优点是，它能够实现 高效的传输，并能实现高速的IV/O请求。主要缺点是无冗余校验功能，致使磁盘系统的可 靠性并不是很高。只要阵列中有一个磁盘损坏，便会造成不可弥补的数据去失，故导致该 级较少使用。\n\n(2）RAID1级。它具有磁盘镜像功能，例如，当磁盘阵列中具有8个盘时，可利用其 266  第八章磁盘存储器的管理 中4个作为数据盘，另外4个作为镜像盘，在每次访问磁盘时，可利用并行读、写特性， 将数据分块同时写入主盘和镜像盘。RAID1级的主要优点是可靠性好，且从故障中恢复很 简单。其缺点是磁盘容量的利用率只有50%，它的优点是以牺牲磁盘容量为代价的。\n\n（3）RAID3级。这是具有并行传输功能的磁盘阵列。它只利用一台奇偶校验盘来完成 数据的校验功能。例如，当阵列中只有7个盘时，可利用6个盘作数据盘，一个盘作校验 盘。磁盘的利用率为6/7。\n\n（4）RAID5级。这是一种具有独立传送功能的磁盘阵列。每个驱动器都各有自己独立 的数据通路，独立地进行读/写，且无专门的校验盘。用来进行纠错的校验信息是以螺旋 (Spiral)方式散布在所有数据盘上。\n\n（5）RAID6级和RAID7级。这是强化了的RAID。在RAID6级的阵列中，设置了一 个专用的、可快速访问的异步校验盘。该盘具有独立的数据访问通路，具有比RAID3级 及RAID5级更好的性能，但其性能改进得很有限，且价格昂贵。RAID7级是对RAID6 级的改进，在该阵列中的所有磁盘都具有较高的传输速率和优异的性能，是目前最高档次 的磁盘阵列，但其价格也较高。\n\n3.RAID的优点 RAID具有下述一系列明显的优点：\n\n(1）可靠性高，除了RAIDO级外，其余各级都采用了容错技术。当阵列中某一磁盘损 坏时，并不会造成数据的丢失。此时可根据其它未损坏磁盘中的信息来恢复已损坏的盘中 的信息。其可靠性比单台磁盘机高出一个数量级。\n\n（2）磁盘I/O速度高，由于采取了并行交叉存取方式，可使磁盘I/O速度提高N-1倍。\n\n(3）性能/价格比高，RAID的体积与具有相同容量和速度的大型磁盘系统相比，只是 后者的1/3，价格也只是后者的1/3，且可靠性高。换言之，它仅以牺牲1/N的容量为代价， 换取了高可靠性。 /8.4提高磁盘可靠性的技术 在前一章中已经介绍了影响文件安全性的主要因素有人为因素、系统因素和自然因素 三类。同时也说明了为确保文件系统的安全性应采取的三方面的措施。采用存取控制机制 技术来防止人为因素造成文件的不安全性，已在7.5节中进行了较详细的阐述，在本小节 主要介绍通过磁盘容错技术来防止由系统因素造成的文件的不安全性和建立“后备系统” 来防止由自然因素所造成的不安全性。 容错技术是通过在系统中设置余部件的办法，来提高系统可靠性的一种技术。磁盘 容错技术则是通过增加余的磁盘驱动器、磁盘控制器等方法来提高磁盘系统可靠性的一 种技术。即当磁盘系统的某部分出现缺陷或故障时，磁盘仍能正常工作，且不致造成数据 的丢失或错误。目前广泛采用磁盘容错技术来改善磁盘系统的可靠性。 磁盘容错技术往往也被人们称为系统容错技术SFT。可把它分成三个级别：第一级是 低级磁盘容错技术；第二级是中级磁盘容错技术；第三级是系统容错技术，它基于集群技 术实现容错。 267"
          }
        ]
      },
      {
        "二级标题": "8.4_提高磁盘可靠性的技术",
        "三级内容": [
          {
            "三级标题": "8.4.1 第一级容错技术SFT-I 第一级容错技术(SFT-I)是最基本的一种磁盘容错技术，主要用于防止因磁盘表面缺 陷所造成的数据丢失。它包含双份目录、双份文件分配表及写后读校验等措施。",
            "正文": "1.双份目录和双份文件分配表 在磁盘上存放的文件目录和文件分配表FAT，是文件管理所用的重要数据结构。为了 防止这些表格被破坏，可在不同的磁盘上或在磁盘的不同区域中分别建立（双份）目录表和 FAT。其中一份为主目录及主FAT，另一份为备份目录及备份FAT。一旦由于磁盘表面缺陷 以保证磁盘上的数据仍是可访问的。\n\n2.热修复重定向和写后读校验 由于磁盘价格昂贵，在磁盘表面有少量缺陷的情况下，则可采取某种补救措施后继续 使用。一般主要采取以下两个补救措施：\n\n（1）热修复重定向，系统将磁盘容量的很小一部分（例如2%～3%）作为热修复重定向区， 用于存放当发现磁盘有缺陷时的待写数据，并对写入该区的所有数据进行登记，以便于以 后对数据进行访问。 每次向磁盘中写入一个数据块后，又立即将它读出，并送至另一缓冲区中，再将该缓冲区 内容与内存缓冲区中在写后仍保留的数据进行比较，若两者一致，便认为此次写入成功； 否则，再重写。若重写后两者仍不一致，则认为该盘块有缺陷，此时，便将应写入该盘块 的数据写入到热修复重定向区中。"
          },
          {
            "三级标题": "8.4.2 第二级容错技术SFT-II 一一 工作，它具体又可分为磁盘镜像与磁盘双工。",
            "正文": "1.磁盘镜像（DiskMirroring） 为了避免磁盘驱动器发生故障而丢失数据，便增设了磁盘镜像功能。为实现该功能， 须在同一磁盘控制器下，再增设一个完全相同的磁盘驱动器，如图8-13所示。当采用磁盘 镜像方式时，在每次向主磁盘写入数据后，都需要将数据再写到备份磁盘上，使两个磁盘上具 有完全相同的位像图。把备份磁盘看作是主磁盘的一面镜子。当主磁盘驱动器发生故障时，由 于有备份磁盘的存在，在进行切换后，使主机仍能正常工作。磁盘镜像虽然实现了容错功能， 却使磁盘的利用率降至50%，也未能使服务器的磁盘IO速度得到提高。如图8-13所示。\n\n2.磁盘双工（DiskDuplexing） 如果控制这两台磁盘驱动器的磁盘控制器发生故障，或主机到磁盘控制器之间的通道 发生故障，磁盘镜像功能便起不到数据保护的作用。因此，在第二级容错技术中，又增加 镜像成对，如图8-14所示。 268  第八章磁盘存储器的管理 在磁盘双工时，文件服务器同时将数据写到两个处于不同控制器下的磁盘上，使两者 有完全相同的位像图。如果某个通道或控制器发生故障时，另一通道上的磁盘仍能正常工 作，不会造成数据的丢失。在磁盘双工时，由于每一个磁盘都有自已的独立通道，故可同 时（并行）地将数据写入磁盘或读出数据。 磁盘 磁 通道 控制器 通道 盘 主 主 控 磁盘驱动器 机 制 机 通道 器 磁盘 控制器 磁盘驱动器 图8-13磁盘镜像示意图 图8-14磁盘双工示意图"
          },
          {
            "三级标题": "8.4.3 基于集群技术的容错功能 一 在进入上个世纪90年代后，为了进一步增强服务器的并行处理能力和可用性，采用了 对称多台处理机SMP来实现集群系统的服务器功能。所谓集群，是指由一组互连的自主计 算机组成统一的计算机系统，给人们的感觉是，它们是一台机器。利用集群系统不仅可提 高系统的并行处理能力，还可用于提高系统的可用性，它们是当前使用最广泛的一类具有 容错功能的集群系统。其主要工作模式有三种：热备份模式、互为备份模式和公用磁盘模 式。下面我们介绍如何利用集群系统来提高服务器的可用性。",
            "正文": "1.双机热备份模式 如图8-15所示，在这种模式的系统中，备有两台服务器，两者的处理能力通常是完全 相同的，一台作为主服务器，另一台作为备份服务器。平时主服务器运行，备份服务器则 时刻监视着主服务器的运行，一旦主服务器出现故障，备份服务器便立即接替主服务器的 工作而成为系统中的主服务器，修复后的服务器再作为备份服务器。 MSL 主服务器 备份服务器 传输介质 图8-15双机热备份模式 为使在这两台服务器间能保持镜像关系，应在这两台服务器上各装入一块网卡，并通 过一条镜像服务器链路MSL（MirroredServerLink）将两台服务器连接起来。两台服务器之间 保持一定的距离，其所允许的距离取决于所配置的网卡和传输介质，如果用FDDI单模光 纤，两台服务器间的距离可达到20公里。此外，还必须在系统中设置某种机制来检测主服 务器中数据的改变。一旦该机制检测到主服务器中有数据变化，便立即通过通信系统将修 改后的数据传送到备份服务器的相应数据文件中。为了保证在两台服务器之间通信的高速 性和安全性，通常都选用高速通信信道，并有备份线路。 在这种模式下，一旦主服务器发生故障，系统能自动地将主要业务用户切换到备份服 269  计算机操作系统 务器上。为保证切换时间足够快（通常为数分钟），要求在系统中配置有切换硬件的开关设 备，在备份服务器上事先建立好通信配置，并能迅速处理客户机的重新登录等事宜。 该模式是早期使用的一种集群技术，它的最大优点是提高了系统的可用性，易于实 现，而且主、备份服务器完全独立，可支持远程热备份，从而能消除由于火灾、爆炸等 非计算机因素所造成的隐患。其主要缺点是从服务器处于被动等待状态，整个系统的使 用效率只有50%。\n\n2.双机互为备份模式 务，例如，一台作为数据库服务器，另一台作为电子邮件服务器。为了实现两者互为备份 的功能，在两台服务器之间，应通过某种专线将其连接起来。如果希望两台服务器之间能 相距较远，最好利用FDDI单模光纤来连接两台服务器。在此情况下，最好再通过路由器 将两台服务器互连起来，作为备份通信线路。图8-16示出了双机互为备份系统的情况。 具有两台 数据库 FDDI单模光纤 电子邮件 具有两台 硬盘 服务器 服务器 硬盘 交换集线器 路由器 X.25 图8-16双机互为备份系统的示意图 在互为备份的模式中，最好在每台服务器内都配置两台硬盘，一个用于装载系统程序 在正常运行时，镜像盘对本地用户是锁死的，这样就较易于保证在镜像盘中数据的正确性。 如果仅有一个硬盘，则可用建立虚拟盘的方式或分区方式来分别存放系统程序和应用程序， 以及另一台服务器的备份数据。 如果通过专线链接检查到某台服务器发生了故障，此时，再通过路由器去验证这台服 务器是否真的发生了故障。如果故障被证实，则由正常服务器向故障服务器的客户机发出 广播信息，表明要进行切换。在切换成功后，客户机无须重新登录便可继续使用网络提供 的服务，和访问服务器上的数据。而对于连接在非故障服务器上的客户机，则只会感觉到 网络服务稍有减慢而已，不会有任何影响。当故障服务器修复并重新连到网上后，已被迁 移到无故障服务器上的服务功能将被返回，恢复正常工作。 这种模式的优点是两台服务器都可用于处理任务，因而系统效率较高，现在已将这种 模式从两台机器扩大到4台、8台、16台甚至更多。系统中所有的机器都可用于处理任务， 当其中一台发生故障时，系统可指定另一台机器来接替它的工作。 270"
          }
        ]
      },
      {
        "二级标题": "8.5_数据一致性控制",
        "三级内容": [
          {
            "三级标题": "8.4.4 后备系统 在一个完整的系统中是必须配置后备系统的。这一方面是因为磁盘系统不够大，不可 能将系统在运行过程中的所有数据都装在磁盘中，应当把暂时不需要但仍然有用的数据， 存放在后备系统中保存起来。另一方面是为了防止系统发生故障或病毒的感染，把系统中 的数据弄错或丢失，也需要将比较重要的数据存放在后备系统中。目前常用做后备系统的 设备有磁带机、磁盘机和光盘机。",
            "正文": "1.磁带机 它是最早作为计算机系统的外存储器。但由于它只适合存储顺序文件，故现在主要把 它作为后备设备。磁盘机的主要优点是容量大，一般可达数GB至数十GB，且价格便宜， 故在许多大、中型系统中都配置了磁带机。其缺点是只能顺序存取且速度也较慢，为数百 KB到数MB，为了将一个大容量磁盘上的数据拷贝到磁带上，需要花费很多时间。\n\n2.硬盘\n\n（1）移动磁盘。对于小型系统和个人电脑而言，常用移动磁盘作为后备系统，其最大的优 点是速度高，脱机保存方便，而且保存时间也较长，可比磁带机长出3一5年。但单位容量的 费用较高。近年来，移动磁盘的价格已有明显下降，而且体积也非常小，应用也日益广泛。\n\n（2）固定硬盘驱动器。在大、中型系统中可利用大容量硬盘兼做后备系统，为此需要 在一个系统中配置两个大容量硬盘系统。每个硬盘 硬盘0 硬盘1 都被划分为两个分区：一个数据区，一个备份区， 数据1 数据0 如图8-17所示。可在每天晚上将硬盘0中的“数据 的拷贝区 的拷贝区 0”拷贝到硬盘1中的拷贝区中保存；同样也将硬盘 数据0 数据1 1中的“数据1”拷贝到硬盘0中的拷贝区中保存。 这种后备系统不仅拷贝速度非常快，而且还具有容 CPU 错功能，即当其中任何一个硬盘驱动器发生敌障时， 都不会引起系统瘫痪。 图8-17利用大容量硬盘兼做后备系统\n\n3.光盘驱动器 光盘驱动器是现在最流行的多媒体设备，可将它们分为如下两类：\n\n（1）只读光盘驱动器CD-ROM和DVD-ROM。这两种驱动器主要用于播放音频和视频 信号。但由于它们都只能播放（读）不能写，故难于用它们作为后备设备。\n\n(2）可读写光盘驱动器。又把它称为刻录机。它们既能播放(读)又能刻录(写)，故可将 它们作为后备设备，存储计算机中的数字信息。目前有三种类型的刻录机。①CD-RW刻 271  计算机操作系统 录机，它能播放和刻录CD、VCD光盘。②COMBO刻录机，它能播放DVD光盘，但只 能刻录CD、VCD光盘。③DVD 刻录机，它能播放和刻录CD、VCD和DVD光盘。 /8.5数据一致性控制 在实际应用中，经常会在多个文件中都含有同一个数据。所谓数据一致性问题是指， 保存在多个文件中的同一数据，在任何情况下都必需能保证相同。例如，当我们发现某种 商品的进价有错时，我们必须同时修改流水账，付费账、分类账及总账等一系列文件中的 该商品的价格，方能保证数据的一致性。但如果在修改进行到中途时系统突然发生故障， 在现代OS中都配置了能保证数据一致性的软件。"
          },
          {
            "三级标题": "8.5.1 事务 一一",
            "正文": "1.事务的定义 事务是用于访问和修改各种数据项的一个程序单位。事务也可以被看做是一系列相关 读和写操作。被访问的数据可以分散地存放在同一文件的不同记录中，也可放在多个文件 中。只有对分布在不同位置的同一数据所进行的读和写（含修改）操作全部完成时，才能以 托付操作(CommitOperation)，也称为提交操作，结束事务，确认事务的变化。其后其它的 进程或用户才将可以查看到事务变化后的新数据。但是，只要这些操作中有一个读、写或 修改操作失败，便必须执行天折操作(AbortOperation)，也称为回滚操作或取消操作。这些 读或写操作的失败可能是由于逻辑错误，也可能是系统故障所导致的。 一个被天折的事务，通常已执行了一些操作，因而可能已对某些数据做了修改。为使 天折的事务不会引起数据的不一致性，需将该事务内刚被修改的数据项恢复成原来的情况， 使系统中各数据项与该事务未执行时的数据项内容完全相同。此时，可以说该事务“已被 退回”（rolledback)。不难看出，一个事务在对一批数据执行修改操作时，应该是要么全部 特性，就是我们在第二章中曾讲过的“原子操作”，即事务具有原子性（Atomic)。 作为单个程序单元执行的一系列操作，并不是都可以成为事务，也就是说，如果定义 其为事务，则必须同时满足四个属性，即事务属性ACID。除了上述的原子性外，事务还应 具备的属性是：①）一致性（Consistent)，即事务在完成时，必须使所有的数据都保持一致状 态：②）隔离性（Isolated)，即对一个事务对数据所作的修改，必须与任何其它与之并发事务 相隔离，换言之，一个事务查看数据时数据所处的状态，要么是另一并发事务修改它之前 的状态，要么是另一事务修改它之后的状态，而不会是任何中间状态的数据；③持久性 (Durable)，即事务完成之后，它对于系统的影响是永久性的。\n\n2.事务记录（TransactionRecord） 为了实现上述的原子修改，通常须借助于称为事务记录的数据结构来实现。这些数据 结构被放在一个非常可靠的存储器（又称稳定存储器）中，用来记录在事务运行时数据项修 改的全部信息，故文称为运行记录(Log)。该记录中包括有下列字段： 272  第八章磁盘存储器的管理 ·事务名：用于标识该事务的唯一名字； ·数据项名：它是被修改数据项的唯一名字； ·旧值：修改前数据项的值； ·新值：修改后数据项将具有的值。 在事务记录表中的每一记录描述了在事务运行中的重要事务操作，如修改操作、开始 事务、托付事务或天折事务等。在一个事务T；开始执行时，《T；开始）记录被写入事务记 录表中；在T;执行期间，在T的任何写（修改)操作之前，须先写一适当的新记录到事务记 录表中；当T进行托付时，再把一个（T托付）记录写入事务记录表中。\n\n3.恢复算法 由于一组被事务T修改的数据以及它们被修改前和修改后的值都能在事务记录表中找 到，因此，利用事务记录表系统能处理任何故障而不致使故障造成非易失性存储器中信息 的丢失。恢复算法可利用以下两个过程：\n\n(1）undo（Ti>。该过程把所有被事务T;修改过的数据恢复为修改前的值。\n\n(2）redo（T>。该过程能把所有被事务T修改过的数据设置为新值。 如果系统发生故障，系统应对以前所发生的事务进行清理。通过查找事务记录表，可 以把尚未清理的事务分成两类。一类是其所包含的各类操作都已完成的事务。确定为这一 类事务的依据是，在事务记录表中，既包含了（T；开始）记录，又包含了《T托付）记录。 此时系统利用redo（T;）过程把所有已被修改的数据设置成新值。另一类是其所包含的各 个操作并未全部完成的事务。对于事务T，如果在Log表中只有〈T;开始）记录而无（T; 托付）记录，则此T;便属于这类事务。此时，系统便利用undo（T）过程将所有已被修改 的数据恢复为修改前的值。"
          },
          {
            "三级标题": "8.5.2 检查点",
            "正文": "1.检查点（CheckPoints）的作用 如前所述，当系统发生故障时，必须去检查整个Log表，以确定哪些事务需要利用redo <T）过程去设置新值，而哪些事务文需要利用undo《T）过程去恢复数据的l旧值。由于 在系统中可能存在着许多并发执行的事务，因而在事务记录表中就会有许多事务执行操作 的记录。随着时间的推移，记录的数据也会愈来愈多。因此，一旦系统发生敌障，在事务 记录表中的记录清理起来就非常费时。 引入检查点的主要目的是，使对事务记录表中事务记录的清理工作经常化，即每隔一 定时间便做一次下述工作：首先是将驻留在易失性存储器（内存）中的当前事务记录表中的 所有记录输出到稳定存储器中；其次是将驻留在易失性存储器中的所有已修改数据输出到 稳定存储器中；然后是将事务记录表中的（检查点）记录输出到稳定存储器中；最后是每 当出现一个（检查点）记录时，系统便执行上小节所介绍的恢复操作，即利用redo和undo 过程实现恢复功能。 录前的《T；托付）记录。在这种情况下，所有被T修改过的数据或者是在检查点前已写入 稳定存储器，或者是作为检查点记录自身的一部分写入稳定存储器中。因此，以后在系统 出现故障时，就不必再执行redo操作了。 273  计算机操作系统\n\n2.新的恢复算法 在引入检查点后，可以大大减少恢复处理的开销。因为在发生故障后，并不需要对事 务记录表中的所有事务记录进行处理，而只需对最后一个检查点之后的事务记录进行处理。 因此，恢复例程首先查找事务记录表，确定在最近检查点以前开始执行的最后的事务Ti。 在找到这样的事务后，再返回去搜索事务记录表，便可找到第一个检查点记录，恢复例程 便从该检查点开始返回搜索各个事务的记录，并利用redo和undo过程对它们进行处理。 如果把所有在事务T以后开始执行的事务表示为事务集T，则新的恢复操作要求是： 对所有在T中的事务Tk，如果在事务记录表中出现了（Tk托付）记录，则执行redo《Tk） 操作；反之，即如果在事务记录表中并未出现《Tk托付）记录，则执行undo《Tk）操作。"
          },
          {
            "三级标题": "8.5.3 并发控制（ConcurrentControl) ：→ 在多用户系统和计算机网络环境下，可能有多个用户在同时执行事务。由于事务具有 才允许另一事务执行，即各事务对数据项的修改是互斥的。人们把这种特性称为顺序性， 而把用于实现事务顺序性的技术称为并发控制。该技术在应用数据库系统中已被广泛采 用，现也广泛应用于OS中。虽然可以利用第二章所介绍的信号量机制来保证事务处理 的顺序性，但在数据库系统和文件服务器中应用得最多的，还是较简单的且较灵活的同步 机制—锁。",
            "正文": "1.利用互厅锁实现“顺序性” 实现顺序性的一种最简单的方法，是设置一种用于实现互斥的锁，简称为互斥锁 (ExclusiveLock)。在利用互斥锁实现顺序性时，应为每一个共享对象设置一把互斥锁。当 某一事务T要去访问某对象时，应先获得该对象的互斥锁。若成功，便用该锁将该对象锁 住，于是事务T便可对该对象执行读或写操作；而其它事务由于未能获得该锁，因而不能 访问该对象。如果T需要对一批对象进行访问，则为了保证事务操作的原子性，T应先获 得这一批对象的互斥锁，以将这些对象全部锁住。如果成功，便可对这一批对象执行读或 写操作；操作完成后又将所有这些锁释放。但如果在这一批对象中的某一个对象已被其它 事物锁住，则此时T应对此前已被T锁住的其它对象进行开锁，宣布此次事务运行失败， 但不致引起数据的变化。\n\n2.利用互厅锁和共享锁实现顺序性 利用互斥锁实现顺序性的方法简单易行。目前有不少系统都是采用这种方法来保证事 务操作的顺序性，但这却存在着效率不高的问题。因为一个共享文件虽然只允许一个事务 去写，但却允许多个事务同时去读；而在利用互斥锁来锁住文件后，则只允许一个事务去 读。为了提高运行效率而又引入了另一种形式的锁——共享锁(SharedLock)。共享锁与互 斥锁的区别在于：互斥锁仅允许一个事务对相应对象执行读或写操作，而共享锁则允许多 个事务对相应对象执行读操作，但不允许其中任何一个事务对对象执行写操作。 在为一个对象设置了互斥锁和共享锁的情况下，如果事务T要对Q执行读操作，则只 需去获得对象Q的共享锁。如果对象Q已被互斥锁锁住，则T;必须等待；否则，便可获 得共享锁而对Q执行读操作。如果T要对Q执行写操作，则T;还须去获得Q的互斥锁。 274  第八章磁盘存储器的管理 若失败，须等待；否则，可获得互斥锁而对Q执行写操作。利用共享锁和互斥锁来实现顺 序性的方法非常类似于我们在第二章中所介绍的读者一写者问题的解法。"
          },
          {
            "三级标题": "8.5.4 重复数据的数据一致性问题 一 为了保证数据的安全性，最常用的做法是把关键文件或数据结构复制多份，分别存储 在不同的地方，当主文件(数据结构)失效时，还有备份文件(数据结构)可以使用，不会造成 数据丢失，也不会影响系统工作。显然，主文件（数据结构)中的数据应与各备份文件中的 对应数据相一致。此外，还有些数据结构(如空闲盘块表)在系统运行过程中总是不断地对 它进行修改，因此，同样应保证不同处的同一数据结构中数据的一致性。",
            "正文": "1.重复文件的一致性 我们以UNIX类型的文件系统为例来说明如何保证重复文件的一致性问题。对于通常 的UNIX文件目录，其每个目录项中含有一个ASCII码的文件名和一个索引结点号，后者 指向一个索引结点。当有重复文件时，一个目录项可由一个文件名和若干个索引结点号组 成，每个索引结点号都是指向各自的索引结点。图8-18示出了UNIX类型的目录和具有重 复文件的目录。 文件名 i结点 文件名 结点 文件1 17 文件1 1719 40 文件2 22 文件2 22 72 16 文件3 12 文件3 12 30 29 文件4 84 文件484 15 66 (a)不允许有重复文件的目录 (b)允许有重复文件的目录 图8-18UNIX类型的目录 在有重复文件时，如果一个文件拷贝被修改，则必须也同时修改其它几个文件拷贝， 以保证各相应文件中数据的一致性。这可采用两种方法来实现：第一种方法是当一个文件 被修改后可查找文件目录，以得到其它几个拷贝的索引结点号，再从这些索引结点中找到 各拷贝的物理位置，然后对这些拷贝做同样的修改；第二种方法是为新修改的文件建立几 个拷贝，并用新拷贝去取代原来的文件拷贝。\n\n2.链接数一致性检查 在UNIX类型的文件目录中，其每个目录项内都含有一个索引结点号，用于指向该文 件的索引结点。对于一个共享文件，其索引结点号会在目录中出现多次。例如，当有5个 用户（进程）共享某文件时，其索引结点号会在目录中出现5次；另一方面，在该共享文件 的索引结点中有一个链接计数count，用来指出共享本文件的用户（进程）数。在正常情况下 这两个数据应该一致，否则就会出现数据不一致性差错。 为了检查这种数据不一致性差错，需要配置一张计数器表，此时应是为每个文件建立 一个表项，其中含有该索引结点号的计数值。在进行检查时，从根目录开始查找，每当在 目录中遇到该索引结点号时，便在该计数器表中相应文件的表项上加1。当把所有目录都 检查完后，便可将该计数器表中每个表项中的索引结点号计数值与该文件索引结点中的链 275  计算机操作系统 接计数count值加以比较，如果两者一致，表示是正确的；否则，便是发生了链接数据不 一致的错误。 如果索引结点中的链接计数count值大于计数器表中相应索引结点号的计数值，则即 删除。这种错误的后果是使一些已无用户需要的文件仍驻留在磁盘上，浪费了存储空间。 当然这种错误的性质并不严重。解决的方法是用计数器表中的正确的计数值去为count重 新赋值。反之，如果出现count值小于计数器表中索引结点号计数值的情况时，就有潜在 的危险。假如有两个用户共享一个文件，但是count值仍为1，这样，只要其中有一个用户 不再需要此文件时，count值就会减为0，从而使系统将此文件删除，并释放其索引结点及 文件所占用的盘块，导致另一共享此文件的用户所对应的目录项指向了一个空索引结点， 最终是使该用户再无法访问此文件。如果该索引结点很快又被分配给其它文件，则又会带 来潜在的危险。解决的方法是将count值置为正确值。\n\n1.目前常用的外存有哪几种组织方式？\n\n2.由连续组织方式所形成的顺序文件的主要优缺点是什么？它主要应用于何种场合？\n\n3.在链接式文件中常用哪种链接方式？为什么？\n\n4.在文件分配表中为什么要引入“簇”的概念？以“簇”为基本的分配单位有什么好处？\n\n5.简要说明为什么要从FAT12发展为FAT16？又进一步要发展为FAT32？\n\n6.试解释逻辑簇号和虚拟簇号这两个名词，NTFS是如何将它们映射到文件的物理地 址上的？\n\n7.在MS-DOS中有两个文件A和B，A占用11、12、16和14四个盘块；B占用13、 18和20三个盘块。试画出在文件A和B中各盘块间的链接情况及FAT的情况。\n\n8.NTFS文件系统中的文件所采用的是什么样的物理结构？\n\n9.假定一个文件系统的组织方式与MS-DOS相似，在FAT中可有64K个指针，磁盘 的盘块大小为512B，试问该文件系统能否指引一个512MB的磁盘？\n\n10.为了快速访问，又易于更新，当数据为以下形式时，应选用何种文件组织方式？\n\n(1）不经常更新，经常随机访问；\n\n(2）经常更新，经常按一定顺序访问；\n\n(3）经常更新，经常随机访问。\n\n11.在UNIX中，如果一个盘块的大小为1KB，每个盘块号占4个字节，即每块可放 256个地址。请转换下列文件的字节偏移量为物理地址：\n\n(1) 9999;(2) 18000; (3) 420000。\n\n12.什么是索引文件？为什么要引入多级索引？\n\n13.试说明增量式索引组织方式。\n\n14.有一计算机系统利用图8-19所示的位示图来管理空闲盘块。盘块的大小为1KB， 现要为某文件分配两个盘块，试说明盘块的具体分配过程。 276"
          }
        ]
      }
    ]
  }
]
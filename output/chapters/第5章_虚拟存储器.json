[
  {
    "一级标题": "第5章_虚拟存储器",
    "二级内容": [
      {
        "二级标题": "5.1_虚拟存储器概述",
        "三级内容": [
          {
            "三级标题": "5.1.1 常规存储管理方式的特征和局部性原理 一←",
            "正文": "1.常规存储器管理方式的特征 具有如下两个共同的特征：\n\n(1）一次性，是指作业必须一次性地全部装入内存后方能开始运行。在传统存储器管理 方式中，无一例外地要求先将作业全部装入内存后方能运行。正是这一特征导致了大作业 无法在小内存中运行，以及无法进一步提高系统的多道程序度，直接限制了对处理机的利 用率和系统的吞吐量的提高。事实上，许多作业在运行时，并非需要用到全部程序和数据， 如果一次性地装入其全部程序和数据，显然也是对内存空间的一种浪费。\n\n(2）驻留性，是指作业被装入内存后，整个作业都一直驻留在内存中，其中任何部分 153  计算机操作系统 都不会被换出，直至作业运行结束。尽管运行中的进程会因IVO等原因而被阻塞，可能处 于长期等待状态，或者有的程序模块在运行过一次后就不再需要(运行)了，它们都仍将驻 留在内存中，继续占用宝贵的内存资源。 由此可以看出，上述的一次性及驻留性特征使得许多在程序运行中不用或暂时不用的 程序(数据)占据了大量的内存空间，而一些需要运行的作业又无法装入运行，显然，这是 在浪费宝贵的内存资源。现在要研究的问题是：一次性及驻留性特征是否是程序在运行时 所必需的和不可改变的。\n\n2.局部性原理 程序运行时存在的局部性现象，很早就已被人发现，但直到1968年，PDenning才真 正指出：程序在执行时将呈现出局部性规律，即在一较短的时间内，程序的执行仅局限于 某个部分，相应地，它所访问的存储空间也局限于某个区域。他提出了下述几个论点： 的。该论点也在后来许多学者对高级程序设计语言（如FORTRAN语言、PASCAL语言及C 语言）规律的研究中被证实。\n\n（2）过程调用将会使程序的执行轨迹由一部分区域转至另一部分区域。但经研究看出， 过程调用的深度在大多数情况下都不超过5。这就是说，程序将会在一段时间内，都局限 在这些过程的范围内运行。\n\n（3）程序中存在许多循环结构，这些结构虽然只由少数指令构成，但是它们将被多次 执行。\n\n(4）程序中还包括许多对数据结构的处理，如对数组进行操作，这些处理往往都局限 于很小的范围内。 局限性又表现在下述两个方面：\n\n（1）时间局限性。如果程序中的某条指令被执行，则不久以后该指令可能再次执行： 如果某数据被访问过，则不久以后该数据可能再次被访问。产生时间局限性的典型原因是 在程序中存在着大量的循环操作。\n\n（2）空间局限性。一旦程序访问了某个存储单元，在不久之后，其附近的存储单元也 将被访问，即程序在一段时间内所访问的地址可能集中在一定的范围之内，其典型情况便 是程序的顺序执行。\n\n3.虚拟存储器的基本工作情况 基于局部性原理可知，应用程序在运行之前没有必要将之全部装入内存，而仅须将那 些当前要运行的少数页面或段先装入内存便可运行，其余部分暂留在盘上。程序在运行时， 如果它所要访问的页(段)已调入内存，便可继续执行下去；但如果程序所要访问的页(段) 尚未调入内存（称为缺页或缺段)，便发出缺页（段)中断请求，此时OS将利用请求调页（段） 功能将它们调入内存，以使进程能继续执行下去。如果此时内存已满，无法再装入新的页 （段），OS还须再利用页（段）的置换功能，将内存中暂时不用的页（段）调至盘上，腾出足够的 内存空间后，再将要访问的页（段）调入内存，使程序继续执行下去。这样，便可使一个大 的用户程序在较小的内存空间中运行，也可在内存中同时装入更多的进程，使它们并发 执行。 154  第五章虚拟存储器"
          },
          {
            "三级标题": "5.1.2 虚拟存储器的定义和特征",
            "正文": "1.虚拟存储器的定义 当用户看到自已的程序能在系统中正常运行时，他会认为，该系统所具有的内存容量 一定比自己的程序大，或者说，用户所感觉到的内存容量会比实际内存容量大得多。但用 户所看到的大容量只是一种错觉，是虚的，故人们把这样的存储器称为虚拟存储器。 综上所述，所谓虚拟存储器，是指具有请求调入功能和置换功能，能从逻辑上对内存 容量加以扩充的一种存储器系统。其逻辑容量由内存容量和外存容量之和所决定，其运行 速度接近于内存速度，而每位的成本却又接近于外存。可见，，虚拟存储技术是一种性能非 常优越的存储器管理技术，故被广泛地应用于大、中、小型机器和微型机中。\n\n2.虚拟存储器的特征 与传统的存储器管理方式比较，虚拟存储器具有以下三个重要特征：\n\n（1）多次性。多次性是相对于传统存储器管理方式的一次性而言的，是指一个作业中 的程序和数据无需在作业运行时一次性地全部装入内存，而是允许被分成多次调入内存运 行，即只需将当前要运行的那部分程序和数据装入内存即可开始运行。以后每当要运行到 尚未调入的那部分程序时，再将它调入。正是由于虚拟存储器的多次性特征，才使它具有从 逻辑上扩大内存的功能。无疑，多次性是虚拟存储器最重要的特征，它是任何其它的存储管 理方式所不具有的。因此，我们也可以认为虚拟存储器是具有多次性特征的存储器管理系统。\n\n（2）对换性。对换性是相对于传统存储器管理方式的常驻性而言，是指一个作业中的 程序和数据，无须在作业运行时一直常驻内存，而是允许在作业的运行过程中进行换进、 换出，亦即，在进程运行期间，充许将那些暂不使用的代码和数据从内存调至外存的对换 调至外存，待它们重又具备运行条件时再调入内存。换进和换出能有效地提高内存利用率。 可见，虚拟存储器具有对换性特征，也正是由于这一特征，才使得虚拟存储器得以正常运 行。试想，如果虚拟存储器不具有换出功能，即不能把那些在存储器中暂时不运行的进程 或页面（段）换至外存，不仅不能充分地利用内存，而且还会使在换入时，因无足够的内存 空间，而经常以失败告终。\n\n(3）虚拟性。虚拟性是指能够从逻辑上扩充内存容量，使用户所看到的内存容量远大 于实际内存容量。这样，就可以在小的内存中运行大的作业，或者能提高多道程序度。它 不仅能有效地改善内存的利用率，还可提高程序执行的并发程度，从而可以增加系统的吞 吐量。这是虚拟存储器所表现出来的最重要的特征，也是实现虚拟存储器的最重要的目标。 正是由于它具有这一特征，才使得虚拟存储器目前已成为在大、中、小及微机上最广泛采 用的存储器管理方式。 值得说明的是，虚拟性是以多次性和对换性为基础的，或者说，仅当系统允许将作业 分多次调入内存，并能将内存中暂时不运行的程序和数据换至盘上时，才有可能实现虚拟 存储器：而多次性和对换性显然又必须建立在离散分配的基础上。"
          },
          {
            "三级标题": "5.1.3 虚拟存储器的实现方法 在虚拟存储器中，允许将一个作业分多次调入内存。如果采用连续分配方式时，要求 155  计算机操作系统 个作业的内存空间，以便能将该作业分先后地多次装入内存。这不仅会使相当一部分内存 空间都处于暂时或“永久”的空闲状态，造成内存资源的严重浪费，而且无法、也无意义 再从逻辑上扩大内存容量。所以，虚拟存储器的实现，都毫无例外地建立在离散分配存储 管理方式的基础上。目前，所有的虚拟存储器都是采用下述方式之一实现的。",
            "正文": "1.分页请求系统 分页请求系统是在分页系统的基础上增加了请求调页功能和页面置换功能所形成的页 式虚拟存储系统。它允许用户程序只装入少数页面的程序（及数据）即可启动运行。以后， 再通过调页功能及页面置换功能陆续地把即将运行的页面调入内存，同时把暂不运行的页 面换出到外存上。置换时以页面为单位。为了能实现请求调页和页面置换功能，系统必须 提供必要的硬件支持和实现请求分页的软件。 1）硬件支持 主要的硬件支持有：\n\n（1）请求分页的页表机制。它是在纯分页的页表机制上增加若干项而形成的，作为请 求分页的数据结构。\n\n（2）缺页中断机构。每当用户程序要访问的页面尚未调入内存时，便产生一缺页中断， 以请求OS将所缺的页调入内存。\n\n（3）地址变换机构。它同样是在纯分页地址变换机构的基础上发展形成的。 2）实现请求分页的软件 这里包括有用于实现请求调页的软件和实现页面置换的软件。它们在硬件的支持下， 将程序正在运行时所需的页面（尚未在内存中的）调入内存，再将内存中暂时不用的页面从 内存置换到磁盘上。\n\n2.请求分段系统 请求分段系统是在分段系统的基础上，增加了请求调段及分段置换功能后所形成的段 式虚拟存储系统。它允许用户程序只要装入少数段（而非所有的段）的程序和数据即可启动 运行。以后通过调段功能和段的置换功能将暂不运行的段调出，再调入即将运行的段。置 换是以段为单位进行的。为了实现请求分段，系统同样需要必要的硬件和软件支持。 1)硬件支持 主要的硬件支持有：\n\n（1）请求分段的段表机制。它是在纯分段的段表机制上增加若干项而形成的，作为请 求分段的数据结构。\n\n(2）缺页中断机构。每当用户程序要访问的段尚未调入内存时，便产生一缺段中断， 以请求OS将所缺的段调入内存。\n\n(3）地址变换机构。它同样是在纯分段地址变换机构的基础上发展形成的。 2）软件支持 这里包括有用于实现请求调段的软件和实现段置换的软件。它们在硬件的支持下，先 的）调入内存。虚拟存储器在实现上是具有一定难度的。相对于请求分段系统，因为请求分 156  第五章虚拟存储器 系统换进换出的基本单位是段，其长度是可变的，分段的分配类似于动态分区方式，它在 内存分配和回收上都比较复杂。 目前，有不少虚拟存储器是建立在段页式系统基础上的，通过增加请求调页和页面置 换功能形成了段页式虚拟存储器系统，而且把实现虚拟存储器所需支持的硬件集成在处理 器芯片上。例如，早在20世纪80年代中期，Intel80386处理器芯片便已具备了支持段页 式虚拟存储器的功能，以后推出的80486、80586以及P2、P3、P4等芯片中，都无一例外 地具有支持段页式虚拟存储器的功能。 /5.2请求分页存储管理方式 请求分页系统是建立在基本分页基础上的，为了能支持虚拟存储器功能，而增加了请 求调页功能和页面置换功能。相应地，每次调入和换出的基本单位都是长度固定的页面， 这使得请求分页系统在实现上要比请求分段系统简单（后者在换进和换出时是可变长度的 段）。因此，请求分页便成为目前最常用的一种实现虚拟存储器的方式。"
          },
          {
            "三级标题": "5.2.1 请求分页中的硬件支持 一·一令 为了实现请求分页，系统必须提供一定的硬件支持。计算机系统除了要求一定容量的 内存和外存外，还需要有请求页表机制、缺页中断机构以及地址变换机构。",
            "正文": "1.请求页表机制 在请求分页系统中需要的主要数据结构是请求页表，其基本作用仍然是将用户地址空 间中的逻辑地址映射为内存空间中的物理地址。为了满足页面换进换出的需要，在请求页 表中又增加了四个字段。这样，在请求分页系统中的每个页表应含以下诸项： 页号 物理块号 状态位P 访问字段A 修改位M 外存地址 现对其中各字段说明如下：\n\n(1）状态位(存在位)P：由于在请求分页系统中，只将应用程序的一部分调入内存，还 有一部分仍在外存磁盘上，故须在页表中增加一个存在位字段。由于该字段仅有一位，故 又称位字。它用于指示该页是否已调入内存，供程序访问时参考。\n\n(2）访问字段A：用于记录本页在一段时间内被访问的次数，或记录本页最近已有多 长时间未被访问，提供给置换算法（程序)在选择换出页面时参考。\n\n(3）修改位M：标识该页在调入内存后是否被修改过。由于内存中的每一页都在外存 上保留一份副本，因此，在置换该页时，若未被修改，就不需再将该页写回到外存上，以 减少系统的开销和启动磁盘的次数；若已被修改，则必须将该页重写到外存上，以保证外 存中所保留的副本始终是最新的。简而言之，M位供置换页面时参考。\n\n(4）外存地址：用于指出该页在外存上的地址，通常是物理块号，供调入该页时参考。\n\n2.缺页中断机构 在请求分页系统中，每当所要访问的页面不在内存时，便产生一缺页中断，请求OS 157"
          }
        ]
      },
      {
        "二级标题": "5.2_请求分页存储管理方式",
        "三级内容": [
          {
            "三级标题": "5.2.1 请求分页中的硬件支持 一·一令 为了实现请求分页，系统必须提供一定的硬件支持。计算机系统除了要求一定容量的 内存和外存外，还需要有请求页表机制、缺页中断机构以及地址变换机构。",
            "正文": "1.请求页表机制 在请求分页系统中需要的主要数据结构是请求页表，其基本作用仍然是将用户地址空 间中的逻辑地址映射为内存空间中的物理地址。为了满足页面换进换出的需要，在请求页 表中又增加了四个字段。这样，在请求分页系统中的每个页表应含以下诸项： 页号 物理块号 状态位P 访问字段A 修改位M 外存地址 现对其中各字段说明如下：\n\n(1）状态位(存在位)P：由于在请求分页系统中，只将应用程序的一部分调入内存，还 有一部分仍在外存磁盘上，故须在页表中增加一个存在位字段。由于该字段仅有一位，故 又称位字。它用于指示该页是否已调入内存，供程序访问时参考。\n\n(2）访问字段A：用于记录本页在一段时间内被访问的次数，或记录本页最近已有多 长时间未被访问，提供给置换算法（程序)在选择换出页面时参考。\n\n(3）修改位M：标识该页在调入内存后是否被修改过。由于内存中的每一页都在外存 上保留一份副本，因此，在置换该页时，若未被修改，就不需再将该页写回到外存上，以 减少系统的开销和启动磁盘的次数；若已被修改，则必须将该页重写到外存上，以保证外 存中所保留的副本始终是最新的。简而言之，M位供置换页面时参考。\n\n(4）外存地址：用于指出该页在外存上的地址，通常是物理块号，供调入该页时参考。\n\n2.缺页中断机构 在请求分页系统中，每当所要访问的页面不在内存时，便产生一缺页中断，请求OS 157  计算机操作系统 将所缺之页调入内存。缺页中断作为中断，它们同样需要经历诸如保护CPU环境、分析中 断原因、转入缺页中断处理程序进行处理，以及在中断处理完成后再恢复CPU环境等几个 步骤。但缺页中断又是一种特殊的中断，它与一般的中断相比有着明显的区别，主要表现 在下面两个方面：\n\n（1）在指令执行期间产生和处理中断信号。通常， 页面 CPU都是在一条指令执行完后，才检查是否有中断请 B: 求到达。若有，便去响应，否则，继续执行下一条指 令。然而，缺页中断是在指令执行期间，若发现所要 5 访问的指令或数据不在内存时，便立即产生和处理缺 A: 页中断信号，以便能及时将所缺之页面调入内存。\n\n(2）一条指令在执行期间可能产生多次缺页中 3 断。在图5-1中示出了一个例子。如在执行一条指令 指令 2 copyA copyAtoB时，可能要产生6次缺页中断，其中指令 toB 本身跨了两个页面，A和B又分别各是一个数据块， 也都跨了两个页面。基于这些特征，系统中的硬件机 图5-1涉及6次缺页中断的指令 构应能保存多次中断时的状态，并保证最后能返回到 中断前产生缺页中断的指令处继续执行。\n\n916. 19\n\n3.地址变换机构 请求分页系统中的地址变换机构是在分页系统地址变换机构的基础上，为实现虚拟存 储器，再增加了某些功能所形成的，如产生和处理缺页中断，以及从内存中换出一页的功 能等等。图5-2示出了请求分页系统中的地址变换过程。 程序请求访问一页 开始） 是 保留CPU现场 页号>页表长度？ 越界中断 否 从外存中找到缺页 CPU检索快表 内存满否？ 否 页表项在快表中？ 是 选择一页换出 否 访问页表 香 该页被修改否？ 否 页在内存？ 是 将该页写回外存 是 修改快表 OS命令CPU从外存读缺页 修改访问位和修改位 启动IO硬件 形成物理地址 将一页从外存换入内存 （地址变换结束 修改页表 图5-2请求分页中的地变换过程 158  第五章虚拟存储器 在进行地址变换时，首先检索快表，试图从中找出所要访问的页。若找到，便修改页 表项中的访问位，供置换算法选换出页面时参考。对于写指令，还须将修改位置成“1”， 表示该页在调入内存后已被修改。然后利用页表项中给出的物理块号和页内地址形成物理 地址。地址变换过程到此结束。 如果在快表中未找到该页的页表项，则应到内存中去查找页表，再从找到的页表项中 的状态位P来了解该页是否已调入内存。若该页已调入内存，这时应将该页的页表项写入 快表。当快表已满时，则应先调出按某种算法所确定的页的页表项，然后再写入该页的页 表项；若该页尚未调入内存，这时应产生缺页中断，请求OS从外存把该页调入内存。"
          },
          {
            "三级标题": "5.2.2 请求分页中的内存分配 在为进程分配内存时，将涉及到三个问题：第一，为保证进程能正常运行，所需要的 最小物理块数的确定；第二，在为每个进程分配物理块时，应采取什么样的分配策略，即 所分配的物理块是固定的，还是可变的；第三，为不同进程所分配的物理块数，是采取平 均分配算法，还是根据进程的大小按比例分配。",
            "正文": "1.最小物理块数的确定 一个显而易见的事实是，随着为每个进程所分配的物理块的减少，将使进程在执行中 的缺页率上升，从而会降低进程的执行速度。为使进程能有效地工作，应为它分配一定数 目的物理块，但这并不是最小物理块数的概念。 最小物理块数是指能保证进程正常运行所需的最小物理块数，当系统为进程分配的物 理块数少于此值时，进程将无法运行。至于进程应获得的最少物理块数，与计算机的硬件 结构有关，取决于指令的格式、功能和寻址方式。对于某些简单的机器，若是单地址指令， 且采用直接寻址方式，则所需的最少物理块数为2。其中，一块是用于存放指令的页面， 另一块则是用于存放数据的页面。如果该机器允许间接寻址，则至少要求有三个物理块。 对于某些功能较强的机器，其指令长度可能是两个或多于两个字节，因而其指令本身有可 能跨两个页面，且源地址和目标地址所涉及的区域也都可能跨两个页面。正如前面所介绍 的在缺页中断机构中要发生6次中断的情况一样，对于这种机器，至少要为每个进程分配 6个物理块，以装入6个页面。\n\n2.内存分配策略 在请求分页系统中，可采取两种内存分配策略，即固定和可变分配策略。在进行置换 时，也可采取两种策略，即全局置换和局部置换。于是可组合出以下三种适用的策略。 1）固定分配局部置换（FixedAllocation，LocalReplacement) 所谓固定分配，是指为每个进程分配一组固定数目的物理块，在进程运行期间不再改 变。所谓局部置换，是指如果进程在运行中发现缺页，则只能从分配给该进程的n个页面 中选出一页换出，然后再调入一页，以保证分配给该进程的内存空间不变。采用该策略时， 为每个进程分配多少物理块是根据进程类型（交互型或批处理型等）或根据程序员、程序管 理员的建议来确定的。实现这种策略的困难在于：应为每个进程分配多少个物理块难以确 定。若太少，会频繁地出现缺页中断，降低了系统的吞吐量。若太多，又必然使内存中驻 159  计算机操作系统 时，会花费更多的时间。 2)可变分配全局置换(VariableAllocation，GlobalReplacement) 所谓可变分配，是指先为每个进程分配一定数目的物理块，在进程运行期间，可根据 情况做适当的增加或减少。所谓全局置换，是指如果进程在运行中发现缺页，则将OS所 保留的空闲物理块（一般组织为一个空闲物理块队列）取出一块分配给该进程，或者以所有 进程的全部物理块为标的，选择一块换出，然后将所缺之页调入。这样，分配给该进程的 内存空间就随之增加。可变分配全局置换这可能是最易于实现的一种物理块分配和置换策 略，已用于若干个OS中。在采用这种策略时，凡产生缺页（中断）的进程，都将获得新的物 理块，仅当空闲物理块队列中的物理块用完时，OS才能从内存中选择一页调出。被选择调 出的页可能是系统中任何一个进程中的页，因此这个被选中的进程拥有的物理块会减少， 这将导致其缺页率增加。 3）可变分配局部置换（VariableAllocation，LocalReplacement) 该策略同样是基于进程的类型或根据程序员的要求，为每个进程分配一定数目的物理 块，但当某进程发现缺页时，只允许从该进程在内存的页面中选择一页换出，这样就不会 影响其它进程的运行。如果进程在运行中频繁地发生缺页中断，则系统须再为该进程分配 若干附加的物理块，直至该进程的缺页率减少到适当程度为止。反之，若一个进程在运行 过程中的缺页率特别低，则此时可适当减少分配给该进程的物理块数，但不应引起其缺页 率的明显增加。\n\n3.物理块分配算法 在采用固定分配策略时，如何将系统中可供分配的所有物理块分配给各个进程，可采 用下述几种算法：\n\n（1）平均分配算法，即将系统中所有可供分配的物理块平均分配给各个进程。例如， 当系统中有100个物理块，有5个进程在运行时，每个进程可分得20个物理块。这种方式 貌似公平，但由于未考虑到各进程本身的大小，会造成实际上的不公平。假设系统平均分 配给每个进程20个物理块，这样，一个进程只有10页，闲置了10个物理块，而另外一个 进程有200页，也仅被分配了20块，显然，后者必然会有很高的缺页率。\n\n(2）按比例分配算法，即根据进程的大小按比例分配物理块。如果系统中共有n个进 程，每个进程的页面数为S，则系统中各进程页面数的总和为： s=∑s; 又假定系统中可用的物理块总数为m，则每个进程所能分到的物理块数为b可由下式计算： b;=s xm 这里，b应该取整，它必须大于最小物理块数。\n\n(3）考虑优先权的分配算法。在实际应用中，为了照顾到重要的、紧迫的作业能尽快 地完成，应为它分配较多的内存空间。通常采取的方法是把内存中可供分配的所有物理块 分成两部分：一部分按比例地分配给各进程；另一部分则根据各进程的优先权进行分配， 160  第五章虚拟存储器 为高优先进程适当地增加其相应份额。在有的系统中，如重要的实时控制系统，则可能是 完全按优先权为各进程分配其物理块的。"
          },
          {
            "三级标题": "5.2.3 页面调入策略 为使进程能够正常运行，必须事先将要执行的那部分程序和数据所在的页面调入内存。 现在的问题是：",
            "正文": "（1）系统应在何时调入所需页面；\n\n(2）系统应从何处调入这些页面；\n\n(3）是如何进行调入的。\n\n1.何时调入页面 为了确定系统将进程运行时所缺的页面调入内存的时机，可采取预调页策略或请求调 页策略，现分述如下。\n\n(1）预调页策略。如果进程的许多页是存放在外存的一个连续区域中，一次调入若干 个相邻的页会比一次调入一页更高效些。但如果调入的一批页面中的大多数都未被访问， 则又是低效的。于是便考虑采用一种以预测为基础的预调页策略，将那些预计在不久之后 便会被访问的页面预先调入内存。如果预测较准确，那么这种策略显然是很有吸引力的。 但遗憾的是，目前预调页的成功率仅约50%。 但预调页策略又因其特有的长处取得了很好的效果。首先可用于在第一次将进程调入 内存时，此时可将程序员指出的那些页先调入内存。其次是，在采用工作集的系统中，每 个进程都具有一张表，表中记录有运行时的工作集，每当程序被调度运行时，将工作集中 的所有页调入内存。关于工作集的概念将在5.4节中介绍。\n\n(2）请求调页策略。当进程在运行中需要访问某部分程序和数据时，若发现其所在的 页面不在内存，便立即提出请求，由OS将其所需页面调入内存。由请求调页策略所确定 调入的页是一定会被访问的，再加之请求调页策略比较易于实现，故在目前的虚拟存储器 中，大多采用此策略。但这种策略每次仅调入一页，故须花费较大的系统开销，增加了磁\n\n2.从何处调入页面 将请求分页系统中的外存分为两部分：用于存放文件的文件区和用于存放对换页面的 对换区。通常，由于对换区是采用连续分配方式，而文件区是采用离散分配方式，所以对 换区的数据存取（磁盘I/O）速度比文件区的高。这样，每当发生缺页请求时，系统应从何处 将缺页调入内存，可分成如下三种情况进行：\n\n（1）系统拥有足够的对换区空间，这时可以全部从对换区调入所需页面，以提高调页 速度。为此，在进程运行前，便须将与该进程有关的文件从文件区拷贝到对换区。\n\n(2）系统缺少足够的对换区空间，这时凡是不会被修改的文件，都直接从文件区调入； 而当换出这些页面时，由于它们未被修改，则不必再将它们重写到磁盘（换出），以后再调 入时，仍从文件区直接调入。但对于那些可能被修改的部分，在将它们换出时便须调到对 换区，以后需要时再从对换区调入。\n\n(3）UNIX方式。由于与进程有关的文件都放在文件区，故凡是未运行过的页面，都应 161  计算机操作系统 从文件区调入。而对于曾经运行过但又被换出的页面，由于是被放在对换区，因此在下次 调入时应从对换区调入。由于UNIX系统允许页面共享，因此，某进程所请求的页面有可 能已被其它进程调入内存，此时也就无需再从对换区调入。\n\n3.页面调入过程 每当程序所要访问的页面未在内存时（存在位为“O”），便向CPU发出一缺页中断，中 断处理程序首先保留CPU环境，分析中断原因后转入缺页中断处理程序。该程序通过查找 页表得到该页在外存的物理块后，如果此时内存能容纳新页，则启动磁盘IO，将所缺之页 调入内存，然后修改页表。如果内存已满，则须先按照某种置换算法，从内存中选出一页 准备换出：如果该页未被修改过（修改位为“0”），可不必将该页写回磁盘；但如果此页已 被修改（修改位为“1”），则必须将它写回磁盘，然后再把所缺的页调入内存，并修改页表 中的相应表项，置其存在位为“1”，并将此页表项写入快表中。在缺页调入内存后，利用 修改后的页表形成所要访问数据的物理地址，再去访问内存数据。整个页面的调入过程对 用户是透明的。\n\n4.缺页率 假设一个进程的逻辑空间为n页，系统为其分配的内存物理块数为m（m≤n)。如果 在进程的运行过程中，访问页面成功（即所访问页面在内存中）的次数为S，访问页面失败 （即所访问页面不在内存中，需要从外存调入）的次数为F，则该进程总的页面访问次数为 A=S+F，那么该进程在其运行过程中的缺页率即为 F A 通常，缺页率受到以下几个因素的影响：\n\n（1）页面大小。页面划分较大，则缺页率较低；反之，缺页率较高。\n\n(2）进程所分配物理块的数目。所分配的物理块数目越多，缺页率越低；反之则越高。\n\n(3）页面置换算法。算法的优劣决定了进程执行过程中缺页中断的次数，因此缺页率 是衡量页面置换算法的重要指标。\n\n（4）程序固有特性。程序本身的编制方法对缺页中断次数有影响，根据程序执行的局 部性原理，程序编制的局部化程度越高，相应执行时的缺页程度越低。 事实上，在缺页中断处理时，当由于空间不足，需要置换部分页面到外存时，选择被 置换页面还需要考虑到置换的代价，如页面是否被修改过。没有修改过的页面可以直接放 弃，而修改过的页面则必须进行保存，所以处理这两种情况时的时间也是不同的。假设被 置换的页面被修改的概率是β，其缺页中断处理时间为t，被置换页面没有被修改的缺页中 断时间为tb，那么，缺页中断处理时间的计算公式为 t=βxta+(1-β)xtb /5.3页面置换算法 在进程运行过程中，若其所要访问的页面不在内存，而需把它们调入内存，但内存已 无空闲空间时，为了保证该进程能正常运行，系统必须从内存中调出一页程序或数据送到 162"
          }
        ]
      },
      {
        "二级标题": "5.3_页面置换算法",
        "三级内容": [
          {
            "三级标题": "5.3.1 最佳置换算法和先进先出置换算法 一 目前有许多页面置换算法，相比而言，下面将介绍的是两种比较极端的算法。最佳置 换算法是一种理想化的算法，它具有最好的性能，但实际上是无法实现的。通常使用最佳 置换算法作为标准，来评价其它算法的优劣。先进先出置换算法是最直观的算法，由于与 通常页面的使用规律不符，可能是性能最差的算法，故实际应用极少。",
            "正文": "1.最佳（Optimal）置换算法 最佳置换算法是由Belady于1966年提出的一种理论上的算法。其所选择的被淘汰页 面将是以后永不使用的，或许是在最长（未来）时间内不再被访问的页面。采用最佳置换算 法通常可保证获得最低的缺页率。但由于人们目前还无法预知，一个进程在内存的若干个 页面中，哪一个页面是未来最长时间内不再被访问的，因而该算法是无法实现的，但可以 利用该算法去评价其它算法。现举例说明如下。 假定系统为某进程分配了三个物理块，并考虑有以下的页面号引用串： 7，0，1，2，0，3，0，4，2，3，0，3，2，1，2，0，.1，7,0，1 进程运行时，先将7，0，1三个页面装入内存。以后，当进程要访问页面2时，将会产生缺 访问的页面，页面1是第14个被访问的页面，而页面7则要在第18次页面访问时才需调入。 下次访问页面0时，因它已在内存而不必产生缺页中断。当进程访问页面3时，又将引起页 面1被淘汰；因为，它在现有的1，2，0三个页面中，将是以后最晚才被访问的。图5-3示 出了采用最佳置换算法时的置换图。由图可看出，采用最佳置换算法发生了6次页面置换。 0110 图5-3利用最佳页面置换算法时的置换图\n\n2.先进先出（FIFO)页面置换算法 FIFO算法是最早出现的置换算法。该算法总是淘汰最先进入内存的页面，即选择在内 存中驻留时间最久的页面予以淘汰。该算法实现简单，只需把一个进程已调入内存的页面 163  计算机操作系统 按先后次序链接成一个队列，并设置一个指针，称为替换指针，使它总是指向最老的页面。 但该算法与进程实际运行的规律不相适应，因为在进程中，有些页面经常被访问，比如， 含有全局变量、常用函数、例程等的页面，FIFO算法并不能保证这些页面不被淘汰。 这里，我们仍用上面的例子，但采用FIFO算法进行页面置换（图5-4)。当进程第一次 访问页面2时，将把第7页换出，因为它是最先被调入内存的；在第一次访问页面3时， 又将把第0页换出，因为它在现有的2、0、1三个页面中是最老的页。由图5-4可以看出， 利用FIFO算法时，进行了12次页面置换，比最佳置换算法正好多一倍。 777 图5-4利用FIFO置换算法时的置换图"
          },
          {
            "三级标题": "5.3.2 最近最久未使用和最少使用置换算法",
            "正文": "1.LRU(LeastRecentlyUsed)置换算法的描述 间，而页面调入的先后并不能反映页面的使用情况。最近最久未使用（LRU）的页面置换算 法是根据页面调入内存后的使用情况做出决策的。由于无法预测各页面将来的使用情况， 只能利用“最近的过去”作为“最近的将来”的近似，因此，LRU置换算法是选择最近最 久未使用的页面予以淘汰。该算法赋予每个页面一个访问字段，用来记录一个页面自上次 被访问以来所经历的时间t。当需淘汰一个页面时，选择现有页面中其t值最大的，即最近 最久未使用的页面予以淘汰。 利用LRU算法对上例进行页面置换的结果如图5-5所示。当进程第一次对页面2进行 访问时，由于页面7是最近最久未被访问的，故将它置换出去。当进程第一次对页面3进 行访问时，第1页成为最近最久未使用的页，将它换出。由图可以看出，前5个时间的图 像与最佳置换算法时的相同，但这并非是必然的结果。因为最佳置换算法是从“向后看” 即根据各页以前的使用情况来判断，而页面过去和未来的走向之间并无必然的联系。 2 图5-5LRU页面置换算法\n\n2.LRU置换算法的硬件支持 LRU置换算法虽然是一种比较好的算法，但要求系统有较多的支持硬件。为了了解一 个进程在内存中的各个页面各有多少时间未被进程访问，以及如何快速地知道哪一页是最 164  第五章虚拟存储器 近最久未使用的页面，须有寄存器和栈两类硬件之一的支持。 1)寄存器 为了记录某进程在内存中各页的使用情况，须为每个在内存中的页面配置一个移位寄 存器，可表示为 R=Rn-1Rn-2Rn-3..RRRo 当进程访问某物理块时，要将相应寄存器的R-1位置成1。此时，定时信号将每隔一 定时间（例如100ms)将寄存器右移一位。如果我们把n位寄存器的数看作是一个整数，那 么，具有最小数值的寄存器所对应的页面，就是最近最久未使用的页面。图5-6示出了某 进程在内存中具有8个页面、为每个内存页面配置一个8位寄存器时的LRU访问情况。这 里，把8个内存页面的序号分别定为1～8。由图可以看出，第3个内存页面的R值最小， 当发生缺页时，应首先将它置换出去。 R R R6 R5 R4 R3 R2 R1 Ro 实页 1 0 1 0 1 0 0 1 0 2 1 0 1 0 1 1 0 0 3 0 0 0 0 0 1 0 0 0 1 1 0 1 0 1 1 5 1 1 0 1 0 1 1 0 6 0 0 1 0 1 0 1 1 7 0 0 0 0 0 1 1 1 8 0 1 0 1 1 0 图5-6某进程具有8个页面时的LRU访问情况 2)栈 可利用一个特殊的栈保存当前使用的各个页面的页面号。每当进程访问某页面时，便 将该页面的页面号从栈中移出，将它压入栈顶。因此，栈顶始终是最新被访问页面的编号， 而栈底则是最近最久未使用页面的页面号。假定现有一进程，它分有五个物理块，所访问 的页面的页面号序列为： 4,7，0,7,1,0,1,2,1,2,6 在前三次访问时，系统将依次将4、7、0放入栈中，4是栈底，0是栈顶；第四次是访问第 7页，使7成为栈顶。在第八次访问页面2时，该进程的五个物理块都已装满，在第九和 十次访问时，未发生缺页。在第11次访问页面6时发生了缺页，此时页面4是最近最久未 被访问的页，应将它置换出去。随着进程的访问，栈中页面号的变化情况如图5-7所示。 1 2 1 0 2 6 2 1 2 6 1 2 1 2 7 1 0 [0 1 7 7 7 [7 0 0 7 7 7 4 4 4 4 4 4 4 4 7 41 图5-7用栈保存当前使用页面时栈的变化情况 165  计算机操作系统\n\n3.最少使用（LeastFrequentlyUsed，LFU)置换算法 在采用LFU算法时，应为在内存中的每个页面设置一个移位寄存器，用来记录该页面 被访问的频率。该置换算法选择在最近时期使用最少的页面作为淘汰页。由于存储器具有 较高的访问速度，例如100ns，在1ms时间内可能对某页面连续访问成千上万次，因此， 直接利用计数器来记录某页被访问的次数是不现实的，只能采用较大的时间间隔来记录对 存储器某页的访问。在最少使用置换算法中采用了移位寄存器方式。每次访问某页时，便 将该移位寄存器的最高位置1，再每隔一定时间（例如100ms）右移一次。这样，在最近一段 时间使用最少的页面将是ZR；最小的页。LFU置换算法的页面访问图，与LRU置换算法的 访问图完全相同；或者说，利用这样一套硬件既可实现LRU算法，又可实现LFU算法。 应该指出，这种算法并不能真正反映出页面的使用情况，因为在每一时间间隔内，只是用 寄存器的一位来记录页的使用情况，因此，在该时间间隔内，对某页访问一次和访问1000 次是完全等效的。"
          },
          {
            "三级标题": "5.3.3 Clock置换算法 虽然LRU是一种较好的算法，但由于它要求有较多的硬件支持，使得其实现所需的成 本较高，故在实际应用中，大多采用LRU的近似算法。Clock算法就是用得较多的一种LRU 近似算法。",
            "正文": "1.简单的Clock置换算法 过链接指针链接成一个循环队列。当某页被访问时，其访间位被置1。置换算法在选择一 页淘汰时，只需检查页的访问位。如果是0，就选择该页换出；若为1，则重新将它置0， 暂不换出，给予该页第二次驻留内存的机会，再按照FIFO算法检查下一个页面。当检查 到队列中的最后一个页面时，若其访问位仍为1，则再返回到队首去检查第一个页面。图 5-8示出了该算法的流程和示例。由于该算法是循环地检查各页面的使用情况，故称为Clock 算法。但因该算法只有一位访问位，只能用它表示该页是否已经使用过，而置换时是将未 使用过的页面换出去，故又把该算法称为最近未用算法或NRU(NotRecentlyUsed)算法。 入口 块号页号访问位指针 A 0 查寻指针前进一步， 指向下一个表目 1 替换 2 4 0 指针 置页面 页面访问位=0？ 3 访问位=“0” 4 2 1 是 5 选择该页面换出 6 0 返回 7 1 图5-8简单Clock置换算法的流程和示例 166  第五章虚拟存储器\n\n2.改进型Clock置换算法 在将一个页面换出时，如果该页已被修改过，便须将该页重新写回到磁盘上：但如果 该页未被修改过，则不必将它拷回磁盘。换而言之，对于修改过的页面，在换出时所付出 的开销比未修改过的页面大，或者说，置换代价大。在改进型Clock算法中，除须考虑页 面的使用情况外，还须再增加一个因素一一置换代价。这样，选择页面换出时，既要是未 使用过的页面，又要是未被修改过的页面。把同时满足这两个条件的页面作为首选淘汰的 页面。由访问位A和修改位M可以组合成下面四种类型的页面： 1类（A=0，M=0)：表示该页最近既未被访问，又未被修改，是最佳淘汰页。 2类(A=0，M=1)：表示该页最近未被访问，但已被修改，并不是很好的淘汰页。 3类（A=1，M=0)：表示最近已被访问，但未被修改，该页有可能再被访问。 4类（A=1，M=1）：表示最近已被访问且被修改，该页可能再被访问。 在内存中的每个页，都必定是这四类页面之一。在进行页面置换时，可采用与简单Clock 面中的哪一种。其执行过程可分成以下三步：\n\n（1）从指针所指示的当前位置开始，扫描循环队列，寻找A=0且M=0的第一类页面， 将所遇到的第一个页面作为所选中的淘汰页。在第一次扫描期间不改变访问位A。\n\n(2）如果第一步失败，即查找一轮后未遇到第一类页面，则开始第二轮扫描，寻找A=0 且M=1的第二类页面，将所遇到的第一个这类页面作为淘汰页。在第二轮扫描期间，将所 有扫描过的页面的访问位都置0。\n\n(3）如果第二步也失败，亦即未找到第二类页面，则将指针返回到开始的位置，并将 所有的访问位复0。然后重复第一步，即寻找A=0且M=0的第一类页面，如果仍失败，必 要时再重复第二步，寻找A=0且M=1的第二类页面，此时就一定能找到被淘汰的页。 该算法与简单Clock算法比较，可减少磁盘的IO操作次数。但为了找到一个可置换 的页，可能须经过几轮扫描。换言之，实现该算法本身的开销将有所增加。"
          },
          {
            "三级标题": "5.3.4 页面缓冲算法（PageBufferingAlgorithm，PBA) 一 在请求分页系统中，由于进程在运行时经常会发生页面换进换出的情况，所以一个十 分明显的事实就是，页面换进换出所付出的开销将对系统性能产生重大的影响。在此，我 们首先对影响页面换进换出效率的若干因素进行分析。",
            "正文": "1.影响页面换进换出效率的若干因素 影响页面换进换出效率的因素有许多，其中包括有：对页面进行置换的算法、将已修 改页面写回磁盘的频率，以及将磁盘内容读入内存的频率。\n\n(1）页面置换算法。影响页面换进换出效率最重要的因素，无疑是页面置换算法。因 为一个好的页面置换算法，可使进程在运行过程中具有较低的缺页率，从而可以减少页面 换进换出的开销。正因如此，才会有许多学者去研究页面置换算法，相应地也就出现了大 量的页面置换算法，其中主要的算法前面已对它做了介绍。\n\n(2）写回磁盘的频率。对于已经被修改过的页面，在将其换出时，应当写回磁盘。如 果是采取每当有一个页面要被换出时就将它写回磁盘的策略，这意味着每换出一个页面， 167  计算机操作系统 便需要启动一次磁盘。但如果在系统中已建立了一个已修改换出页面的链表，则对每一个 要被换出的页面（已修改)，系统可暂不把它们写回磁盘，而是将它们挂在已修改换出页面 的链表上，仅当被换出页面数目达到一定值时，例如64个页面，再将它们一起写回到磁盘 上，这样就显著地减少了磁盘IO的操作次数。或者说，减少已修改页面换出的开销。\n\n（3）读入内存的频率。在设置了已修改换出页面链表后，在该链表上就暂时有一批装 有数据的页面，如果有进程在这批数据还未写回磁盘时需要再次访问这些页面时，就不需 从外存上调入，而直接从已修改换出页面链表中获取，这样也可以减少将页面从磁盘读入 内存的频率，减少页面换进的开销。或者说，只需花费很小的开销便可使这些页面又回到 该进程的驻留集中。\n\n2.页面缓冲算法PBA PBA算法的主要特点是：①显著地降低了页面换进、换出的频率，使磁盘I/O的操作 小，才能使其采用一种较简单的置换策略，如先进先出（FIFO）算法，它不需要特殊硬件的 支持，实现起来非常简单。页面缓冲算法已在不少系统中采用，下面我们介绍VAXVMS 操作系统中所使用的页面缓冲算法。在该系统中，内存分配策略上采用了可变分配和局部 置换方式，系统为每个进程分配一定数目的物理块，系统自已保留一部分空闲物理块。为 了能显著地降低页面换进、换出的频率，在内存中设置了如下两个链表： 1）空闲页面链表 实际上该链表是一个空闲物理块链表，是系统掌握的空闲物理块，用于分配给频繁发 生缺页的进程，以降低该进程的缺页率。当这样的进程需要读入一个页面时，便可利用空 闲物理块链表中的第一个物理块来装入该页。当有一个未被修改的页要换出时，实际上并 不将它换出到外存，而是把它们所在的物理块挂在空闲链表的末尾。应当注意，这些挂 在空闲链表上的未被修改的页面中是有数据的，如果以后某进程需要这些页面中的数据 时，便可从空闲链表上将它们取下，免除了从磁盘读入数据的操作，减少了页面换进的 开销。 2）修改页面链表 它是由已修改的页面所形成的链表。设置该链表的目的是为了减少已修改页面换出的 次数。当进程需要将一个已修改的页面换出时，系统并不立即把它换出到外存上，而是将 它所在的物理块挂在修改页面链表的末尾。这样做的目的是：降低将已修该页面写回磁盘 的频率，降低将磁盘内容读入内存的频率。"
          },
          {
            "三级标题": "5.3.5 访问内存的有效时间 -→ 与基本分页存储管理方式不同，在请求分页管理方式中，内存有效访问时间不仅要考 虑访问页表和访问实际物理地址数据的时间，还必须要考虑到缺页中断的处理时间。这样， 在具有快表机制的请求分页管理方式中，存在下面三种方式的内存访问操作，其有效访问 时间的计算公式也有所不同：",
            "正文": "（1）被访问页在内存中，且其对应的页表项在快表中。 显然，此时不存在缺页中断情况，内存的有效访问时间(EAT)分为查找快表的时间(2) 168  第五章虚拟存储器 和访问实际物理地址所需的时间(t): EAT=+t\n\n(2）被访问页在内存中，且其对应的页表项不在快表中。 数据，另外还需要更新快表。所以，这种情况内存的有效访问时间可分为查找快表的时间、 查找页表的时间、修改快表的时间和访问实际物理地址的时间： EAT=+t++t=2x(a+t)\n\n（3）被访问页不在内存中。 因为被访问页不在内存中，需要进行缺页中断处理，所以这种情况的内存的有效访问 时间可分为查找快表的时间、查找页表的时间、处理缺页中断的时间、更新快表的时间和 访问实际物理地址的时间： 假设缺页中断处理时间为ε，则 EAT=+t+++t=8+2（+t) 上面的几种讨论没有考虑快表的命中率和缺页率等因素，因此，加入这两个因素后， 内存的有效访问时间的计算公式应为 EAT=+axt+(1-a)x[t+fx(s+入+t)+(1-f)x(+t)] 式中，a表示命中率，f表示缺页率。 如果不考虑命中率，仅考虑缺页率，即上式中的入=0和a=0，设缺页中断处理时间 为中，由此可得 x(-)+(+)x+1=\n\n5.4“抖动”与工作集 由于请求分页式虚拟存储器系统的性能优越，在正常运行情况下，它能有效地减少内 存碎片，提高处理机的利用率和吞吐量，故是目前最常用的一种系统。但如果在系统中运 行的进程太多，进程在运行中会频繁地发生缺页情况，这又会对系统的性能产生很大的影 响，故还须对请求分页系统的性能做简单的分析。"
          },
          {
            "三级标题": "5.4.1 多道程序度与“抖动”",
            "正文": "1.多道程序度与处理机的利用率 由于虚拟存储器系统能从逻辑上扩大内存，这时，只需装入一个进程的部分程序和数 据便可开始运行，故人们希望在系统中能运行更多的进程，即增加多道程序度，以提高处 理机的利用率。但处理机的实际利用率却如图5-9中的实线所示。其中横轴表示多道程序 的数量，纵轴表示相应的处理机的利用率。在横轴的开始部分，随着进程数目的增加，处 理机的利用率急剧增加：但到达N时，其增速就明显地减慢了，当到达Nmax时，处理机 的利用率达到最大，以后先开始缓慢下降，当到达N2点时，若再继续增加进程数，利用率 将加速下降而趋于0，见图5-9中的N点。之所以会发生在后面阶段利用率趋于0的情况， 是因为在系统中已发生了“抖动”。 169"
          }
        ]
      },
      {
        "二级标题": "5.4_抖动与工作集",
        "三级内容": [
          {
            "三级标题": "5.4.1 多道程序度与“抖动”",
            "正文": "1.多道程序度与处理机的利用率 由于虚拟存储器系统能从逻辑上扩大内存，这时，只需装入一个进程的部分程序和数 据便可开始运行，故人们希望在系统中能运行更多的进程，即增加多道程序度，以提高处 理机的利用率。但处理机的实际利用率却如图5-9中的实线所示。其中横轴表示多道程序 的数量，纵轴表示相应的处理机的利用率。在横轴的开始部分，随着进程数目的增加，处 理机的利用率急剧增加：但到达N时，其增速就明显地减慢了，当到达Nmax时，处理机 的利用率达到最大，以后先开始缓慢下降，当到达N2点时，若再继续增加进程数，利用率 将加速下降而趋于0，见图5-9中的N点。之所以会发生在后面阶段利用率趋于0的情况， 是因为在系统中已发生了“抖动”。 169  计算机操作系统 利用率 CPU饱和度 100% L/S N NXNN N3 抖动 图5-9处理机的利用率\n\n2.产生“抖动”的原因 发生“抖动”的根本原因是，同时在系统中运行的进程太多，由此分配给每一个进程 的物理块太少，不能满足进程正常运行的基本要求，致使每个进程在运行时，频繁地出现 缺页，必须请求系统将所缺之页调入内存。这会使得在系统中排队等待页面调进/调出的进 程数目增加。显然，对磁盘的有效访问时间也随之急剧增加，造成每个进程的大部分时间 都用于页面的换进/换出，而几乎不能再去做任何有效的工作，从而导致发生处理机的利用 率急剧下降并趋于0的情况。我们称此时的进程是处于“抖动”状态。 “抖动”是在进程运行中出现的严重问题，必须采取相应的措施来解决它。为此有不 少学者对它进行了深入的研究，提出了许多非常有效的解决方法。由于“抖动”的发生与 系统为进程分配物理块的多少有关，于是有人提出了关于进程“工作集”的概念。"
          },
          {
            "三级标题": "5.4.2 工作集",
            "正文": "1.工作集的基本概念 进程发生缺页率的时间间隔与进程所获得的物理块数有关。图5-10示出了缺页率与物 理块数之间的关系。从图中可以看出，缺页率随着所分配物理块数的增加明显地减少，当 物理块数超过某个数目时，再为进程增加一物理块，对缺页率的改善已不明显。可见，此 时已无必要再为它分配更多的物理块。反之，当为某进程所分配的物理块数低于某个数目 时，每减少一块，对缺页率的影响都变得十分明显，此时又应为该进程分配更多的物理块。 为了能清楚地说明形成图5-10所示曲线的原因，还须先介绍关于“工作集”的概念。 关于工作集的理论是1968年由Denning提出并推广的。Denning认为，基于程序运行 时的局部性原理得知，程序在运行期间，对页面的访问是不均匀的，在一段时间内仅局限 于较少的页面，在另一段时间内，又可能仅局限于对另一些较少的页面进行访问。这些页 面被称为活跃页面。如果能够预知程序在某段时间间隔内要访问哪些页面，并将它们调入 内存，将会大大降低缺页率，从而可显著地提高处理机的利用率。 170  第五章 虚拟存储器 缺页率 上限 下限 物理块数 n 图5-10缺页率与物理块数之间的关系\n\n2.工作集的定义 所谓工作集，是指在某段时间间隔里，进程实际所要访问页面的集合。Denning 指 出，虽然程序只需要少量的几页在内存便可运行，但为了较少地产生缺页，应将程序的全 部工作集装入内存中。然而我们无法事先预知程序在不同时刻将访问哪些页面，故仍只有 像置换算法那样，用程序的过去某段时间内的行为作为程序在将来某段时间内行为的近似。 尺寸”（Windowssize)。图5-11示出了某进程访问页面的序列和窗口大小分别为3、4、5 时的工作集。由此可将工作集定义为，进程在时间间隔（t-△，t)中引用页面的集合。 窗口大小 引用页序列 3 4 5 24 24 24 24 15 1524 1524 1524 18 181524 181524 181524 23 231815 23181524 23181524 24 242318 17 172423 17242318 1724231815 18 181724 24 一 一 18 二 一 17 一 一 17 二 15 151718 15171824 一 24 241517 一 17 一 24 一 一 18 182417 图5-11窗口为3、4、5时进程的工作集 工作集w(t，△)是二元函数，即在不同时间t的工作集大小不同，所含的页面数也不同； 工作集与窗口尺寸有关，是窗口尺寸△的非降函数(nondecreasingfunction)，从图5-11 也可看出这点，即 w(t, △) w(t,△+1) 171  计算机操作系统"
          },
          {
            "三级标题": "5.4.3 “抖动”的预防方法 一一← 为了保证系统具有较大的吞吐量，必须防止“抖动”的发生。目前已有许多防止“抖 动”发生的方法。这些方法几乎都是采用调节多道程序度来控制“抖动”发生的。下面介 绍几个较常用的预防“抖动”发生的方法。",
            "正文": "1.采取局部置换策略 在页面分配和置换策略中，如果采取的是可变分配方式，则为了预防发生“抖动”， 可采取局部置换策略。根据这种策略，当某进程发生缺页时，只能在分配给自己的内存空 间内进行置换，不允许从其它进程去获得新的物理块。这样，即使该进程发生了“抖动”， 也不会对其它进程产生影响，于是可把该进程“抖动”所造成的影响限制在较小的范围内。 该方法虽然简单易行，但效果不是很好，因为在某进程发生“抖动”后，它还会长期处在 磁盘I/O的等待队列中，使队列的长度增加，这会延长其它进程缺页中断的处理时间，也 就是延长了其它进程对磁盘的访问时间。\n\n2.把工作集算法融入到处理机调度中 当调度程序发现处理机利用率低下时，它将试图从外存调入一个新作业进入内存，来 改善处理机的利用率。如果在调度中融入了工作集算法，则在调度程序从外存调入作业之 前，必须先检查每个进程在内存的驻留页面是否足够多。如果都已足够多，此时便可以从 外存调入新的作业，不会因新作业的调入而导致缺页率的增加：反之，如果有些进程的内存 页面不足，则应首先为那些缺页率居高的作业增加新的物理块，此时将不再调入新的作业。\n\n3.利用\"L=S\"准则调节缺页率 Denning于1980年提出了“L=S”的准则来调节多道程序度，其中L是缺页之间的平 均时间，S是平均缺页服务时间，即用于置换一个页面所需的时间。如果是L远比S大， 说明很少发生缺页，磁盘的能力尚未得到充分的利用：反之，如果是L比S小，则说明频 繁发生缺页，缺页的速度已超过磁盘的处理能力。只有当L与S接近时，磁盘和处理机都 可达到它们的最大利用率。理论和实践都已证明，利用“L=S”准则，对于调节缺页率是 十分有效的。\n\n4.选择暂停的进程 当多道程序度偏高时，已影响到处理机的利用率，为了防止发生“抖动”，系统必须 减少多道程序的数目。此时应基于某种原则选择暂停某些当前活动的进程，将它们调出到 磁盘上，以便把腾出的内存空间分配给缺页率发生偏高的进程。系统通常都是采取与调度 程序一致的策略，即首先选择暂停优先级最低的进程，若需要，再选择优先级较低的进程。 当内存还显拥挤时，还可进一步选择暂停一个并不十分重要、但却较大的进程，以便能释 放出较多的物理块，或者暂停剩余执行时间最多的进程等。 /5.5请求分段存储管理方式 在分页基础上建立的请求分页式虚拟存储器系统，是以页面为单位进行换入、换出的。 172"
          }
        ]
      },
      {
        "二级标题": "5.5_请求分段存储管理方式",
        "三级内容": [
          {
            "三级标题": "5.4.3 “抖动”的预防方法 一一← 为了保证系统具有较大的吞吐量，必须防止“抖动”的发生。目前已有许多防止“抖 动”发生的方法。这些方法几乎都是采用调节多道程序度来控制“抖动”发生的。下面介 绍几个较常用的预防“抖动”发生的方法。",
            "正文": "1.采取局部置换策略 在页面分配和置换策略中，如果采取的是可变分配方式，则为了预防发生“抖动”， 可采取局部置换策略。根据这种策略，当某进程发生缺页时，只能在分配给自己的内存空 间内进行置换，不允许从其它进程去获得新的物理块。这样，即使该进程发生了“抖动”， 也不会对其它进程产生影响，于是可把该进程“抖动”所造成的影响限制在较小的范围内。 该方法虽然简单易行，但效果不是很好，因为在某进程发生“抖动”后，它还会长期处在 磁盘I/O的等待队列中，使队列的长度增加，这会延长其它进程缺页中断的处理时间，也 就是延长了其它进程对磁盘的访问时间。\n\n2.把工作集算法融入到处理机调度中 当调度程序发现处理机利用率低下时，它将试图从外存调入一个新作业进入内存，来 改善处理机的利用率。如果在调度中融入了工作集算法，则在调度程序从外存调入作业之 前，必须先检查每个进程在内存的驻留页面是否足够多。如果都已足够多，此时便可以从 外存调入新的作业，不会因新作业的调入而导致缺页率的增加：反之，如果有些进程的内存 页面不足，则应首先为那些缺页率居高的作业增加新的物理块，此时将不再调入新的作业。\n\n3.利用\"L=S\"准则调节缺页率 Denning于1980年提出了“L=S”的准则来调节多道程序度，其中L是缺页之间的平 均时间，S是平均缺页服务时间，即用于置换一个页面所需的时间。如果是L远比S大， 说明很少发生缺页，磁盘的能力尚未得到充分的利用：反之，如果是L比S小，则说明频 繁发生缺页，缺页的速度已超过磁盘的处理能力。只有当L与S接近时，磁盘和处理机都 可达到它们的最大利用率。理论和实践都已证明，利用“L=S”准则，对于调节缺页率是 十分有效的。\n\n4.选择暂停的进程 当多道程序度偏高时，已影响到处理机的利用率，为了防止发生“抖动”，系统必须 减少多道程序的数目。此时应基于某种原则选择暂停某些当前活动的进程，将它们调出到 磁盘上，以便把腾出的内存空间分配给缺页率发生偏高的进程。系统通常都是采取与调度 程序一致的策略，即首先选择暂停优先级最低的进程，若需要，再选择优先级较低的进程。 当内存还显拥挤时，还可进一步选择暂停一个并不十分重要、但却较大的进程，以便能释 放出较多的物理块，或者暂停剩余执行时间最多的进程等。 /5.5请求分段存储管理方式 在分页基础上建立的请求分页式虚拟存储器系统，是以页面为单位进行换入、换出的。 172  第五章虚拟存储器 而在分段基础上所建立的请求分段式虚拟存储器系统，则是以分段为单位进行换入、换出 的。它们在实现原理以及所需要的硬件支持上都是十分相似的。在请求分段系统中，程序 运行之前，只需先调入少数几个分段(不必调入所有的分段)便可启动运行。当所访问的段 不在内存中时，可请求OS将所缺的段调入内存。像请求分页系统一样，为实现请求分段 存储管理方式，同样需要一定的硬件支持和相应的软件。"
          },
          {
            "三级标题": "5.5.1 请求分段中的硬件支持 为了实现请求分段式存储管理，应在系统中配置多种硬件机构，以支持快速地完成请 求分段功能。与请求分页系统相似，在请求分段系统中所需的硬件支持有段表机制、缺段 中断机构，以及地址变换机构。",
            "正文": "1.请求段表机制 在请求分段式管理中所需的主要数据结构是请求段表。在该表中除了具有请求分页机 制中有的访问字段A、修改位M、存在位P和外存始址四个字段外，还增加了存取方式字 段和增补位。这些字段供程序在调进、调出时参考。下面给出请求分段的段表项。 段名」段长 段基址 存取方式|访问字段A修改位M丨存在位P」增补位 」外存始址 在段表项中，除了段名（号）、段长、段在内存中的起始地址（段基址)外，还增加了以下 字段：\n\n（1）存取方式。由于应用程序中的段是信息的逻辑单位，可根据该信息的属性对它实 施保护，故在段表中增加存取方式字段，如果该字段为两位，则存取属性是只执行、只读 和允许读/写。\n\n（2）访问字段A。其含义与请求分页的相应字段相同，用于记录该段被访问的频繁程 度。提供给置换算法选择换出页面时参考。\n\n（3）修改位M。该字段用于表示该页在进入内存后是否已被修改过，供置换页面时 参考。\n\n(4）存在位P。该字段用于指示本段是否已调入内存，供程序访问时参考。\n\n（5）增补位。这是请求分段式管理中所特有的字段，用于表示本段在运行过程中是否 做过动态增长。\n\n（6）外存始址。指示本段在外存中的起始地址，即起始盘块号。\n\n2.缺段中断机构 在请求分段系统中采用的是请求调段策略。每当发现运行进程所要访问的段尚未调入 内存时，便由缺段中断机构产生一缺段中断信号，进入OS后，由缺段中断处理程序将所 需的段调入内存。与缺页中断机构类似，缺段中断机构同样需要在一条指令的执行期间产 生和处理中断，以及在一条指令执行期间，可能产生多次缺段中断。但由于分段是信息的 逻辑单位，因而不可能出现一条指令被分割在两个分段中，和一组信息被分割在两个分段 中的情况。缺段中断的处理过程如图5-12所示。由于段不是定长的，这使对缺段中断的处 理要比对缺页中断的处理复杂。 173  计算机操作系统 虚段S不在内存 阻塞请求进程 内存中有合适的 否 空闲区吗？ 是 内存中所有空闲 否 从外存读入段S 分区之和≥S？ 是 修改段表及内存空区链 空区拼接，以形成 淘汰一个或几个实段， 个合适的空区 以形成一个合适空区 唤醒请求进程 A 返回 图5-12请求分段系统中的中断处理过程\n\n3.地址变换机构 请求分段系统中的地址变换机构是在分段系统地址变换机构的基础上形成的。因为被访 问的段并非全在内存，所以在地址变换时，若发现所要访问的段不在内存，必须先将所缺的 段调入内存，并修改段表，然后才能再利用段表进行地址变换。为此，在地址变换机构中又 增加了某些功能，如缺段中断的请求及处理等。图5-13示出了请求分段系统的地址变换过程。 访问[s][w] 否 分段越界 w≤段长? 中断处理 是 否 分段保护 符合存取方式？ 中断处理 是 否 缺段 段S在主存？ 中断处理 是 修改访问字段，如 写访问，置修改位=1 形成访问主存地址（A）=（主存始址)+（位移量w) 访问[s][w] 图5-13请求分段系统的地址变换过程 174  第五章虚拟存储器人"
          },
          {
            "三级标题": "5.5.2 分段的共享与保护 本章前面曾介绍过分段存储管理方式的优点是便于实现分段的共享与保护，也扼要地 介绍了实现分段共享的方法。本小节将进一步介绍为了实现分段共享，还应配置相应的数 据结构一共享段表，以及对共享段进行操作的过程。",
            "正文": "1.共享段表 为了实现分段共享，可在系统中配置一张共享段表，所有各共享段都在共享段表中占 有一表项。在表项的上面记录了共享段的段号、段长、内存始址、状态(存在)位、外存始 址以及共享计数等信息。接下去就是记录了共享此分段的每个进程的情况。共享段表如图 5-14所示，其中各项说明如下：\n\n（1）共享进程计数count。非共享段仅为一个进程所需要。当进程不再需要该段时，可 立即释放该段，并由系统回收该段所占用的空间。而共享段是为多个进程所需要的，为记 录有多少进程正在共享该分段，须设置共享进程计数count。当某进程不再需要而释放它时， 需要它，仅当所有共享该段的进程全都不再需要它时，此时count为0，才由系统回收该段 所占内存区。\n\n（2）存取控制字段。对于一个共享段，应为不同的进程赋予不同的存取权限。例如， 对于文件主，通常允许他读和写；而对其它进程，则可能只允许读，甚至只允许执行。\n\n（3）段号。对于一个共享段，在不同的进程中可以具有不同的段号，每个进程可用自 已进程的段号去访问该共享段。 段名 段长 内存始址 状态 外存始址 共享进程计数count 状态 进程名 进程号 段号 存取控制 ： 共享段表 图5-14共享段表项\n\n2.共享段的分配与回收 1）共享段的分配 由于共享段是供多个进程所共享的，因此，对共享段的内存分配方法，与非共享段的 内存分配方法有所不同。在为共享段分配内存时，对第一个请求使用该共享段的进程，由 系统为该共享段分配一物理区，再把共享段调入该区，同时将该区的始址填入请求进程的 段表的相应项中，还须在共享段表中增加一表项，填写请求使用该共享段的进程名、段号 和存取控制等有关数据，把count置为1。当又有其它进程需要调用该共享段时，由于该共 享段已被调入内存，故此时无须再为该段分配内存，而只需在调用进程的段表中增加一表 175  计算机操作系统 项，填写该共享段的物理地址。在共享段的段表中增加一个表项，填上调用进程的进程名、 该共享段在本进程中的段号、存取控制等，再执行count=count+1操作，以表明有两个进程 共享该段。以后，凡有进程需要访问此共享段的，都按上述方式在共享段的段表中增加一 个表项。 2）共享段的回收 当共享此段的某进程不再需要该段时，应将该段释放，包括撤消在该进程段表中共享 段所对应的表项，以及执行count=count-1操作。若结果为0，则须由系统回收该共享段的 物理内存，以及取消在共享段表中该段所对应的表项，表明此时已没有进程使用该段；否 则（减1结果不为0)，只是取消调用者进程在共享段表中的有关记录。\n\n3.分段保护 在分段系统中，由于每个分段在逻辑上是相对独立的，因而比较容易实现信息保护。 目前，常采用以下几种措施来确保信息的安全。 1）越界检查 越界检查是利用地址变换机构来完成的。为此，在地址变换机构中设置了段表寄存器， 用于存放段表始址和段表长度信息。在进行地址变换时，首先将逻辑地址空间的段号与段 表长度进行比较，如果段号等于或大于段表长度，将发出地址越界中断信号。此外，还在 段表中为每个段设置有段长字段，在进行地址变换时，还要检查段内地址是否等于或大于 段长，若大于段长，将产生地址越界中断信号，从而保证了每个进程只能在自已的地址空 间内运行。 2）存取控制检查 存取控制检查是以段为基本单位进行的。为此，在段表的每个表项中都设置了一个“存 取控制”字段，用于规定对该段的访问方式。通常的访问方式有：\n\n（1）只读，即只允许进程对该段中的程序或数据进行读访问；\n\n(2）只执行，即只允许进程调用该段去执行，但不准读该段的内容，更不允许对该段 执行写操作；\n\n(3）读/写，即允许进程对该段进行读/写访问。 对于共享段而言，存取控制就显得尤为重要，因而对不同的进程应赋予不同的读写权 限。这时，既要保证信息的安全性，又要满足运行需要。例如，对于一个企业的财务账目， 应该只允许会计人员进行读或写，充许领导及有关人员去读。而对于一般人员，则既不准 读，更不能写。值得一提的是，这里所介绍的存取控制检查是基于硬件实现的，它能较好 地保证信息的安全，因为攻击者很难对存取控制字段进行修改。 3）环保护机构 这是一种功能较完善的保护机制。在该机制中规定：低编号的环具有高优先权。OS核 心处于0号环内；某些重要的实用程序和操作系统服务占居中间环；而一般的应用程序， 则被安排在外环上。在环系统中，程序的访问和调用应遵循以下规则：\n\n(1）一个程序可以访问驻留在相同环或较低特权环(外环)中的数据；\n\n(2）一个程序可以调用驻留在相同环或较高特权环（内环)中的服务。 图5-15示出了在环保护机构中的调用程序和数据访问的关系。 176  第五章虚拟存储器 周用 数据访向 返 O 数据访问 (a)程序间的控制传输 (b)数据访问 图5-15环保护机构\n\n1.常规存储器管理方式具有哪两大特征？它对系统性能有何影响？\n\n2.什么是程序运行时的时间局限性和空间局限性？\n\n3.虚拟存储器有哪些特征？其中最本质的特征是什么？\n\n4.实现虚拟存储器需要哪些硬件支持？\n\n5.实现虚拟存储器需要哪几个关键技术？\n\n6.在请求分页系统中，页表应包括哪些数据项？每项的作用是什么？\n\n7.试比较缺页中断机构与一般的中断，它们之间有何明显的区别？\n\n8.试说明请求分页系统中的地址变换过程。\n\n9.何谓固定分配局部置换和可变分配全局置换的内存分配策略？\n\n10.在请求分页系统中，应从何处将所需页面调入内存？\n\n11.试说明在请求分页系统中页面的调入过程。\n\n12.在请求分页系统中，常采用哪几种页面置换算法？\n\n13.在一个请求分页系统中，采用FIFO页面置换算法时，假如一个作业的页面走向为\n\n4、3、2、1、4、3、5、4、3、2、1、5，当分配给该作业的物理块数M分别为3和4时， 试计算在访问过程中所发生的缺页次数和缺页率，并比较所得结果。\n\n14.实现LRU算法所需的硬件支持是什么？\n\n15.试说明改进型Clock置换算法的基本原理。\n\n16.影响页面换进换出效率的若干因素是什么？\n\n17.页面缓冲算法的主要特点是什么？它是如何降低页面换进、换出的频率的？\n\n18.在请求分页系统中，产生“抖动”的原因是什么？\n\n19.何谓工作集？它是基于什么原理确定的？\n\n20.当前可以利用哪几种方法来防止“抖动”？\n\n21.试说明如何利用“L=S”准则来调节缺页率，以避免“抖动”的发生。\n\n22.为了实现请求分段式存储管理，应在系统中增加配置哪些硬件机构？\n\n23.在请求段表机制中，应设置哪些段表项？\n\n24.说明请求分段系统中的缺页中断处理过程。\n\n25.请对共享段表中的各项作简要说明。\n\n26.如何实现共享分段的分配和回收？ 177"
          }
        ]
      }
    ]
  }
]
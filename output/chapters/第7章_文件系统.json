[
  {
    "一级标题": "第7章_文件系统",
    "二级内容": [
      {
        "二级标题": "7.1_文件的基本概念",
        "三级内容": [
          {
            "三级标题": "7.1.1 数据项、记录和文件",
            "正文": "1.数据项 在文件系统中，数据项是最低级的数据组织形式，可把它分成以下两种类型：\n\n（1）基本数据项。这是用于描述一个对象的某种属性的字符集，是数据组织中可以命 名的最小逻辑数据单位，又称为字段。例如，用于描述一个学生的基本数据项有：学号、 姓名、年龄、所在班级等。\n\n(2）组合数据项。是由若干个基本数据项组成的，简称组项。例如工资是个组项，它 可由基本工资、工龄工资和奖励工资等基本项所组成。 基本数据项除了数据名外，还应有数据类型。因为基本项仅描述某个对象的属性，根 据属性的不同，需要用不同的数据类型来描述。例如，在描述学生的学号时应使用整数； 描述学生的姓名则应使用字符串（含汉字)：描述性别时可用逻辑变量或汉字。可见，由数 则称为“值”。例如，学号/30211、姓名/王有年、性别/男等。\n\n2.记录 记录是一组相关数据项的集合，用于描述一个对象在某方面的属性。一个记录应包含 221  计算机操作系统 哪些数据项，取决于需要描述对象的哪个方面。由于对象所处的环境不同可把他作为不同 的对象。例如，一个学生，当把他作为班上的一名学生时，对他的描述应使用学号、姓名、 年龄及所在系班，也可能还包括他所学过的课程的名称、成绩等数据项。但若把学生作为 一个医疗对象时，对他描述的数据项则应使用诸如病历号、姓名、性别、出生年月、身高、 体重、血压及病史等项。 一个或几个数据项，把它们的集合称为关键字(key)。或者说，关键字是唯一能标识一个记 录的数据项。通常，只需用一个数据项作为关键字。例如，前面的病历号或学号便可用来 从诸多记录中标识出唯一的一个记录。然而有时找不到这样的数据项，只好把几个数据项 定为能在诸多记录中唯一地标识出某个记录的关键字。\n\n3.文件 文件是指由创建者所定义的、具有文件名的一组相关元素的集合，可分为有结构文件 和无结构文件两种。在有结构的文件中，文件由若干个相关记录组成，而无结构文件则被 看成是一个字符流。文件在文件系统中是一个最大的数据单位，它描述了一个对象集。例 如，可以将一个班的学生记录作为一个文件。 文件属性可以包括：\n\n（1）文件类型。可以从不同的角度来规定文件的类型，如源文件、目标文件及可执行 文件等。\n\n(2）文件长度。文件长度指文件的当前长度，长度的单位可以是字节、字或块，也可 能是最大允许的长度。\n\n(3）文件的物理位置。该项属性通常用于指示文件所在的设备及所在设备中地址的指针。\n\n（4）文件的建立时间。这是指最后一次的修改时间等。 图7-1示出了文件、记录和数据项之间的层次关系。 文件 记录1 记录2 .·. 记录n 数据项1 数据项2 数据项n *.. 图7-1文件、记录和数据项之间的层次关系"
          },
          {
            "三级标题": "7.1.2 文件名和类型 一←",
            "正文": "1.文件名和扩展名\n\n(1）文件名。在不同的系统之间，对文件名的规定是不同的，在一些老的系统中，名 字的长度受到限制。例如，MS-DOS最多只允许8个字符，老版的UNIX系统支持14个 字符。另外，一些特殊字符也规定不能用于文件名，如空格，因其常被用作分隔命令、参 数和其它数据项的分隔符。近年推出的不少OS已放宽了这种限制，如WindowsNT及以 222  第七章文件管理 后的Windows2000/XP/Vista/7/8等所采用的NTFS文件系统，便可以很好地支持长文件名。 另外，在早期的OS中，如MS-DOS和Windows95等，是不区分大小写字母的，如MYFILE、 MYfile和myfile都是指同一个文件。但在UNIX和Linux系统中是区分大小写的，因此， 上面的三个文件名字用于标识不同的文件。\n\n（2）扩展名。扩展名是添加在文件名后面的若干个附加字符，又称为后缀名，用于指 示文件的类型。它可以方便系统和用户了解文件的类型，它是文件名中的重要组成部分。 在大多数系统中，用圆点“”将文件名和扩展名分开。例如，myfile.txt中的扩展名txt， 表示该文件是文本文件：myprog.bin中的扩展名bin，表示该文件是一个可执行的二进制文 件。扩展名的长度一般是1～4个字符。\n\n2.文件类型 为了便于管理和控制文件，将文件分成若干种类型。由于不同的系统对文件管理方式 的不同，因此它们对文件的分类方法也有很大差异。下面是常用的几种文件分类方法。 1）按用途分类 根据文件的性质和用途的不同，可将文件分为三类：\n\n（1）系统文件，这是指由系统软件构成的文件。大多数的系统文件只允许用户调用， 但不充许用户去读，更不允许修改；有的系统文件不直接对用户开放。\n\n(2）用户文件，指由用户的源代码、目标文件、可执行文件或数据等所构成的文件。 用户将这些文件委托给系统保管。\n\n（3）库文件，这是由标准子例程及常用的例程等所构成的文件。这类文件允许用户调 用，但不充许修改。 2）按文件中数据的形式分类 按这种方式分类，也可把文件分为三类：\n\n(1）源文件，这是指由源程序和数据构成的文件。通常，由终端或输入设备输入的源 程序和数据所形成的文件都属于源文件。它通常是由ASCI码或汉字所组成的。\n\n（2）目标文件，这是指把源程序经过编译程序编译过，但尚未经过链接程序链接的目 标代码所构成的文件。目标文件所使用的后缀名是“.obj”。\n\n（3）可执行文件，这是指把编译后所产生的目标代码经过链接程序链接后所形成的文 件。其后缀名是.exe。 3）按存取控制属性分类 根据系统管理员或用户所规定的存取控制属性，可将文件分为三类：\n\n（1）只执行文件，该类文件只允许被核准的用户调用执行，不允许读和写。\n\n(2）只读文件，该类文件只充许文件主及被核准的用户去读，不允许写。\n\n(3）读写文件，这是指允许文件主和被核准的用户去读或写的文件。 4）按组织形式和处理方式分类 根据文件的组织形式和系统对其处理方式的不同，可将文件分为三类：\n\n（1）普通文件，是由ASCII码或二进制码组成的字符文件，一般用户建立的源程序文 件、数据文件以及操作系统自身代码文件、实用程序等都是普通文件。\n\n(2）目录文件，是由文件目录组成的文件，通过目录文件可以对其下属文件的信息进 223  计算机操作系统 行检索，对其可执行的文件进行操作，与普通文件一样。\n\n(3）特殊文件，特指系统中的各类I/O设备。为了便于统一管理，系统将所有的IVO设 备都视为文件，并按文件方式提供给用户使用，如目录的检索、权限的验证等都与普通文 件相似，只是对这些文件的操作将由设备驱动程序来完成。"
          },
          {
            "三级标题": "7.1.3 文件系统的层次结构 → 如图7-2所示，文件系统的模型可分为三个层次：最底层是对象及其属性，中间层是 对对象进行操纵和管理的软件集合，最高层是文件系统提 用户（程序） 供给用户的接口。",
            "正文": "1.对象及其属性 文件管理系统管理的对象如下： 文件系统接口\n\n（1）文件。在文件系统中有着各种不同类型的文件， 对对象操纵和管理的软件集合 它们都作为文件管理的直接对象。 对象及其属性\n\n(2）目录。为了方便用户对文件的存取和检索，在文 件系统中必须配置目录，在目录的每个目录项中，必须含 图7-2文件系统模型 有文件名、对文件属性的说明，以及该文件所在的物理地 址（或指针）。对目录的组织和管理，是方便用户和提高对文件存取速度的关键。\n\n（3）磁盘（磁带）存储空间。文件和目录必定占用存储空间，对这部分空间的有效管理， 不仅能提高外存的利用率，而且能提高对文件的存取速度。\n\n2.对对象操纵和管理的软件集合 该层是文件管理系统的核心部分。文件系统的功能大多是在这一层实现的，其中包括有： ①对文件存储空间的管理；②对文件目录的管理；③用于将文件的逻辑地址转换为物理 地址的机制；④对文件读和写的管理；对文件的共享与保护等功能。在实现这些功能 时，OS通常都采取了层次组织结构，即在每一层中都包含了一定的功能，处于某个层次的 软件，只能调用同层或更低层次中的功能模块。 一般地，把与文件系统有关的软件分为四个层次：\n\n（1）I/O控制层，是文件系统的最低层，主要由磁盘驱动程序等组成，也可称为设备驱 动程序层。\n\n（2）基本文件系统层，主要用于处理内存与磁盘之间数据块的交换。\n\n（3）基本I/O管理程序，该层用于完成与磁盘I/O有关的事务，如将文件逻辑块号转换 为物理块号，管理磁盘中的空闲盘块，IV/O缓冲的指定等。\n\n（4）逻辑文件系统，用于处理与记录和文件相关的操作，如允许用户和应用程序使用 符号文件名访问文件及记录，实现对文件和记录的保护等。\n\n3.文件系统的接口 为方便用户的使用，文件系统以接口的形式提供了一组对文件和记录操作的方法和手 段。通常是下面两种类型的接口：\n\n(1）命令接口，是指作为用户与文件系统直接交互的接口，用户可通过键盘终端键入 命令取得文件系统的服务。 224"
          }
        ]
      },
      {
        "二级标题": "7.2_文件的逻辑结构",
        "三级内容": [
          {
            "三级标题": "7.1.4 文件操作 一→ 用户可以通过文件系统提供的系统调用实施对文件的操作。最基本的文件操作包括创 建、删除、读、写和设置文件的读/写位置等。实际上，一般的OS都提供了更多对文件的 操作，如打开和关闭一个文件及改变文件名等操作。",
            "正文": "1.最基本的文件操作 最基本的文件操作包含下述内容：\n\n（1）创建文件。在创建一个新文件时，要为新文件分配必要的外存空间，并在文件目 录中为之建立一个目录项：目录项中应记录新文件的文件名及其在外存的地址等属性。\n\n(2）删除文件。在删除时，应先从目录中找到要删除文件的目录项，使之成为空项， 然后回收该文件所占用的存储空间。 外存中的位置；在目录项中，还有一个指针用于对文件的读/写。\n\n（4）写文件。在写文件时，根据文件名查找目录，找到指定文件的目录项，再利用目 录中的写指针进行写操作。\n\n(5）设置文件的读/写位置。前面所述的文件读/写操作，都只提供了对文件顺序存取的 手段，即每次都是从文件的始端进行读或写：设置文件读/写位置的操作，通过设置文件 因此可以改顺序存取为随机存取。\n\n2.文件的“打开”和“关闭”操作 当用户要求对一个文件实施多次读/写或其它操作时，每次都要从检索目录开始。为了 避免多次重复地检索目录，在大多数OS中都引[入了“打开”（open)这一文件系统调用，当 用户第一次请求对某文件进行操作时，须先利用open系统调用将该文件打开。所谓“打开” 是指系统将指名文件的属性（包括该文件在外存上的物理位置），从外存拷贝到内存打开文 件表的一个表目中，并将该表目的编号（或称为索引号）返回给用户。换而言之，“打开”， 就是在用户和指定文件之间建立起一个连接。此后，用户可通过该连接直接得到文件信息， 从而避免了再次通过目录检索文件，即当用户再次向系统发出文件操作请求时，系统根据 用户提供的索引号可以直接在打开文件表中查找到文件信息。这样不仅节省了大量的检索 开销，也显著地提高了对文件的操作速度。如果用户已不再需要对该文件实施相应的操作， 可利用“关闭”（close)系统调用来关闭此文件，即断开此连接，Os将会把该文件从打开文 件表中的表目上删除掉。\n\n3.其它文件操作 OS为用户都提供了一系列文件操作的系统调用，其中最常用的一类是有关对文件属性 的操作，即允许用户直接设置和获得文件的属性，如改变已存文件的文件名、改变文件的 拥有者(文件主)、改变对文件的访问权，以及查询文件的状态（包括文件类型、大小和拥有 225  计算机操作系统 者以及对文件的访问权等）。另一类是有关目录的操作，如创建一个目录，删除一个目录， 改变当前目录和工作目录等。此外，还有用于实现文件共享的系统调用，以及用于对文件 系统进行操作的系统调用等。 /7.2 2文件的逻辑结构 用户所看到的文件称为逻辑文件，它是由一系列的逻辑记录组成的。从用户的观点而 言，文件的逻辑记录是能够被存取的基本单位。在进行文件系统高层设计时，所涉及的主 要问题是文件的逻辑结构，即如何将这些逻辑记录构成一个逻辑文件。在进行文件系统低 层设计时，所涉及的主要问题是文件的物理结构，即如何将一个文件存储在外存上。由此 可见，在系统中的所有文件都存在着以下两种形式的文件结构：\n\n(1）文件的逻辑结构（FileLogicalStructure)。这是从用户观点出发所观察到的文件组织 形式，即文件是由一系列的逻辑记录组成的，是用户可以直接处理的数据及其结构，它独 立于文件的物理特性，又称为文件组织(FileOrganization)。\n\n(2）文件的物理结构，又称为文件的存储结构。这是指系统将文件存储在外存上所形 成的一种存储组织形式，是用户不能看见的。文件的物理结构不仅与存储介质的存储性能 有关，而且与所采用的外存分配方式有关。无论是文件的逻辑结构，还是其物理结构，都 会影响对文件的检索速度。"
          },
          {
            "三级标题": "7.2.1 文件逻辑结构的类型 对文件逻辑结构所提出的基本要求，首先是有助于提高对文件的检索速度，即在将大 批记录组成文件时，应采用一种有利于提高检索记录速度和效率的逻辑结构形式。其次是 该结构应方便对文件进行修改，即便于在文件中增加、删除和修改一个或多个记录。第三 是降低文件存放在外存上的存储费用，即尽量减少文件占用的存储空间，不要求大片的连 续存储空间。 文件的逻辑结构从是否有结构来分，可分为两大类：一类是有结构文件，这是指由一 个以上的记录构成的文件，故又把它称为记录式文件；另一类是无结构文件，这是指由字 符流构成的文件，敌又称为流式文件。从文件的组织方式来分，可以分为顺序文件、索引 文件和索引顺序文件几种。",
            "正文": "1.按文件是否有结构分类 1）有结构文件 在记录式文件中，每个记录都用于描述实体集中的一个实体，各记录有着相同或不同 数目的数据项。记录的长度可分为定长和不定长两类。\n\n(1）定长记录，是指文件中所有记录的长度都是相同的，所有记录中的各数据项都处 在记录中相同的位置，具有相同的顺序和长度，文件的长度用记录数目表示。定长记录能 有效地提高检索记录的速度和效率，能方便对文件进行处理和修改，所以这是目前较常用 的一种记录格式，被广泛用于数据处理中。\n\n(2）变长记录，是指文件中各记录的长度不相同。产生变长记录的原因可能是由于一 226  第七章文件管理 个记录中所包含的数据项数目并不相同，如书的著作者、论文中的关键词等，也可能是数 据项本身的长度不定，例如，病历记录中的病因、病史，科技情报记录中的摘要等。不论 是哪一种，在处理前，每个记录的长度都是可知的。对变长记录的检索速度慢，也不便于 对文件进行处理和修改。但由于变长记录很适合于某些场合的需要，所以也是目前较常用 的一种记录格式，被广泛用于许多商业领域。 2）无结构文件 文件是由定长或变长记录构成的），那么在系统中运行的大量的源程序、可执行文件、库函 数等，所采用的就是无结构的文件形式，即流式文件。其文件的长度是以字节为单位的。 对流式文件的访问，则是利用读、写指针来指出下一个要访问的字符。可以把流式文件看 做是记录式文件的一个特例：一个记录仅有一个字节。\n\n2.按文件的组织方式分类 根据文件的组织方式，可把有结构文件分为三类：\n\n(1）顺序文件，指由一系列记录按某种顺序排列所形成的文件，其中的记录可以是定 长记录或可变长记录。\n\n(2）索引文件，指为可变长记录文件建立一张索引表，为每个记录设置一个表项，以 加速对记录的检索速度。\n\n(3）索引顺序文件，这是顺序文件和索引文件相结合的产物，这里，在为每个文件建 录建立一个索引表项。"
          },
          {
            "三级标题": "7.2.2 顺序文件（SequentialFile） 一 文件的逻辑结构中记录的组织方式来源于用户和系统在管理上的目标和需求。不同的 目标和需求产生了多种组织方式，从而形成了多种逻辑结构的文件。其中最基本也是最常 见的是顺序文件。",
            "正文": "1.顺序文件的排列方式 在顺序文件中的记录，可以按照各种不同的顺序进行排列。一般地，可分为两种情况：\n\n(1）串结构。在串结构文件中的记录，通常是按存入时间的先后进行排序的，各记录之间 的顺序与关键字无关。在对串结构文件进行检索时，每次都必须从头开始，逐个记录地查找， 直到找到指定的记录或查完所有的记录为止。显然，对串结构文件进行检索是比较费时的。\n\n(2）顺序结构。由用户指定一个字段作为关键字，它可以是任意类型的变量，其中最 简单的是正整数，如0到N－1。为了能唯一地标识每一个记录，必须使每个记录的关键字 值在文件中具有唯一性。这样，文件中的所有记录就可以按关键字来排序，可以按关键字 的大小进行排序，或按其英文字母顺序排序。在对顺序结构文件进行检索时，还可以利用 某种有效的查找算法，如折半查找法、插值查找法、跳步查找法等方法提高检索效率。故 顺序结构文件可有更高的检索速度和效率。\n\n2.顺序文件的优缺点 顺序文件的最佳应用场合是在对文件中的记录进行批量存取时（即每次要读或写一大 227  计算机操作系统 批记录）。所有逻辑文件中顺序文件的存取效率是最高的。此外，对于顺序存储设备（如磁 带)，也只有顺序文件才能被存储并能有效地工作。 在交互应用的场合，如果用户(程序)要求查找或修改单个记录，系统需要在文件的记 录中逐个地查找，此时，顺序文件所表现出来的性能就可能很差。尤其是当文件较大时， 情况更为严重。例如，对于一个含有10*个记录的顺序文件，如果采用顺序查找法，查找 到一个指定的记录，平均需要查找5x10”次。如果顺序文件中是可变长记录，则需付出的 开销将更大，因此也限制了顺序文件的长度。 顺序文件的另一个缺点是，如果想增加或删除一个记录都比较困难。为了解决这一问 题，可以为顺序文件配置一个运行记录文件（LogFile）或称为事务文件（TransactionFile)，把 试图增加、删除或修改的信息记录于其中，规定每隔一定时间（例如4小时），将运行记录 文件与原来的主文件加以合并，产生一个按关键字排序的新文件。"
          },
          {
            "三级标题": "7.2.3 记录寻址 为了访问顺序文件中的一条记录，首先应找到该记录的地址。查找记录地址的方法有 隐式寻址和显式寻址方式两种。",
            "正文": "1.隐式寻址方式 对于定长记录的顺序文件，如果已知当前记录的逻辑地址，便很容易确定下一个记录 的逻辑地址。在读一个文件时，为了读文件，在系统中应设置一个读指针Rptr（见图7-3)， 指向下一个记录的首地址，其中的L为记录长度。类似地，为了写文件，也应设置一个写 指针Wpt，使之指向要写的记录的首地址。同样，在每写完一个记录时，又须执行操作： Wptr=Wptr+ L。 0 Lo }L Ro ILo.- L Ro R L Lo+1 2L L R2 L 3L R R }L L+L,+2 4L (L+1) Wptr- Rptr iL Li IL R; R; (i+1)L 3 L (L+1) k=0 ： (a)定长记录文件 (b)变长记录文件 图7-3定长和变长记录文件 对于变长记录的顺序文件，与顺序读或写时的情况相似，只是每次都需要从正在读（写） 的记录中读出该记录的长度。同样需要分别为它们设置读或写指针，但在每次读或写完一 个记录后，须将读或写指针加上L，L是刚读或刚写完的记录的长度。这种顺序访问的方 228  第七章文件管理 式可用于所有文件类型，其主要问题是，访问一个指定记录i，必须扫描或读取前面第0～ i-1个记录，访问速度是比较慢的。\n\n2.显式寻址方式 该方式可用于对定长记录的文件实现直接或随机访问。因为任何记录的位置都很容易 通过记录长度计算出来。而对于可变长度记录的文件则不能利用显式寻址方式实现直接或 随机访问，必须增加适当的支持机构方能实现。下面我们通过两种方式对定长记录实现随 机访问：\n\n（1）通过文件中记录的位置。此时，在文件中的每一个记录，可用从0到N-1的整数 录，可直接根据下式计算，获得第i个记录相对于第一个记录首址的地址：A=ixL。由于 获得任何记录地址的时间都非常短，故可利用这种方法对定长记录实现随机访问。 然而，对于可变长度记录则不能利用显式寻址方式，对一个文件实现随机访问，因为 要查找其中的第i个记录时须首先计算出该记录的首地址，为此，须顺序地查找每个记录， 从中获得相应记录的长度L，然后才能按下式计算出第i个记录的首址。假定在每个记录 前用一个字节指明该记录的长度，则 仁 A= ZL; +1 i=0 可见，用直接存取方法来访问变长记录文件中的一个记录是十分低效的，其检索时间也很 难令人接受，因此不能利用这种方法对可变长记录实现随机访问。\n\n（2）利用关键字。此时用户必须指定一个字段作为关键字，通过指定的关键字来查找 始，与每一个记录的关键字进行比较，直到找到匹配的记录。 值得一提的是，可变长度的、基于关键字的记录在商业领域很重要，用得也很多，但 因为在专门的数据库系统中，已经实现了对它们的支持，并能从不同的角度来管理组织和 显示数据，所以只有一些现代OS的文件系统对它们提供了支持。不过文件目录是个例外， 对目录的检索是基于利用关键字来进行检索的。其中关键字是符号文件名，我们将在7.3 节目录管理中介绍。"
          },
          {
            "三级标题": "7.2.4 索引文件（IndexFile) →",
            "正文": "1.按关键字建立索引 定长记录的文件可以通过简单的计算，很容易地实现随机查找。但变长记录文件查找 一个记录必须从第一个记录查起，一直顺序查找到目标记录为止，耗时很长。如果我们为 变长记录文件建立一张索引表，为主文件中的每个记录在索引表中分别设置一个表项，记 录指向记录的指针（即记录在逻辑地址空间的首址）以及记录的长度L，索引表按关键字排 序，因此其本身也是一个定长记录的顺序文件，这样就把对变长记录顺序文件的顺序检索 转变为对定长记录索引文件的随机检索，从而加快对记录检索的速度，实现直接存取。图 7-4示出了索引文件的组织形式。 229  计算机操作系统 完全索引完全索引部分索引 索引号长度m指针ptr Ro 0 mo R m .·. R; i u ... 逻辑文件 原始文件 索引表 （长度可变的记录） (a)具有单个索引表的索引文件 (b)具有多个索引表的索引文件 图7-4具有单个和多个索引表的索引文件 由于是按关键字建立的索引，所以在对索引文件进行检索时，可以根据用户（程序）提 供的关键字利用折半查找法去检索索引表，从中找到相应的表项。再利用该表项中给出的 指向记录的指针值去访问所需的记录。而每当要向索引文件中增加一个新记录时，便须对 索引表进行修改。由于索引文件可有较快的检索速度，敌它主要用于对信息处理的及时性 要求较高的场合。\n\n2.具有多个索引表的索引文件 使用按关键字建立索引表的索引文件与顺序文件一样，都只能按该关键字进行检索。 而实际应用情况往往是：不同的用户，为了不同的目的，希望能按不同的属性（或不同的关 键字）来检索一条记录。为实现此要求，需要为顺序文件建立多个索引表，即为每一种可能 成为检索条件的域（属性或关键字）都配置一张索引表。在每一个索引表中，都按相应的一 种属性或关键字进行排序。例如，有一个图书文件，为每一本书建立了一个记录，此时可 所用的关键字是书名，第三个索引表所用的关键字是作者姓名，第四个索引表所用的关键 字是出版时间等。这样用户也就可以根据自己的需要，用不同的关键字来进行检索。 索引文件的主要优点是，它将一个需要顺序查找的文件改造成一个可随机查找的文件， 极大地提高了对文件的查找速度。同时，利用索引文件插入和删除记录也非常方便，故索 引文件已成为当今应用最为广泛的一种文件形式。只是它除了有主文件外，还须配置一张 索引表，而且每个记录都要有一个索引项，因此增加了存储开销。"
          },
          {
            "三级标题": "7.2.5 索引[顺序文件（IndexSequentialFile） 一一",
            "正文": "1.索引顺序文件的特征 索引顺序文件是对顺序文件的一种改进，它基本上克服了变长记录的顺序文件不能随 机访问，以及不便于记录的删除和插入的缺点。但它仍保留了顺序文件的关键特征，即记 录是按关键字的顺序组织起来的。它又增加了两个新特征：一个是引入了文件索引表，通 过该表可以实现对索引l顺序文件的随机访问；另一个是增加了溢出(overflow)文件，用它来 记录新增加的、删除的和修改的记录。可见，索引顺序文件是顺序文件和索引文件相结合 的产物，能有效地克服变长记录文件的缺点，而且所付出的代价也不算太大。 230"
          }
        ]
      },
      {
        "二级标题": "7.3_文件的物理结构",
        "三级内容": [
          {
            "三级标题": "7.2.6 直接文件和哈希文件 一一←",
            "正文": "1.直接文件 采用前述几种文件结构对记录进行存取时，都须利用给定的记录键值，先对线性表或 231  计算机操作系统 链表进行检索，以找到指定记录的物理地址。然而对于直接文件，则可根据给定的关键字 直接获得指定记录的物理地址。换而言之，关键字本身就决定了记录的物理地址。这种由 关键字到记录物理地址的转换被称为键值转换(Keytoaddress transformation)。组织直接文 件的关键在于用什么方法进行从记录值到物理地址的转换。\n\n2.哈希（Hash)文件 这是目前应用最为广泛的一种直接文件。它利用Hash函数（或称散列函数）可将关键字 转换为相应记录的地址。但为了能实现文件存储空间的动态分配，通常由Hash函数所求得 的并非是相应记录的地址，而是指向某一目录表相应表目的指针，该表目的内容指向相应 记录所在的物理块，如图7-6所示。例如，若令K为记录键值，用A作为通过Hash函数 H的转换所形成的该记录在目录表中对应表目的位置，则有关系A=H(K)。通常，把Hash 函数作为标准函数存于系统中，供存取文件时调用。 目录表 Hash函数 键值 图7-6Hash文件的逻辑结构\n\n7.3文件自录 通常，在现代计算机系统中，都要存储大量的文件。为了能对这些文件实施有效的管 理，必须对它们加以妥善组织，这主要是通过文件目录实现的。文件目录也是一种数据结 构，用于标识系统中的文件及其物理地址，供检索时使用。对目录管理的要求如下：\n\n（1）实现“按名存取”。用户只须向系统提供所需访问文件的名字，便能快速准确地找 到指定文件在外存上的存储位置。这是目录管理中最基本的功能，也是文件系统向用户提 供的最基本的服务。\n\n(2）提高对目录的检索速度。通过合理地组织目录结构加快对目录的检索速度，从而 提高对文件的存取速度。这是在设计一个大、中型文件系统时所追求的主要目标。\n\n(3）文件共享。在多用户系统中，应允许多个用户共享一个文件。这样就只须在外存 中保留一份该文件的副本供不同用户使用，以节省大量的存储空间，并方便用户和提高文 件利用率。\n\n(4）允许文件重名。系统应允许不同用户对不同文件采用相同的名字，以便于用户按 照自己的习惯给文件命名和使用文件。 232  第七章文件管理"
          },
          {
            "三级标题": "7.3.1 文件控制块和索引结点 一一 为了能对一个文件进行正确的存取，必须为文件设置用于描述和控制文件的数据结构， 称之为“文件控制块”。文件管理程序可借助于文件控制块中的信息对文件施以各种操作。 控制块就是一个文件目录项。通常，一个文件目录也被看做是一个文件，称为目录文件。",
            "正文": "1.文件控制块FCB（FileControl Block) 即基本信息、存取控制信息及使用信息。 1）基本信息类 基本信息类包括：\n\n（1）文件名，指用于标识一个文件的符号名，在每个系统中，每一个文件都必须有唯 一的名字，用户利用该名字进行存取。\n\n（2）文件物理位置，指文件在外存上的存储位置，它包括存放文件的设备名、文件在 外存上的起始盘块号、指示文件所占用的盘块数，或字节数的文件长度。\n\n（3）文件逻辑结构，指示文件是流式文件还是记录式文件、记录数，文件是定长记录 还是变长记录等。\n\n(4）文件的物理结构，指示文件是顺序文件，还是链接式文件或索引文件。 2）存取控制信息类 存取控制信息类包括文件主的存取权限、核准用户的存取权限以及一般用户的存取权限。 3）使用信息类 使用信息类包括文件的建立日期和时间、文件上一次修改的日期和时间，以及当前使 用信息。这些信息包括当前已打开该文件的进程数，是否被其它进程锁住，文件在内存中 是否已被修改但尚未拷贝到盘上等。应该说明，对于不同OS的文件系统，由于功能不同， 可能只含有上述信息中的某些部分。 图7-7示出了MS-DOS中的文件控制块，其中含有文件名、文件所在的第一个盘块号、 文件属性、文件建立日期和时间及文件长度等。FCB的长度为32个字节，对360KB的软 盘，总共可包含112个FCB，共占4KB的存储空间。 第 文 扩 属 备 时 盘 一 件 展 块 块 名 名 性 用 期 数 号 图7-7MS-DOS的文件控制块\n\n2.索引结点 1）索引结点的引入 文件目录通常是存放在磁盘上的，当文件很多时，文件目录可能要占用大量的盘块。 在查找目录的过程中，必须先将存放目录文件的第一个盘块中的目录调入内存，然后将用 户所给定的文件名，与目录项中的文件名逐一比较。若未找到指定文件，还需要将下一盘 233  计算机操作系统 块的目录项调入内存。假设目录文件所占用的盘块数为N，按此方法查找，则查找一个目 录项，平均需要调入盘块(N+1)/2次。假如一个FCB为64B，盘块大小为1KB，则每个盘 块中只能存放16个FCB。若一个文件目录中共有640个FCB，需占用40个盘块，故平均 查找一个文件需启动磁盘20次。 稍加分析可以发现，在检索目录文件的过程中，只用到了文件名，仅当找到一个目录 理地址。而其它一些对该文件进行描述的信息在检索目录时一概不用。显然，这些信息在 检索目录时不需调入内存。为此，在有的系统中，如UNIX系统，便采用了把文件名与文 件描述信息分开的办法，亦即，使文件描述信息单独形成一个称为索引结点的数据结构， 简称为i结点。在文件目录中的每个目录项仅由文件名和指向该文件所对应的i结点的指针 所构成。在UNIX系统中一个目录仅占16个字节，其中14个字节是文件名，2个字节为i 结点指针。在1KB的盘块中可做64个目录项，这样，为找到一个文件，可使平均启动磁 盘次数减少到原来的1/4，大大节省了系统开销。图7-8示出了UNIX的文件目录项。 文件名 索引结点编号 文件名1 文件名2 1314 15 图7-8UNIX的文件目录 2）磁盘索引结点 这是存放在磁盘上的索引结点。每个文件有唯一的一个磁盘索引结点，它主要包括以 下内容：\n\n(1）文件主标识符，即拥有该文件的个人或小组的标识符；\n\n(2）文件类型，包括正规文件、目录文件或特别文件；\n\n(3）文件存取权限，指各类用户对该文件的存取权限；\n\n(4）文件物理地址，每一个索引结点中含有13个地址项，即iaddr(0)～iaddr(12)，它们 以直接或间接方式给出数据文件所在盘块的编号；\n\n(5）文件长度，指以字节为单位的文件长度；\n\n(6）文件连接计数，表明在本文件系统中所有指向该（文件的)文件名的指针计数；\n\n（7）文件存取时间，指出本文件最近被进程存取的时间、最近被修改的时间及索引结 点最近被修改的时间。 3）内存索引结点 这是存放在内存中的索引结点。当文件被打开时，要将磁盘索引结点拷贝到内存的索 引结点中，便于以后使用。在内存索引结点中又增加了以下内容：\n\n（1）索引结点编号，用于标识内存索引结点；\n\n(2）状态，指示i结点是否上锁或被修改；\n\n（3）访问计数，每当有一进程要访问此i结点时，将该访问计数加1，访问完再减1； 234  第七章文件管理\n\n（4）文件所属文件系统的逻辑设备号；\n\n(5）链接指针，设置有分别指向空闲链表和散列队列的指针。"
          },
          {
            "三级标题": "7.3.2 简单的文件目录 目录结构的组织，关系到文件系统的存取速度，也关系到文件的共享性和安全性。因 此，组织好文件的目录，是设计好文件系统的重要环节。目前最简单的文件目录形式是单 级目录和两级目录。",
            "正文": "1.单级文件目录 这是最简单的文件目录。在整个文件系统中只建立一张目录表，每个文件占一个目录项， 目录项中含文件名、文件扩展名、文件长度、文件类型、文件物理地址以及其它文件属性。 此外，为表明每个目录项是否空闲，又设置了一个状态位。单级文件目录如图7-9所示。 文件名 扩展名 文件长度 物理地址 文件类型 文件说明 状态位 文件名1 文件名2 文件名3 图7-9单级文件目录 每当要建立一个新文件时，必须先检索所有的目录项，以保证新文件名在目录中是唯 一的。然后再从目录表中找出一个空白目录项，填入新文件的文件名及其它说明信息，并 置状态位为1。删除文件时，先从目录中找到该文件的目录项，回收该文件所占用的存储 空间，然后再清除该目录项。 单级文件目录的优点是简单，但它只能实现目录管理中最基本的功能一一按名存取， 不能满足对文件目录的其它三方面的要求，具体如下：\n\n（1）查找速度慢。对于稍具规模的文件系统，为找到一个指定的目录项要花费较多的时 间。对于一个具有N个目录项的单级目录，为检索出一个目录项，平均需查找N/2个目录项。\n\n(2）不允许重名。在一个目录表中的所有文件，都不能与另一个文件有相同的名字。 然而，重名问题在多道程序环境下却又是难以避免的；即使在单用户环境下，当文件数超 过数百个时，也难于记忆。\n\n(3）不便于实现文件共享。通常，每个用户都有自己的名字空间或命名习惯。因此， 应当允许不同用户使用不同的文件名来访问同一个文件。然而，单级目录却要求所有用户 都只能用同一个名字来访问同一文件。简而言之，单级目录只能满足对目录管理的四点要 求中的第一点，因而，它只适用于单用户环境。\n\n2.两级文件目录 为了克服单级文件目录所存在的缺点，可以为每一个用户再建立一个单独的用户文件 目录UFD(UserFileDirectory)。这些文件目录具有相似的结构，它由用户所有文件的文件 控制块组成。此外，在系统中再建立一个主文件目录MFD(MasterFileDirectory)；在主文件 目录中，每个用户目录文件都占有一个目录项，其目录项中包括用户名和指向该用户目录文 件的指针。如图7-10所示，图中的主目录中示出了三个用户名，即Wang、Zhang和Gao。 235"
          }
        ]
      },
      {
        "二级标题": "7.4_文件目录",
        "三级内容": [
          {
            "三级标题": "7.3.3 树形结构目录(Tree-StructuredDirectory)",
            "正文": "1.树形目录 在现代OS中，最通用且实用的文件目录无疑是树形结构目录。它可以明显地提高对 236  第七章文件管理 目录的检索速度和文件系统的性能。主目录在这里被称为根目录，在每个文件目录中，只 能有一个根目录，每个文件和每个目录都只能有一个父目录。把数据文件称为树叶，其它 的目录均作为树的结点，或称为子目录。图7-11示出了树形结构目录。 图7-11多级目录结构 图中，用方框代表目录文件，圆圈代表数据文件。在该树形结构目录中，主(根)目录 中有三个用户的总目录项A、B和C。在B项所指出的B用户的总目录B中，又包括三个 分目录F、E和D，其中每个分目录中又包含多个文件。如B目录中的F分目录中，包含J 和N两个文件。为了提高文件系统的灵活性，应允许在一个目录文件中的目录项，既是作 为目录文件的FCB，又是数据文件的FCB，这可用目录项中的一位来指示它是属于哪一种 FCB。例如，在图7-11中，用户A的总目录中，目录项A是目录文件的FCB，而在A用 户的总目录中目录项B和D则是数据文件的FCB。\n\n2.路径名和当前目录 1）路径名(pathname) 在树形结构目录中，从根目录到任何数据文件都只有一条唯一的通路。在该路径上，从树 的根（即主目录）开始，把全部目录文件名与数据文件名依次地用“”连接起来，即构成该数据 文件唯一的路径名。例如，在图7-11中用户B为访问文件J，应使用其路径名/B/FJ来访问。 2）当前目录（CurrentDirectory) 当一个文件系统含有许多级时，每访问一个文件，都要使用从树根开始，直到树叶（数 据文件）为止的、包括各中间节点（目录）名的全路径名。这是相当麻烦的事，同时由于一个 进程运行时所访问的文件大多仅局限于某个范围，因而非常不便。基于这一点，可为每个 进程设置一个“当前目录”，又称为“工作目录”。进程对各文件的访问都相对于“当前目 录”而进行。此时各文件所使用的路径名只需从当前目录开始，逐级经过中间的目录文件， 最后到达要访问的数据文件。把这一路径上的全部目录文件名与数据文件名用“／”连接 形成路径名，如用户B的当前目录是F，则此时文件』的相对路径名仅是J本身。这样， 把从当前目录开始直到数据文件为止所构成的路径名称为相对路径名（relativepathname)， 237  计算机操作系统 而把从树根开始的路径名称为绝对路径名（absolutepathname)。 较之两级目录而言，树形结构目录的查询速度更快，同时层次结构更加清晰，能够更 加有效地进行文件的管理和保护。在多级目录中，不同性质、不同用户的文件，可以构成 不同的目录子树。不同层次、不同用户的文件，分别呈现在系统目录树中的不同层次或不 同子树中，可以容易地赋予不同的存取权限。但是在树形结构目录中查找一个文件，需要 按路径名逐级访问中间节点，增加了磁盘访问次数，无疑影响了查询速度。目前，大多数 操作系统如UNIX、Linux和Windows系列都采用了树形文件目录。\n\n3.目录操作\n\n（1）创建目录。在树形目录结构中，用户可为自己建立UFD，并可再创建子目录。在 用户要创建一个新文件时，只需查看在自己的UFD及其子目录中有无与新建文件相同的文 件名，若无，便可在UFD或其某个子目录中增加一个新目录项。\n\n(2）删除目录。对于一个已不再需要的目录，如何删除其目录项，要视情况而定。如 果所要删除的目录是空的，即在该目录中已不再有任何文件，就可简单地将该目录项删除， 或子目录，则可采用下述两种方法处理： ①不删除非空目录。当目录（文件)不空时，不能将其删除，而为了删除一个非空目录， 必须先删除目录中的所有文件，使之先成为空目录，然后再予以删除。如果目录中还包含 有子目录，还必须采取递归调用方式来将其删除，在MS-DOS中就是采用这种删除方式。 ②可删除非空目录。当要删除一目录时，如果在该目录中还包含有文件，则目录中的 所有文件和子目录也同时被删除。 上述两种方法实现起来都比较容易，第二种方法比较方便，但却比较危险。因为整个\n\n(3）改变目录。使用绝对路径名对用户来说是比较麻烦的。用户可利用改变目录的命 令，通过指定目录的绝对或相对路径名设置当前目录。如果在使用改变目录的命令时，没 有明确地指明任何目录，通常在默认的情况下会自动地改变到主目录（与指定用户相关的最 顶层目录)。\n\n（4）移动目录。到了一个阶段，通常都需要对目录组织进行调整，即将文件或子目录 在不同的父目录之间移动。文件或子目录经移动后，其文件的路径名将随之改变。\n\n(5）链接(Limk)操作。对于树形结构目录，每个文件和每个目录都只允许有一个父目录， 这样不适合文件共享，但可以通过链接操作让指定文件具有多个父目录，从而方便了文件 共享。关于链接操作将在文件共享中作详细介绍。\n\n（6）查找。当文件目录非常庞大时，要查找一个指定文件是有点困难的。因此在所有 的OS中都支持以多种方式进行查找，如可以从根目录或当前目录位置开始进行查找。在 进行搜索时，可用精确匹配或局部匹配方式等。"
          },
          {
            "三级标题": "7.3.4 目录查询技术 一一← 当用户要访问一个已存文件时，系统首先利用用户提供的文件名对目录进行查询，找 出该文件的文件控制块或对应索引结点。然后，根据FCB或索引结点中记录的文件物理地 址(盘块号），换算出文件在磁盘上的物理位置。最后，再通过磁盘驱动程序将所需文件读 238  第七章文件管理 入内存。目前，对目录进行查询的方式主要有两种：线性检索法和Hash方法。",
            "正文": "1.线性检索法 线性检索法又称为顺序检索法。在单级目录中，利用用户提供的文件名，用顺序查找 法直接从文件目录中找到指名文件的目录项。在树形目录中，用户提供的文件名是由多个 文件分量名组成的路径名，此时需对多级目录进行查找。假定用户给定的文件路径名是 /usr/ast/mbox，则查找/usr/ast/mbox文件的过程如图7-12所示。 结点是 132号盘块是 结点26是 496号盘块是 根目录 /usr的目录 /usr的目录 /usr/ast的目录 /usr/ast的目录 26 1 1 6 bin 19 64 grants dev 132 30 erik 496 92 books 14 lib 51 jim 60 mbox 9 26 ast 81 minik 6 usr 45 bal 17 src 8 tmp 在结点6中查找 usr字段 图7-12查找/usr/ast/mbox的步骤 其查找过程说明如下： 首先，系统应先读入第一个文件分量名usr，用它与根目录文件（或当前目录文件）中各 目录项中的文件名顺序地进行比较，从中找出匹配者，并得到匹配项的索引结点号6，再 从6号索引结点中得知usr目录文件放在132号盘块中，将该盘块内容读入内存。 其次，系统再将路径名中的第二个分量名ast读入，用它与放在132号盘块中的第二级目 录文件中各目录项的文件名顺序进行比较，又找到匹配项，从中得到ast的目录文件放在26 号索引l结点中，再从26号索引结点中得知/usr/ast存放在496号盘块中，再读入496号盘块。 然后，系统又将该文件的第三分量名mbox读入，用它与第三级目录文件usr/ast中各 目录项中的文件名进行比较，最后得到/usr/ast/mbox的索引l结点号为60，即在60号索引l 结点中存放了指定文件的物理地址。目录查询操作到此结束。如果在顺序查找过程中，发 现有一个文件分量名未能找到，则应停止查找，并返回“文件未找到”信息。\n\n2.Hash方法 在7.2.6节中曾介绍了Hash文件。如果我们建立了一张Hash索引文件目录，便可利用 Hash方法进行查询，即系统利用用户提供的文件名，并将它变换为文件目录的索引值，再 利用该索引值到目录中去查找，这样将显著地提高检索速度。 顺便指出，在现代操作系统中，通常都提供了模式匹配功能，即在文件名中使用了通 配符“*”、“？”等。对于使用了通配符的文件名，此时系统便无法利用Hash法检索目 239  计算机操作系统 录，因此，系统还是需要利用线性查找法查找目录。 在进行文件名的转换时，有可能把n个不同的文件名转换为相同的Hash值，即出现了 所谓的“冲突”。一种处理此“冲突”的有效规则是：\n\n(1）在利用Hash法索引查找目录时，如果目录表中相应的目录项是空的，则表示系统 中并无指定文件。\n\n（2）如果目录项中的文件名与指定文件名相匹配，则表示该目录项正是所要寻找的文 件所对应的目录项，故而可从中找到该文件所在的物理地址。\n\n（3）如果在目录表的相应目录项中的文件名与指定文件名并不匹配，则表示发生了“冲 突”，此时须将其Hash值再加上一个常数（该常数应与目录的长度值互质)，形成新的索引 值，再返回到第一步重新开始查找。\n\n7.4文件共享 在现代计算机系统中，必须提供文件共享手段，即指系统应允许多个用户（进程）共享 同一份文件。这样，在系统中只需保留该共享文件的一份副本。如果系统不能提供文件共 享功能，就意味着凡是需要该文件的用户，都须各自备有此文件的副本，显然这会造成对 存储空间的极大浪费。随着计算机技术的发展，文件共享的范围也在不断扩大，从单机系 统中的共享，扩展为多机系统的共享，进而又扩展为计算机网络范围的共享，甚至实现全 世界的文件共享。 早在20世纪的60和70年代，已经出现了不少实现文件共享的方法，如绕弯路法、连 访法，以及利用基本文件实现文件共享的方法：而现代的一些文件共享方法，也是在早期 这些方法的基础上发展起来的。下面我们仅介绍当前常用的两种文件共享方法，它们是在 树形结构目录的基础上经适当修改形成的，"
          },
          {
            "三级标题": "7.4.1 基于有向无循环图实现文件共享",
            "正文": "1.有向无循环图DAG（DirectedAcyclicGraph） 在严格的树形结构目录中，每个文件只允许有一个父目录，父目录可以有效地拥有该 文件，其它用户要想访问它，必须经过其属主目录来访问该文件。这就是说，对文件的共 享是不对称的，或者说，树形结构目录是不适合文件共享的。如果允许一个文件可以有多 个父目录，即有多个属于不同用户的多个目录，同时指向同一个文件，这样虽会破坏树的 特性，但这些用户可用对称的方式实现文件共享，而不必再通过其属主目录来访问。 图7-13示出了一个有向无循环图，它允许每一个文件都可以有多个父目录。如图中的 目录D6有两个父目录D2和D1。 由上所述得知，当有多个用户要共享一个子目录或文件时，必须将共享文件或子目录 链接到多个用户的父目录中，才能方便地找到该文件。现在的问题是，如何建立父目录D5 与共享文件F8之间的链接呢？如果在文件目录中所包含的是文件的物理地址，即文件所在 盘块的盘块号，则在链接时，必须将文件的物理地址拷贝到D5目录中去。但如果以后D5 240"
          }
        ]
      },
      {
        "二级标题": "7.5_文件系统",
        "三级内容": [
          {
            "三级标题": "7.4.2 利用符号链接实现文件共享",
            "正文": "1.利用符号链接（SymbolicLinking)的基本思想 利用符号链接实现文件共享的基本思想，是允许一个文件或子目录有多个父目录，但 其中仅有一个作为主(属主)父目录，其它的几个父目录都是通过符号链接方式与之相链接 的(简称链接父目录)。图7-16及图7-13基本相同，差别仅在于将原图中的某些实线改为虚 另外两条都已成为虚线。这表示F8仍然有三个父目录，但只有D6才是其主父目录，而 D5和D3都是链接父目录。类似地，D6的主父目录是D2，D1是链接父目录。这样做的最 大好处是，属主结构(用实线连接起来的结构)仍然是简单树，这对文件的删除、查找等都 更为方便。 根 D1azb cnap D3 D2 Q F1 F2F3 D4nmk DshkPD6 F9 D7 F4 b F5 F6 F7 F8 F10F11 图7-16使用符号链接的目录层次 242  第七章文件管理\n\n2.如何利用符号链实现共享 为使链接父目录D5能共享文件F，可以由系统创建一个LINK类型的新文件，也取名 为F，并将F写入链接父目录D5中，以实现D5与文件F8的链接。在新文件F中只包含 被链接文件F8的路径名。这样的链接方法被称为符号链接。新文件F中的路径名则只被看 做是符号链。当用户通过D5访问被链接的文件F8，且正要读LINK类新文件时，此要求 将被OS截获，OS根据新文件中的路径名去找到文件F8，然后对它进行读（写)，这样就实 现了用户B对文件F的共享。\n\n3.利用符号链实现共享的优点 在利用符号链方式实现文件共享时，只是文件主才拥有指向其索引结点的指针；而共 享该文件的其他用户则只有该文件的路径名，并不拥有指向其索引结点的指针。这样，也 就不会发生在文件主删除一共享文件后留下一悬空指针的情况。当文件的拥有者把一个共 享文件删除后，如果其他用户又试图通过符号链去访问一个已被删除的共享文件，则会因 系统找不到该文件而使访问失败，于是再将符号链删除，此时不会产生任何影响。 值得一提的是，在计算机网络中，Web浏览器在进行浏览时所使用的文件是HTML类 型的文件。在HTML文件中有着许多链接符，通过这些链接符能够链接（通过计算机网络） 世界上任何地方的机器中的文件。在利用符号链实现共享时，同样可以通过网络链接到分 布在世界各地的计算机系统中的文件。关于Web浏览器详见网络操作系统一章。\n\n4.利用符号链的共享方式存在的问题 给定的文件路径名逐个分量（名）地去查找目录，直至找到该文件的索引结点。因此，在每 次访问共享文件时，都可能要多次地读盘。这使每次访问文件的开销甚大，且增加了启动 尽管该文件非常简单，却仍要为它配置一个索引结点，这也要耗费一定的磁盘空间。 上述两种链接方式都存在这样一个共同的问题，即每一个共享文件都有几个文件名。 换言之，每增加一条链接，就增加一个文件名。这在实质上就是每个用户都使用自己的路 径名去访问共享文件。当我们试图去遍历（traverse）整个文件系统时，将会多次遍历到该共 对一个共享文件产生多个拷贝。\n\n7.5文件保护 在现代计算机系统中，存放了越来越多的宝贵信息供用户使用，给人们带来了极大的 好处和方便，但同时也有着潜在的不安全性。影响文件安全性的主要因素有：\n\n（1）人为因素。人们有意或无意的行为，会使文件系统中的数据遭到破坏或丢失。\n\n(2）系统因素。由于系统的某部分出现异常情况，而造成数据的破坏或丢失，特别是 作为数据存储主要介质的磁盘，一旦出现故障，会产生难以估量的影响。\n\n(3）自然因素。随着时间的推移，存放在磁盘上的数据会逐渐消失。 243  计算机操作系统 为了确保文件系统的安全性，可针对上述原因而采取三方面的措施：\n\n（1）通过存取控制机制，防止由人为因素所造成的文件不安全性。\n\n(2）采取系统容错技术，防止系统部分的故障所造成的文件的不安全性。\n\n（3）建立后备系统，防止由自然因素所造成的不安全性。 本节主要介绍第一方面的措施一—存取控制机制。在下一章再介绍第二和第三方面的 措施。"
          },
          {
            "三级标题": "7.5.1 保护域(ProtectionDomain) 护域”和“访问权”的概念。规定每一个进程仅能在保护域内执行操作，而且只允许进程 访问它们具有“访问权”的对象。",
            "正文": "1.访问权 为了对系统中的对象加以保护，应由系统来控制进程对对象的访问。对象可以是硬件 对象，如磁盘驱动器、打印机；也可以是软件对象，如文件、程序。对对象所施加的操作 也有所不同，如对文件可以是读，也可以是写或执行操作。我们把一个进程能对某对象执 行操作的权力，称为访问权(Access right)。每个访问权可以用一个有序对(对象名，权集)来 表示，例如，某进程有对文件F执行读和写操作的权力，则可将该进程的访问权表示成（F1， {R/W})。\n\n2.保护域 为了对系统中的资源进行保护而引入了保护域的概念，保护域简称为“域”。“域”是 进程对一组对象访问权的集合，进程只能在指定域内执行操作。这样，“域”也就规定了进 即文件F和F2，只允许进程对F读，而允许对F2读和写；而对象Printer1同时出现在域2 和域3中，这表示在这两个域中运行的进程都能使用打印机。 域1 域2 域3 F[RWE] F[R] Fs[R] 1[W] F4[RWE] Printer 1 Plotter 2[W] F2[R] Fs[RW] 图7-17三个保护域\n\n3.进程和域间的静态联系 在进程和域之间可以一一对应，即一个进程只联系着一个域。这意味着，在进程的整 个生命期中，其可用资源是固定的，我们把这种域称为“静态域”。在这种情况下，进程运 行的全过程都是受限于同一个域，这将会使赋予进程的访问权超过了实际需要。例如，某 进程在运行开始时需要磁带机输入数据，而在进程快结束时，又需要用打印机打印数据。 在一个进程只联系着一个域的情况下，则需要在该域中同时设置磁带机和打印机这两个对 象，这将超过进程运行的实际需要。 244  第七章文件管理\n\n4.进程和域间的动态联系方式 在进程和域之间，也可以是一对多的关系，即一个进程可以联系着多个域。在此情况 下，可将进程的运行分为若干个阶段，其每个阶段联系着一个域，这样便可根据运行的实 际需要来规定在进程运行的每个阶段中所能访问的对象。用上述的同一个例子，我们可以 把进程的运行分成三个阶段：进程在开始运行的阶段联系着域D1，其中包括用磁带机输入； 在运行快结束的第三阶段联系着域D3，其中是用打印机输出；中间运行阶段联系着域D2， 其中既不含磁带机，也不含打印机。我们把这种一对多的联系方式称为动态联系方式，在 采用这种方式的系统中，应增设保护域切换功能，以使进程能在不同的运行阶段从一个保 护域切换到另一个保护域。"
          },
          {
            "三级标题": "7.5.2 访问矩阵 一一",
            "正文": "1.基本的访问矩阵 我们可以利用一个矩阵来描述系统的访问控制，并把该矩阵称为访问矩阵(AccesS Matrix)。访问矩阵中的行代表域，列代表对象，矩阵中的每一项是由一组访问权组成的。 因为对象已由列显式地定义，故可以只写出访问权而不必写出是对哪个对象的访问权，每 一项访问权access(i,j)定义了在域D;中执行的进程能对对象Q;所施加的操作集。 访问矩阵中的访问权通常是由资源的拥有者或者管理者所决定的。当用户创建一个新 文件时，创建者便是拥有者，系统在访问矩阵中为新文件增加一列，由用户决定在该列的 某个项中应具有哪些访问权，而在另一项中又具有哪些访问权。当用户删除此文件时，系 统也要相应地在访问矩阵中将该文件对应的列撤消。 图7-17的访问矩阵如图7-18所示。它是由三个域和8个对象所组成的。当进程在域 D中运行时，它能读文件Fi、读和写文件F2。进程在域D2中运行时，它能读文件F3、F4 和F5，以及写文件F4、Fs和执行文件F4，此外还可以使用打印机1。只有当进程在域D3 中运行时，才可使用绘图仪2。 对象 F F2 F3 F4 Fs F6 Printer 1 Plotter2 域 D R R, W D2 R R,W,E R, W W D3 R,W,E W 图7-18 一个访问矩阵\n\n2.具有域切换权的访问矩阵 为了实现在进程和域之间的动态联系，应能够将进程从一个保护域切换到另一个保护 域。为了能对进程进行控制，同样应将切换作为一种权力，仅当进程有切换权时，才能进 行这种切换。为此，在访问矩阵中又增加了几个对象，分别把它们作为访问矩阵中的几个 域；当且仅当 switch∈access(i,j)时，才允许进程从域i切换到域j。例如，在图7-19 中， 由于域D,和D2所对应的项目中有一个S即Switch，故而允许在域D,中的进程切换到域 D2中。类似地，在域D2和对象D3所对应的项中，也有Switch，这表示在D2域中运行的 245  计算机操作系统 进程可以切换到域D中，但不允许该进程再从域D返回到域D1。 对象 F4 F6 Printer 1 Plotter 2 域D F3 域D2 域D3 域 域D R,W S P 域D2 R R,W,ER,W W S 域D R,W,E W W 图7-19具有切换权的访问控制矩阵"
          },
          {
            "三级标题": "7.5.3 访问矩阵的修改 在系统中建立起访问矩阵后，随着系统的发展及用户的增加和改变，必然要经常对访 问矩阵进行修改。因此，应当允许可控性地修改访问矩阵中的内容，这可通过在访问权中 增加拷贝权、拥有权及控制权的方法来实现有控制的修改。",
            "正文": "1.拷贝权(CopyRight) 我们可利用拷贝权将在某个域中所拥有的访问权(access(i,j))扩展到同一列的其它域 中，亦即，为进程在其它的域中也赋予对同一对象的访问权(access(k,j))，如图7-20 所示。 对象 对象 F F2 F3 F F3 域 域 D E w* D W* D2 E R' E D2 E R E D3 E D3 E W P (a) (b) 图7-20具有拷贝权的访问控制矩阵 在图7-20中，凡是在访问权（access(i，j))上加星号（*）者，都表示在i域中运行的进程 能将其对对象j的访问权复制成在任何域中对同一对象的访问权。例如，图中在域D2中对 文件F2的读访问权上加有*号时，表示运行在D2域中的进程可以将其对文件F2的读访问 权扩展到域D3中去。又如，在域D中对文件F的写访问权上加有*号时，使运行在域D 中的进程可以将其对文件F的写访问权扩展到域D中去，使在域D中运行的进程也具有 对文件F的写访问权。 应注意的是，把带有*号的拷贝权如R*，由 access(i,j)拷贝成access(k,j)后，其所建立 的访问权只是R而不是R*，这使在域Dk上运行的进程不能再将其拷贝权进行扩散，从而 限制了访问权的进一步扩散。这种拷贝方式被称为限制拷贝。\n\n2.所有权（OwnerRight） 人们不仅要求能将已有的访问权进行有控制的扩散，而且同样需要能增加某种访问权，或 者能删除某种访问权。此时，可利用所有权(O)来实现这些操作。见图7-21，如果在access(i,j) 246"
          }
        ]
      },
      {
        "二级标题": "7.6_文件共享与保护",
        "三级内容": [
          {
            "三级标题": "7.5.4 访问矩阵的实现 虽然访问矩阵在概念上是简单的，因而极易理解，但在具体实现上却有一定的困难， 这是因为，在稍具规模的系统中，域的数量和对象的数量都可能很大，例如，在系统中有 100个域，10个对象，此时在访问矩阵中便会有10°个表项，即使每个表项只占一个字节， 此时也需占用100MB的存储空间来保存这个访问矩阵。而要对这个矩阵（表）进行访问，则 必然是十分费时的。简言之，访问该矩阵所花费的时空开销是令人难以接受的。 事实上，每个用户(进程)所需访问的对象通常都很有限，例如只有几十个，因而在这 个访问矩阵中的绝大多数项都会是空项。或者说，这是一个非常稀疏的矩阵。目前的实现 247  计算机操作系统 方法，是将访问矩阵按列划分，或者按行划分，以分别形成访问控制表或访问权力表。",
            "正文": "1.访问控制表(AccessControl List) 这是指对访问矩阵按列(对象)划分，为每一列建立一张访问控制表ACL。在该表中， 已把矩阵中属于该列的所有空项删除，此时的访问控制表是由一有序对（域，权集）所组成 的。由于在大多数情况下，矩阵中的空项远多于非空项，因而使用访问控制表可以显著地 减少所占用的存储空间，并能提高查找速度。在不少系统中，当对象是文件时，便把访问 控制表存放在该文件的文件控制表中，或放在文件的索引结点中，作为该文件的存取控制 信息。 域是一个抽象的概念，可用各种方式实现。最常见的一种情况是每一个用户是一个域， 而对象则是文件。此时，用户能够访问的文件集和访问权限取决于用户的身份。通常，在 一个用户退出而另一个用户进入时，即用户发生改变时，要进行域的切换；另一种情况是， 每个进程是一个域，此时，能够访问的对象集中的各访问权取决于进程的身份。 访问控制表也可用于定义缺省的访问权集，即在该表中列出了各个域对某对象的缺省 访问权集。在系统中配置了这种表后，当某用户（进程)要访问某资源时，通常是首先由系 统到缺省的访问控制表中，去查找该用户（进程）是否具有对指定资源进行访问的权力。如 果找不到，再到相应对象的访问控制表中去查找。\n\n2.访问权限（Capabilities）表 如果把访问矩阵按行（即域）划分，便可由每一行构成一张访问权限表。换言之，这是 由一个域对每一个对象可以执行的一组操作所构成的表。表中的每一项即为该域对某对象 的访问权限。当域为用户（进程）、对象为文件时，访问权限表便可用来描述一个用户（进程) 对每一个文件所能执行的一组操作。 图7-23示出了对应于图7-19中域D2的访问权限表。在表中共有三个字段。其中类型 字段用于说明对象的类型；权力字段是指域D2对该对象所拥有的访问权限；对象字段是一 个指向相应对象的指针，对UNIX系统来说，它就是索引结点的编号。由该表可以看出， 域D2可以访问的对象有4个，即文件3、4、5和打印机，对文件3的访问权限是只读；对 文件4的访问权限是读、写和执行等。 类型 权力 对象 0 文件 R-- 指向文件3的指针 RWE 1 文件 指向文件4的指针 2 文件 RW- 指向文件5的指针 3 打印机 -W- 指向打印机1的指针 图7-23访问权限表 应当指出，仅当访问权限表安全时，由它所保护的对象才可能是安全的。因此，访问 权限表不能允许直接被用户(进程)所访问。通常，将访问权限表存储到系统区内的一个专用 区中，只有通过访问合法性检查的程序才能对该表进行访问，以实现对访问控制表的保护。 目前，大多数系统都同时采用访问控制表和访问权限表，在系统中为每个对象配置一 张访问控制表。当一个进程第一次试图去访问一个对象时，必须先检查访问控制表，检查 248  第七章文件管理 进程是否具有对该对象的访问权。如果无权访问，便由系统来拒绝进程的访问，并构成一 例外(异常)事件；否则(有权访问），便允许进程对该对象进行访问，并为该进程建立一访问 权限，将之连接到该进程。以后，该进程便可直接利用这一返回的权限去访问该对象，这 样，便可快速地验证其访问的合法性。当进程不再需要对该对象进行访问时，便可撤消该 访问权限。\n\n1.何谓数据项、记录和文件？\n\n2.文件系统的模型可分为三层，试说明其每一层所包含的基本内容。\n\n3.与文件系统有关的软件可分为哪几个层次？\n\n4.试说明用户可以对文件施加的主要操作有哪些。\n\n5.为什么在大多数OS中都引入了“打开”这一文件系统调用？打开的含意是什么？\n\n6.何谓文件的逻辑结构？何谓文件的物理结构？\n\n7.按文件的组织方式可将文件分为哪几种类型？\n\n8.如何提高对变长记录顺序文件的检索速度？\n\n9.通过哪两种方式来对固定长记录实现随机访问？\n\n10.可以采取什么方法来实现对变长记录文件进行随机检索？\n\n11.试说明索引顺序文件的几个主要特征。\n\n12.试说明对索引文件和索引顺序文件的检索方法。\n\n13.试从检索速度和存储费用两方面来比较两级索引文件和索引顺序文件。\n\n14.对目录管理的主要要求是什么？\n\n15.采用单级目录能否满足对目录管理的主要要求？为什么？\n\n16.目前广泛采用的目录结构形式是哪种？它有什么优点？\n\n17.何谓路径名和当前目录？\n\n18.Hash检索法有何优点？又有何局限性？\n\n19.在Hash检索法中，如何解决“冲突”问题？\n\n20.试说明在树形目录结构中线性检索法的检索过程，并给出相应的流程图。\n\n21.基于索引结点的文件共享方式有何优点？\n\n22.什么是主父目录和链接父目录？如何利用符号链实现共享？\n\n23.基于符号链的文件共享方式有何优点？\n\n24.什么是保护域？进程与保护域之间存在着的动态联系是什么？\n\n25.试举例说明具有域切换权的访问控制矩阵。\n\n26.如何利用拷贝权来扩散某种访问权？\n\n27.如何利用拥有权来增、删某种访问权?\n\n28.增加控制权的主要目的是什么？试举例说明控制权的应用。\n\n29.什么是访问控制表？什么是访问权限表？\n\n30.系统如何利用访问控制表和访问权限表来实现对文件的保护？ 249  计算机操作系统 第几章·磁盘存储器的管理 磁盘存储器不仅容量大，存取速度快，而且可以实现随机存取，故它是当前实现虚拟 存储器和存放文件最理想的外存，因此在现代计算机系统中无一例外地都配置了磁盘存储 器。对磁盘存储器管理的主要任务和要求是：\n\n（1）有效地利用存储空间。采取合理的文件分配方式，为文件分配必要的存储空间， 使每个文件都能“各得其所”，并能有效地减少磁盘碎片，改善存储空间的利用率。\n\n(2）提高磁盘的I/O速度。通过各种途经，包含采用磁盘高速缓存等措施，来提高磁盘 的I/O速度，以增加对文件的访问速度，从而改善文件系统的性能。\n\n（3）提高磁盘系统的可靠性。采取多种技术，其中包含必要的冗余措施和后备系统， 来提高磁盘系统的可靠性。\n\n8.1外存的组织方式 如前所述，文件的物理结构直接与外存的组织方式有关。对于不同的外存组织方式， 将形成不同的文件物理结构。目前常用的外存组织方式有：\n\n（1）连续组织方式。在对文件采取连续组织方式时，为每个文件分配一片连续的磁盘 空间，由此所形成的文件物理结构将是顺序式的文件结构。\n\n（2）链接组织方式。在对文件采取链接组织方式时，可以为每个文件分配不连续的磁盘\n\n（3）索引组织方式。在对文件采取索引组织方式时，所形成的将是索引式文件结构。在传 统的文件系统中，通常仅采用其中的一种组织方式来组织文件。在现代OS中，由于存在着多 种类型的、特别是实时类型的多媒体文件，因此，对文件可能采取了多种类型的组织形式。"
          },
          {
            "三级标题": "8.1.1 连续组织方式 连续组织方式又称连续分配方式，要求为每一个文件分配一组相邻接的盘块。例如， 第一个盘块的地址为b，则第二个盘块的地址为b+1，第三个盘块的地址为b+2，“\"。通常， 它们都位于一条磁道上，在进行读/写时，不必移动磁头。在采用连续组织方式时，可把逻 辑文件中的记录顺序地存储到邻接的各物理盘块中，这样所形成的文件结构称为顺序文件 结构，此时的物理文件称为顺序文件。 这种组织方式保证了逻辑文件中的记录顺序与存储器中文件占用盘块的顺序的一致 性。为使系统能找到文件存放的地址，应在目录项的“文件物理地址”字段中记录该文件 250",
            "正文": ""
          }
        ]
      }
    ]
  }
]
第三章处理机调度与死锁 为了进一步反映调度的性能，更清晰地描述各进程在其周转时间中，等待和执行时间 的具体分配状况，往往使用带权周转时间，即作业的周转时间T与系统为它提供服务的时 间T，之比，即W=T/T。而平均带权周转时间则可表示为： W=! nTs

（2）系统吞吐量高。由于吞吐量是指在单位时间内系统所完成的作业数，因而它与批 处理作业的平均长度有关。事实上，如果单纯是为了获得高的系统吞吐量，就应尽量多地 选择短作业运行。

（3）处理机利用率高。对于大、中型计算机，CPU价格十分昂贵，致使处理机的利用 率成为衡量系统性能的十分重要的指标：而调度方式和算法又对处理机的利用率起着十分 重要的作用。如果单纯是为使处理机利用率高，应尽量多地选择计算量大的作业运行。由 上所述可以看出，这些要求之间是存在着一定矛盾的。

3.分时系统的目标

（1）响应时间快。响应时间快是选择分时系统中进程调度算法的重要准则。所谓响应 时间，是从用户通过键盘提交一个请求开始，直到屏幕上显示出处理结果为止的一段时间 间隔。它包括三部分时间：一是请求信息从键盘输入开始，直至将其传送到处理机的时间； 二是处理机对请求信息进行处理的时间：三是将所形成的响应信息回送到终端显示器的时间。

(2）均衡性。用户对响应时间的要求并非完全相同。通常用户对较复杂任务的响应时 间允许较长，而对较简单任务的响应时间则要短。所谓均衡性，是指系统响应时间的快慢 应与用户所请求服务的复杂性相适应。

4.实时系统的目标

(1）截止时间的保证。所谓截止时间，是指某任务必须开始执行的最迟时间，或必须 完成的最迟时间。对于严格的实时系统，其调度方式和调度算法必须能保证这一点，否则 将可能造成难以预料的后果。对于实时系统而言，调度算法的一个主要目标是保证实时任 务对截止时间的要求。对于HRT任务，其调度方式和调度算法必须确保对截止时间的要求， 否则将可能造成难以预料的后果；而对于SRT任务，其调度方式和调度算法也应基本上能 保证对截止时间的要求。

(2）可预测性。在实时系统中，可预测性显得非常重要。例如，在多媒体系统中，无 论是电影还是电视剧都应是连续播放的，这就提供了请求的可预测性。如果系统中采用了 双缓冲，则因为可实现第i帧的播放和第i+1帧的读取并行处理，进而可提高其实时性。

3.2 2作业与作业调度 在多道批处理系统中，作业是用户提交给系统的一项相对独立的工作。操作员把用户 提交的作业通过相应的输入设备输入到磁盘存储器，并保存在一个后备作业队列中。再由 作业调度程序将其从外存调入内存。 87  计算机操作系统

3.2.1批处理系统中的作业

1.作业和作业步

（1）作业(Job)。作业是一个比程序更为广泛的概念，它不仅包含了通常的程序和数据， 而且还应配有一份作业说明书，系统根据该说明书来对程序的运行进行控制。在批处理系 统中，是以作业为基本单位从外存调入内存的。

(2）作业步（JobStep)。通常，在作业运行期间，每个作业都必须经过若干个相对独立， 又相互关联的顺序加工步骤才能得到结果。我们把其中的每一个加工步骤称为一个作业步， 各作业步之间存在着相互联系，往往是上一个作业步的输出作为下一个作业步的输入。例

2.作业控制块（JobControlBlock，JCB) 为了管理和调度作业，在多道批处理系统中，为每个作业设置了一个作业控制块JCB， 它是作业在系统中存在的标志，其中保存了系统对作业进行管理和调度所需的全部信息。 通常在JCB中包含的内容有：作业标识、用户名称、用户账号、作业类型（CPU繁忙型、 I/O繁忙型、批量型、终端型）、作业状态、调度信息（优先级、作业运行时间）、资源需求（预 计运行时间、要求内存大小等）、资源使用情况等。 每当一个作业进入系统时，便由“作业注册”程序为该作业建立一个作业控制块JCB。 再根据作业类型，将它放到相应的作业后备队列中等待调度。调度程序依据一定的调度算 法来调度它们，被调度到的作业将被装入内存。在作业运行期间，系统就按照JICB中的信 息和作业说明书对作业进行控制。当一个作业执行结束进入完成状态时，系统负责回收已 分配给它的资源，撤销该作业控制块。

3.作业运行的三个阶段和三种状态 作业从进入系统到运行结束，通常需要经历收容、运行和完成三个阶段。相应的作业 也就有“后备状态”、“运行状态”和“完成状态”。

（1）收容阶段。操作员把用户提交的作业通过某种输入方式或SPOOLing系统输入到硬 盘上，再为该作业建立JCB，并把它放入作业后备队列中。相应地，此时作业的状态为“后 备状态”。

(2）运行阶段。当作业被作业调度选中后，便为它分配必要的资源和建立进程，并将 它放入就绪队列。一个作业从第一次进入就绪状态开始，直到它运行结束前，在此期间都 处于“运行状态”。

（3）完成阶段。当作业运行完成、或发生异常情况而提前结束时，作业便进入完成阶 段，相应的作业状态为“完成状态”。此时系统中的“终止作业”程序将会回收已分配给该 作业的作业控制块和所有资源，并将作业运行结果信息形成输出文件后输出。

3.2.2作业调度的主要任务 作业调度的主要任务是，根据JCB中的信息，检查系统中的资源能否满足作业对资源 的需求，以及按照一定的调度算法，从外存的后备队列中选取某些作业调入内存，并为它 们创建进程、分配必要的资源。然后再将新创建的进程排在就绪队列上等待调度。因此， 88  第三章处理机调度与死锁 也把作业调度称为接纳调度(Admission Scheduling)。在每次执行作业调度时，都需做出以 下两个决定。

1.接纳多少个作业 在每一次进行作业调度时，应当从后备队列中选取多少作业调入内存，取决于多道程 序度(Degreeof Multiprogramming)，即允许多少个作业同时在内存中运行。对系统来说，希 望装入较多的作业，有利于提高CPU的利用率和系统的吞吐量。但如果内存中同时运行 的作业太多时，进程在运行时因内存不足所发生的中断就会急剧增加。这将会使平均周转 时间显著延长，影响到系统的服务质量。因此，多道程序度的确定是根据计算机的系统规 模、运行速度、作业大小，以及能否获得较好的系统性能等情况作出适当的抉择的。

2.接纳哪些作业 应选择后备队列中的哪些作业调入内存，取决于所采用的调度算法。最简单的是先来 先服务调度算法，它是将最早进入外存的作业优先调入内存。较常用的一种算法是短作业 优先调度算法，是将外存上所需执行时间最短的作业优先调入内存。另一种较常用的是基 于作业优先级的调度算法，该算法是将外存上作业优先级最高的作业优先调入内存。比较 好的一种算法是“响应比高者优先”的调度算法。我们将在后面对上述的几种算法作较详 细的介绍。 在批处理系统中，作业进入系统后，总是先驻留在外存的作业后备队列上，因此需要 有作业调度，以便将它们分批地装入内存。然而在分时系统中，为了做到及时响应，用户 通过键盘输入的命令或数据等都被直接送入内存，因而无需配置上述的作业调度机制，但 也需要有某种接纳控制措施来限制进入系统的用户数目。即如果系统尚有能力处理更多的 任务，将会接纳授权用户的请求，否则，便拒绝接纳。类似地，在实时系统中也不需要作 业调度，而必需具有接纳控制措施。

3.2.3先来先服务（FCFS）和短作业优先（SJF)调度算法 一 一一一一+

1.先来先服务（first-comefirst-served，FCFS）调度算法 FCFS是最简单的调度算法，该算法既可用于作业调度，也可用于进程调度。当在作业调 度中采用该算法时，系统将按照作业到达的先后次序来进行调度，或者说它是优先考虑在系统 中等待时间最长的作业，而不管该作业所需执行时间的长短，从后备作业队列中选择几个最先 进入该队列的作业，将它们调入内存，为它们分配资源和创建进程。然后把它放入就绪队列。 当在进程调度中采用FCFS算法时，每次调度是从就绪的进程队列中选择一个最先进 入该队列的进程，为之分配处理机，使之投入运行。该进程一直运行到完成或发生某事件 而阻塞后，进程调度程序才将处理机分配给其它进程。 顺便说明，FCFS算法在单处理机系统中已很少作为主调度算法，但经常把它与其它调 度算法相结合使用，形成一种更为有效的调度算法。例如，可以在系统中按进程的优先级

2.短作业优先（shortjobfirst，SJF)的调度算法 由于在实际情况中，短作业（进程）占有很大比例，为了能使它们能比长作业优先执行， 而产生了短作业优先调度算法。 89  计算机操作系统 1）短作业优先算法 SJF算法是以作业的长短来计算优先级，作业越短，其优先级越高。作业的长短是以 作业所要求的运行时间来衡量的。SJF算法可以分别用于作业调度和进程调度。在把短作 业优先调度算法用于作业调度时，它将从外存的作业后备队列中选择若干个估计运行时间 最短的作业，优先将它们调入内存运行。 2）短作业优先算法的缺点 SJF调度算法较之FCFS算法有了明显的改进，但仍然存在不容忽视的缺点：

(1）必须预知作业的运行时间。在采用这种算法时，要先知道每个作业的运行时间。 即使是程序员也很难准确估计作业的运行时间，如果估计过低，系统就可能按估计的时间 终止作业的运行，但此时作业并未完成，故一般都会偏长估计。

(2）对长作业非常不利，长作业的周转时间会明显地增长。更严重的是，该算法完全 忽视作业的等待时间，可能使作业等待时间过长，出现饥饿现象。

(3）在采用FCFS算法时，人一机无法实现交互。

（4）该调度算法完全未考虑作业的紧迫程度，故不能保证紧迫性作业能得到及时处理。

3.2.4优先级调度算法和高响应比优先调度算法

1.优先级调度算法（priority-schedulingalgorithm，PSA) 我们可以这样来看作业的优先级，对于先来先服务调度算法，作业的等待时间就是作 业的优先级，等待时间越长，其优先级越高。对于短作业优先调度算法，作业的长短就是 作业的优先级，作业所需运行的时间越短，其优先级越高。但上述两种优先级都不能反映 作业的紧迫程度。而在优先级调度算法中，则是基于作业的紧迫程度，由外部赋予作业相 应的优先级，调度算法是根据该优先级进行调度的。这样就可以保证紧迫性作业优先运行。 优先级调度算法可作为作业调度算法，也可作为进程调度算法。当把该算法用于作业调度 时，系统是从后备队列中选择若干个优先级最高的作业装入内存。

2.高响应比优先调度算法（HighestResponseRatioNext，HRRN） 在批处理系统中，FCFS算法所考虑的只是作业的等待时间，而忽视了作业的运行时间。 而SJF算法正好与之相反，只考虑作业的运行时间，而忽视了作业的等待时间。高响应比 优先调度算法则是既考虑了作业的等待时间，又考虑作业运行时间的调度算法，因此既照 顾了短作业，又不致使长作业的等待时间过长，从而改善了处理机调度的性能。 高响应比优先算法是如何实现的呢？如果我们能为每个作业引入一个动态优先级，即 优先级是可以改变的，令它随等待时间延长而增加，这将使长作业的优先级在等待期间不 断地增加，等到足够的时间后，必然有机会获得处理机。该优先级的变化规律可描述为： 等待时间+要求服务时间 优先权= 要求服务时间 由于等待时间与服务时间之和就是系统对该作业的响应时间，故该优先级又相当于响 应比Rp。据此，优先又可表示为： 等待时间+要求服务时间_响应时间 Rp= 要求服务时间 要求服务时间

90 @  第三章处理机调度与死锁 由上式可以看出：①如果作业的等待时间相同，则要求服务的时间愈短，其优先权愈 高，因而类似于SJF算法，有利于短作业。②当要求服务的时间相同时，作业的优先权又 决定于其等待时间，因而该算法又类似于FCFS算法。③对于长作业的优先级，可以随等 待时间的增加而提高，当其等待时间足够长时，也可获得处理机。因此该算法实现了较好 的折中。当然在利用该算法时，每次要进行调度之前，都需要先做响应比的计算，显然会 增加系统开销。

3.3 进程调度 进程调度是OS中必不可少的一种调度。因此在三种类型的OS中，都无一例外地配置 了进程调度。此外它也是对系统性能影响最大的一种处理机调度，相应的，有关进程调度 的算法也较多。

3.3.1进程调度的任务、机制和方式

1.进程调度的任务 进程调度的任务主要有三：

（1）保存处理机的现场信息。在进行调度时首先需要保存当前进程的处理机的现场信 息，如程序计数器、多个通用寄存器中的内容等。

（2）按某种算法选取进程。调度程序按某种算法从就绪队列中选取一个进程，将其状 态改为运行状态，并准备把处理机分配给它。

（3）把处理器分配给进程。由分派程序把处理器分配给该进程，此时需要将选中进程 的进程控制块内有关处理机现场的信息装入处理器相应的各个寄存器中，把处理器的控制 权交予该进程，让它从上次的断点处恢复运行。

2.进程调度机制 为了实现进程调度，在进程调度机制中，应具有如下三个基本部分，如图3-1所示。

（1）排队器。为了提高进程调度的效率，应事先将系统中的所有就绪进程按照一定的 策略排成一个或多个队列，以便调度程序能最快地找到它。以后每当有一个进程转变为就 绪状态时，排队器便将它插入到相应的就绪队列。 移出运行进程 来自其它状态 进程控制块 就绪进程 就绪队列 排队器 上下文 [分派器 CPU 切换器 调度程序 图3-1进程调度机制 91
计算机操作系统 第四章存储器管理 9999999999999999 存储器历来都是计算机系统的重要组成部分。近年来，随着计算机技术的发展，系统 软件和应用软件在种类、功能上都急剧地膨胀，虽然存储器容量一直在不断扩大，但仍不 能满足现代软件发展的需要。因此，存储器仍然是一种宝贵而又稀缺的资源。如何对它加 以有效的管理，不仅直接影响到存储器的利用率，而且对系统性能也有重大影响。存储器 管理的主要对象是内存。由于对外存的管理与对内存的管理相类似，只是它们的用途不同， 即外存主要用来存放文件，所以我们把对外存的管理放在文件管理一章介绍。

4.1存储器的层次结构 在计算机执行时，几乎每一条指令都涉及对存储器的访问，因此要求对存储器的访问 速度能跟得上处理机的运行速度。或者说，存储器的速度必须非常快，能与处理机的速度 相匹配，否则会明显地影响到处理机的运行。此外还要求存储器具有非常大的容量，而且 存储器的价格还应很便宜。对于这样十分严格的三个条件，目前是无法同时满足的。于是 在现代计算机系统中都无一例外地采用了多层结构的存储器系统。

4.1.1多层结构的存储器系统

1.存储器的多层结构 对于通用计算机而言，存储层次至少应具有三级：最高层为CPU寄存器，中间为主存， 最底层是辅存。在较高档的计算机中，还可以根据具体的功能细分为寄存器、高速缓存、 主存储器、磁盘缓存、固定磁盘、可移动 存储介质等6层。如图4-1所示。在存储 CPU寄存器{ 寄存器 层次中，层次越高（越靠近CPU)，存储介 高速缓存 质的访问速度越快，价格也越高，相对所 主存 主存储器 配置的存储容量也越小。其中，寄存器、 磁盘缓存 高速缓存、主存储器和磁盘缓存均属于操 固定磁盘 辅存 作系统存储管理的管辖范畴，掉电后它们 可移动存储介质 中存储的信息不再存在。而低层的固定磁 盘和可移动存储介质则属于设备管理的管 图4-1计算机系统存储层次示意 辖范畴，它们存储的信息将被长期保存。 120  第四章存储器管理

2.可执行存储器 在计算机系统的存储层次中，寄存器和主存储器又被称为可执行存储器。对于存放于 其中的信息，与存放于辅存中的信息相比较而言，计算机所采用的访问机制是不同的，所 需耗费的时间也是不同的。进程可以在很少的时钟周期内使用一条load或store指令对可 执行存储器进行访问。但对辅存的访问则需要通过IO设备实现，因此，在访问中将涉及 到中断、设备驱动程序以及物理设备的运行，所需耗费的时间远远高于访问可执行存储器 的时间，一般相差3个数量级甚至更多。 对于不同层次的存储介质，由操作系统进行统一管理。操作系统的存储管理负责对可 执行存储器的分配、回收，以及提供在存储层次间数据移动的管理机制，例如主存与磁盘 缓存、高速缓存与主存间的数据移动等。而设备和文件管理则根据用户的需求，提供对辅 存的管理机制。本章主要讨论有关存储管理部分的内容，对于辅存部分，则放在以后的章 节中进行介绍。

4.1.2主存储器与寄存器

1.主存储器 和数据，也称可执行存储器。通常，处理机都是从主存储器中取得指令和数据的，并将其 所取得的指令放入指令寄存器中，而将其所读取的数据装入到数据寄存器中；或者反之， 将寄存器中的数据存入到主存储器。早期的内存是由磁芯做成的，其容量一般为数十KB 到数百KB。随着VLSI的发展，现在的内存已由VLSI构成，其容量，即使是微机系统， MB。CPU与外围设备交换的信息一般也依托于主存储器的地址空间。由于主存储器访问 速度远低于CPU执行指令的速度，为缓和这一矛盾，在计算机系统中引I入了寄存器和高速 缓存。

2.寄存器 寄存器具有与处理机相同的速度，故对寄存器的访问速度最快，完全能与CPU协调工 作，但价格却十分昂贵，因此容量不可能做得很大。在早期计算机中，寄存器的数目仅为 几个，主要用于存放处理机运行时的数据，以加速存储器的访问速度，如使用寄存器存放 操作数，或用作地址寄存器加快地址转换速度等。随着VLSI的发展，寄存器的成本也在 迅速降低，在当前的微机系统和大中型机中，寄存器的数目都已增加到数十个到数百个， 而寄存器的字长一般是32位或64位；而在小型的嵌入式计算机中，寄存器的数目仍只有 几个到十几个，而且寄存器的字长通常只有8位。

4.1.3高速缓存和磁盘缓存

1.高速缓存 高速缓存是现代计算机结构中的一个重要部件，它是介于寄存器和存储器之间的存储 器，主要用于备份主存中较常用的数据，以减少处理机对主存储器的访问次数，这样可大 121  计算机操作系统 幅度地提高程序执行速度。高速缓存容量远大于寄存器，而比内存约小两到三个数量级左 右，从几十KB到几MB，访问速度快于主存储器。在计算机系统中，为了缓和内存与处 理机速度之间的矛盾，许多地方都设置了高速缓存。在以后各章中将会经常遇见各种高速 缓存的，届时再对它们进行详细的介绍。 将一些常用数据放在高速缓存中是否有效，这将涉及到程序执行的局部性原理（前已提 及：程序在执行时将呈现出局部性规律，即在一较短的时间内，程序的执行仅局限于某个 部分。关于局部性原理问题，我们将在第五章中做进一步的介绍)。通常，进程的程序和数 据存放在主存储器中，每当要访问时，才被临时复制到一个速度较快的高速缓存中。这样， 当CPU访问一组特定信息时，须首先检查它是否在高速缓存中，如果已存在，便可直接从 中取出使用，以避免访问主存，否则，就须从主存中读出信息。如大多数计算机都有指令 高速缓存，用来暂存下一条将执行的指令，如果没有指令高速缓存，CPU将会空等若干个 周期，直到下一条指令从主存中取出。由于高速缓存的速度越高价格也越贵，故在有的计 算机系统中设置了两级或多级高速缓存。紧靠内存的一级高速缓存的速度最高，而容量最 小，二级高速缓存的容量稍大，速度也稍低。

2.磁盘缓存 由于目前磁盘的I/O速度远低于对主存的访问速度，为了缓和两者之间在速度上的不 访问磁盘的次数。但磁盘缓存与高速缓存不同，它本身并不是一种实际存在的存储器，而 是利用主存中的部分存储空间暂时存放从磁盘中读出（或写入)的信息。主存也可以看作是 辅存的高速缓存，因为，辅存中的数据必须复制到主存方能使用，反之，数据也必须先存 在主存中，才能输出到辅存。 一个文件的数据可能先后出现在不同层次的存储器中，例如，一个文件的数据通常被 存储在辅存中(如硬盘)，当其需要运行或被访问时，就必须调入主存，也可以暂时存放在 主存的磁盘高速缓存中。大容量的辅存常常使用磁盘，磁盘数据经常备份到磁带或可移动 磁盘组上，以防止硬盘故障时丢失数据。有些系统自动地把老文件数据从辅存转储到海量 存储器中，如磁带上，这样做还能降低存储价格。 1/4.2程序的装入和链接 用户程序要在系统中运行，必须先将它装入内存，然后再将其转变为一个可以执行的 程序，通常都要经过以下几个步骤：

(1）编译，由编译程序(Compiler)对用户源程序进行编译，形成若干个目标模块(Object Module);

(2）链接，由链接程序(Linker)将编译后形成的一组目标模块以及它们所需要的库函数 链接在一起，形成一个完整的装入模块(Load Module);

(3）装入，由装入程序(Loader)将装入模块装入内存。 图4-2示出了这样的三步过程。本节将扼要阐述程序(含数据)的链接和装入过程。 122
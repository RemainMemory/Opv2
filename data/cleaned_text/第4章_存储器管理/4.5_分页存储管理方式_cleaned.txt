计算机操作系统 态的进程为止，或者已无足够的内存来换入进程，此时对换进程才停止换入。 由于要交换一个进程需要很多的时间，因此，对于提高处理机的利用率而言，它并不 是一个非常有效的解决方法。目前用得较多的对换方案是，在处理机正常运行时，并不启 动对换程序。但如果发现有许多进程在运行时经常发生缺页且显现出内存紧张的情况，才 启动对换程序，将一部分进程调至外存。如果发现所有进程的缺页率都已明显减少，而系 统的吞吐量已下降时，则可暂停运行对换程序。 1/4.5分页存储管理方式 大块空间，但须为之付出很大开销。如果允许将一个进程直接分散地装入到许多不相邻接 的分区中，便可充分地利用内存空间，而无须再进行“紧凑”。基于这一思想而产生了离散 分配方式。根据在离散分配时所分配地址空间的基本单位的不同，又可将离散分配分为以 下三种：

(1）分页存储管理方式。在该方式中，将用户程序的地址空间分为若干个固定大小的 区域，称为“页”或“页面”。典型的页面大小为1KB。相应地，也将内存空间分为若干 个物理块或页框（frame)，页和块的大小相同。这样可将用户程序的任一页放入任一物理块 中，实现了离散分配。

（2）分段存储管理方式。这是为了满足用户要求而形成的一种存储管理方式。它把用 分配时，以段为单位，这些段在内存中可以不相邻接，所以也同样实现了离散分配。

(3）段页式存储管理方式。这是分页和分段两种存储管理方式相结合的产物。它同时 具有两者的优点，是目前应用较厂泛的一种存储管理方式。

4.5.1分页存储管理的基本方法

1.页面和物理块

（1）页面。分页存储管理将进程的逻辑地址空间分成若干个页，并为各页加以编号， 从0开始，如第0页、第1页等。相应地，也把内存的物理地址空间分成若干个块，同样 也为它们加以编号，如0#块、1#块等等。在为进程分配内存时，以块为单位，将进程中 的若干个页分别装入到多个可以不相邻接的物理块中。由于进程的最后一页经常装不满一 块，而形成了不可利用的碎片，称之为“页内碎片”。

(2）页面大小。在分页系统中，若选择过小的页面大小，虽然一方面可以减小内存碎 片，起到减少内存碎片总空间的作用，有利于内存利用率的提高，但另一方面却会造成每 个进程占用较多的页面，从而导致进程的页表过长，占用大量内存。此外，还会降低页面 换进换出的效率。然而，如果选择的页面过大，虽然可以减少页表的长度，提高页面换进 换出的速度，但却又会使页内碎片增大。因此，页面的大小应选择适中，且页面大小应是 2的幂，通常为1KB～8KB。 138  第四章 存储器管理

2.地址结构 分页地址中的地址结构如下： 31

12 11 0 位移量W 页号P 它包含两部分内容：前一部分为页号P，后一部分为位(偏)移量W，即页内地址。图 中的地址长度为32位，其中0～11位为页内地址，即每页的大小为4KB；12～31位为页 号，地址空间最多允许有1M页。 对某特定机器，其地址结构是一定的。若给定一个逻辑地址空间中的地址为A，页面 的大小为L，则页号P和页内地址d可按下式求得： [A] P =INT d=[A] MOD L [L 其中，INT是整除函数，MOD是取余函数。例如，其系统的页面大小为1KB，设A=2170B， 则由上式可以求得P=2，d=122。

3.页表 仍然能够正确地运行，即能在内存中找到每个页面所对应的物理块，系统又为每个进程建 立了一张页面映像表，简称页表。在进程地址空间内的所有页（0～n)，依次在页表中有一 页表项，其中记录了相应页在内存中对应的物理块号，见图4-14的中间部分。在配置了页 表后，进程执行时，通过查找该表，即可找到每页在内存中的物理块号。可见，页表的作 用是实现从页号到物理块号的地址映射。 用户程序 内存 0页 页号块号 1页 0 2 2页 1 3 3页 2 6 4页 3 8 5页 4 9 5 n页 10 图4-14页表的作用 即使在简单的分页系统中，也常在页表的表项中设置一存取控制字段，用于对该存储 块中的内容加以保护。当存取控制字段仅有一位时，可用来规定该存储块中的内容是允许 读/写还是只读；若存取控制字段为二位，则可规定为读/写、只读和只执行等存取方式。如 果有一进程试图去写一个只允许读的存储块时，将引起操作系统的一次中断。如果要利用 139  计算机操作系统 分页系统去实现虚拟存储器，则还须增设一个数据项。我们将在本章后面做详细介绍。

4.5.2地址变换机构 为了能将用户地址空间中的逻辑地址转换为内存空间中的物理地址，在系统中必须设 置地址变换机构。该机构的基本任务是实现从逻辑地址到物理地址的转换。由于页内地址 和物理地址是一一对应的（例如，对于页面大小是1KB的页内地址是0～1023，其相应的 物理块内的地址也是0～1023，无需再进行转换)，因此，地址变换机构的任务实际上只是 将逻辑地址中的页号转换为内存中的物理块号。又因为页面映射表的作用就是用于实现从 页号到物理块号的变换，因此，地址变换任务是借助于页表来完成的。

1.基本的地址变换机构 进程在运行期间，需要对程序和数据的地址进行变换，即将用户地址空间中的逻辑地 址变换为内存空间中的物理地址，由于它执行的频率非常高，每条指令的地址都需要进行 变换，因此需要采用硬件来实现。页表功能是由一组专门的寄存器来实现的。一个页表项 用一个寄存器。由于寄存器具有较高的访问速度，因而有利于提高地址变换的速度；但由 于寄存器成本较高，且大多数现代计算机的页表又可能很大，使页表项的总数可达几千甚 至几十万个，显然这些页表项不可能都用寄存器来实现。因此，页表大多驻留在内存中。 在系统中只设置一个页表寄存器PTR(Page-TableRegister)，在其中存放页表在内存的始址 和页表的长度。平时，进程未执行时，页表的始址和页表长度存放在本进程的PCB中。当 调度程序调度到某进程时，才将这两个数据装入页表寄存器中。因此，在单处理机环境下， 虽然系统中可以运行多个进程，但只需一个页表寄存器。 当进程要访问某个逻辑地址中的数据时，分页地址变换机构会自动地将有效地址（相对 地址)分为页号和页内地址两部分，再以页号为索引去检索页表。查找操作由硬件执行。在 执行检索之前，先将页号与页表长度进行比较，如果页号大于或等于页表长度，则表示本 次所访问的地址已超越进程的地址空间。于是，这一错误将被系统发现，并产生一地址越 界中断。若未出现越界错误，则将页表始址与页号和页表项长度的乘积相加，便得到该表 项在页表中的位置，于是可从中得到该页的物理块号，将之装入物理地址寄存器中。与此 同时，再将有效地址寄存器中的页内地址送入物理地址寄存器的块内地址字段中。这样便 完成了从逻辑地址到物理地址的变换。图4-15示出了分页系统的地址变换机构。 越界中断 页表寄存器 逻辑地址 页表始址页表长度 > 页号（3）页内地址 页号 块号 0 1 1 2 3 b 物理地址 页表 图4-15分页系统的地址变换机构 140  第四章 存储器管理

2.具有快表的地址变换机构 由于页表是存放在内存中的，这使CPU在每存取一个数据时，都要两次访问内存。第 一次是访问内存中的页表，从中找到指定页的物理块号，再将块号与页内偏移量W拼接， 以形成物理地址。第二次访问内存时，才是从第一次所得地址中获得所需数据（或向此地址 中写入数据）。因此，采用这种方式将使计算机的处理速度降低近1/2。可见，以此高昂代 价来换取存储器空间利用率的提高，是得不偿失的。 为了提高地址变换速度，可在地址变换机构中增设一个具有并行查寻能力的特殊高速 缓冲寄存器，又称为“联想寄存器”（AssociativeMemory)，或称为“快表”，在IBM系统 中又取名为TLB(TranslationLookasideBuffer)，用以存放当前访问的那些页表项。此时的 地址变换过程是：在CPU给出有效地址后，由地址变换机构自动地将页号P送入高速缓冲 寄存器，并将此页号与高速缓存中的所有页号进行比较，若其中有与此相匹配的页号，便 表示所要访问的页表项在快表中。于是，可直接从快表中读出该页所对应的物理块号，并 送到物理地址寄存器中。如在快表中未找到对应的页表项，则还须再访问内存中的页表， 找到后，把从页表项中读出的物理块号送往地址寄存器；同时，再将此页表项存入快表的 一个寄存器单元中，亦即，重新修改快表。但如果联想寄存器已满，则OS必须找到一个 老的且已被认为是不再需要的页表项，将它换出。图4-16示出了具有快表的地址变换机构。 页表寄存器 逻辑地址L 页表始址页表长度 > 越界中断 页号（3）页内地址 页号 块号 页号块号 0 1 b 入 2 寄 存 3 器 快表 页表 bd] 物理地址 图4-16具有快表的地址变换机构 由于成本的关系，快表不可能做得很大，通常只存放16～512个页表项，这对中、小 型作业来说，已有可能把全部页表项放在快表中；但对于大型作业而言，则只能将其一部 分页表项放入其中。由于对程序和数据的访问往往带有局限性，因此，据统计，从快表中 能找到所需页表项的概率可达90%以上。这样，由于增加了地址变换机构而造成的速度损 失可减少到10%以下，达到了可接受的程度。

4.5.3访问内存的有效时间 ←：一 从进程发出指定逻辑地址的访问请求，经过地址变换，到在内存中找到对应的实际物 理地址单元并取出数据，所需要花费的总时间，称为内存的有效访问时间（EffectiveAccess 141  计算机操作系统 Time，EAT)。假设访问一次内存的时间为t，在基本分页存储管理方式中，有效访问时间 分为第一次访问内存时间（即查找页表对应的页表项所耗费的时间t)与第二次访问内存时间 (即将页表项中的物理块号与页内地址拼接成实际物理地址所耗费的时间t)之和： EAT=t+t=2t 在引入快表的分页存储管理方式中，通过快表查询，可以直接得到逻辑页所对应的物 理块号，由此拼接形成实际物理地址，减少了一次内存访问，缩短了进程访问内存的有效 时间。但是，由于快表的容量限制，不可能将一个进程的整个页表全部装入快表，所以在 快表中查找到所需表项存在着命中率的问题。所谓命中率，是指使用快表并在其中成功查 找到所需页面的表项的比率。这样，在引入快表的分页存储管理方式中，有效访问时间的 计算公式即为： EAT=ax入+(t+A)(1-a)+t=2t+-txa 上式中，入表示查找快表所需要的时间，a表示命中率，t表示访问一次内存所需要的时间。 可见，引入快表后的内存有效访问时间分为查找到逻辑页对应的页表项的平均时间 ax入+（t+2)（1-a)，以及对应实际物理地址的内存访问时间t。假设对快表的访问时间入 为20ns（纳秒)，对内存的访问时间t为100ns，则下表中列出了不同的命中率a与有效访 问时间的关系： 命中率 (%) 有效访问时间 a EAT 0 220 50 170 80 140 90 130 98 122 正是由于引I入了快表，CPU访问数据所耗费的时间明显减少。

4.5.4两级和多级页表 现代的大多数计算机系统都支持非常大的逻辑地址空间(22B～2°B)。在这样的环境 下，页表就变得非常大，要占用相当大的内存空间。例如，对于一个具有32位逻辑地址空 间的分页系统，规定页面大小为4KB即2°B，则在每个进程页表中的页表项数可达1MB 之多。又因为每个页表项占用一个字节，故每个进程仅仅其页表就要占用1MB的内存空 间，而且还要求是连续的。显然这是不现实的，我们可以采用这样两个方法来解决这一问 题：①对于页表所需的内存空间，可采用离散分配方式，以解决难以找到一块连续的大内 存空间的问题；②只将当前需要的部分页表项调入内存，其余的页表项仍驻留在磁盘上， 需要时再调入。

1.两级页表（Two-LevelPageTable) 针对难于找到大的连续的内存空间来存放页表的问题，可利用将页表进行分页的方法， 使每个页面的大小与内存物理块的大小相同，并为它们进行编号，即依次为0#页、1#页，， n#页，然后离散地将各个页面分别存放在不同的物理块中。同样，也要为离散分配的页表 142  第四章存储器管理 再建立一张页表，称为外层页表(OuterPageTable)，在每个页表项中记录了页表页面的物理 块号。下面我们仍以前面的32位逻辑地址空间为例来说明。当页面大小为4KB时(12位)， 若采用一级页表结构，应具有20位的页号，即页表项应有1M个；在采用两级页表结构时， 再对页表进行分页，使每页中包含2（即1024)个页表项，最多允许有21个页表分页；或 者说，外层页表中的外层页内地址P2为10位，外层页号P1也为10位。此时的逻辑地址结 构如图4-17所示。 外层页号 外层页内地址 页内地址 P P2 d 22 21 12 11 0 图4-17两级页表结构 由图可以看出，在页表的每个表项中，存放的是进程的某页在内存中的物理块号，如 0#页存放在1#物理块中，1#页存放在4#物理块中。而在外层页表的每个页表项中所存放 的是某页表分页的首址，如0#页表存放在1011#物理块中。我们可以利用外层页表和页表 这两级页表来实现进程从逻辑地址到内存中物理地址的变换。 为了方便实现地址变换，在地址变换机构中，同样需要增设一个外层页表寄存器，用 于存放外层页表的始址，并利用逻辑地址中的外层页号作为外层页表的索引，从中找到指 定页表分页的始址，再利用P2作为指定页表分页的索引，找到指定的页表项，其中即含有 该页在内存的物理块号，用该块号P和页内地址d即可构成访问的内存物理地址。图4-18 示出了两级页表时的地址变换机构。 0#页表 0 0 1011 01 1 1 1078 1 4 2 2 2 6 3 ： ： 4 5 N023 6 1#页表 7 114 1 115 ： 1742 ： 114 外部页表 1023 115 n#页表 0 1468 1 1468 2 ： 1023 内存空间 图4-18具有两级页表的地址变换机构 上述对页表施行离散分配的方法，虽然解决了对于天页表无需大片连续存储空间的问 题，但并未解决用较少的内存空间去存放大页表的问题。换言之，只用离散分配空间的办 法并未减少页表所占用的内存空间。能够用较少的内存空间存放页表的唯一方法是，仅把 143  计算机操作系统 当前需要的一批页表项调入内存，以后再根据需要陆续调入。在采用两级页表结构的情况 下，对于正在运行的进程，必须将其外层页表调入内存，而对于页表则只需调入一页或几 页。为了表征某页的页表是否已经调入内存，还应在外层页表项中增设一个状态位S，其 值若为0，表示该页表分页不在内存中，否则说明其分页已调入内存。进程运行时，地址 变换机构根据逻辑地址中的P去查找外层页表；若所找到的页表项中的状态位为0，则产 生一个中断信号，请求OS将该页表分页调入内存。关于请求调页的详细情况，将在虚拟 存储器一章中介绍。

2.多级页表 对于32位的机器，采用两级页表结构是合适的，但对于64位的机器，采用两级页表 假定仍按物理块的大小(2位）来划分页表，则将余下的42位用于外层页号。此时在外层页 表中可能有4096G个页表项，要占用16384GB的连续内存空间。这样的结果显然是不能 令人接受的。因此，必须采用多级页表，将外层页表再进行分页，也就是将各分页离散地 装入到不相邻接的物理块中，再利用第2级的外层页表来映射它们之间的关系。 对于64位的计算机，如果要求它能支持2（=1844744TB）规模的物理存储空间，则 即使是采用三级页表结构也是难以办到的，而在当前的实际应用中也无此必要。故在近两 年推出的64位OS中，把可直接寻址的存储器空间减少为45位长度(即2)左右，这样便 可利用三级页表结构来实现分页存储管理。

4.5.5反置页表（lnvertedPageTable)

1.反置页表的引入 在分页系统中，为每个进程配置了一张页表，进程逻辑地址空间中的每一页，在页表 空间，引入了反置页表。一般页表的页表项是按页号进行排序的，页表项中的内容是物理 块号。而反置页表则是为每一个物理块设置一个页表项，并将它们按物理块的编号排序， 其中的内容则是页号和其所隶属进程的标识符。在IBM公司推出的许多系统中都采用了反 置页表，如AS/400、IBMRISCSystem和IBMRT等系统。

2.地址变换 在利用反置页表进行地址变换时，是根据进程标识符和页号，去检索反置页表。如果 检索到与之匹配的页表项，则该页表项（中）的序号i便是该页所在的物理块号，可用该块号 与页内地址一起构成物理地址送内存地址寄存器。若检索了整个反置页表仍未找到匹配的 页表项，则表明此页尚未装入内存。对于不具有请求调页功能的存储器管理系统，此时则 表示地址出错。对于具有请求调页功能的存储器管理系统，此时应产生请求调页中断，系 统将把此页调入内存。 虽然反置页表可有效地减少页表占用的内存，例如，对于一个具有64MB的机器，如 果页面大小为4KB，那么反置页表只占用64KB内存。然而在该表中只包含了已经调入内 存的页面，并未包含尚未调入内存的页面。因此，还必须为每个进程建立一个外部页表 144  第四章存储器管理 (ExtermalPageTable)。该页表与传统的页表一样，当所访问的页面在内存时，并不需要访 问外部页表，仅当发现所需之页面不在内存时，才使用它。在页表中包含了各个页在外存 的物理位置，通过它可将所需之页面调入内存。 由于在反置页表中是为每一个物理块设置一个页表项，当内存容量很大时，页表项的 数目还是会非常大的。要利用进程标识符和页号去检索这样大的一张线性表是相当费时的。 于是可利用Hash算法来进行检索，这样可以很快地找到在反置页表中的相应页表项。不过 在采用Hash算法时，可能会出现所谓的“地址冲突”，即有多个逻辑地址被映射到同一个 Hash表项上，必须妥善解决这一问题。我们将在文件系统中作进一步的介绍。

4.6分段存储管理方式 存储管理方式随着OS的发展也在不断地发展。当OS由单道向多道发展时，存储管理 存储管理方式又从固定分区分配，发展到动态分区分配。为了能更好地提高内存的利用率， 进而又从连续分配方式发展到离散分配方式一分页存储管理方式。如果说，推动上述发 展的主要动力都是直接或间接地出于提高内存利用率的目的，那么，引入分段存储管理方 式的目的，则主要是为了满足用户（程序员）在编程和使用上多方面的要求，其中有些要求 是其它几种存储管理方式所难以满足的。因此，这种存储管理方式已成为当今所有存储管 理方式的基础，许多高级语言和C语言的编译程序也都支持分段存储管理方式。

4.6.1分段存储管理方式的引入 为什么要引入分段存储管理方式，可从下面两个方面说明：一方面是由于通常的程序 个段大多是一个相对独立的逻辑单位；另一方面，实现和满足信息共享、信息保护、动态 链接以及信息的动态增长等需要，也都是以段为基本单位的。更具体地说，分段存储管理 方式更符合用户和程序员如下多方面的需要。

1.方便编程 通常，用户把自己的作业按照逻辑关系划分为若干个段，每个段都从0开始编址，并 有自己的名字和长度。因此，程序员们都迫切地需要访问的逻辑地址是由段名（段号）和段 内偏移量（段内地址)决定的，这不仅可以方使程序员编程，也可使程序非常直观，更具可 读性。例如，下述的两条指令便使用段名和段内地址： LOAD1, [A]1 <D); STORE 1，[B]I(C>; 其中，前一条指令的含义是，将分段A中D单元内的值读入寄存器1；后一条指令的含义 是，将寄存器1的内容存入B分段的C单元中。

2.信息共享 在实现对程序和数据的共享时，是以信息的逻辑单位为基础的。比如，为了共享某个 过程、函数或文件。分页系统中的“页”只是存放信息的物理单位(块)，并无完整的逻辑 145
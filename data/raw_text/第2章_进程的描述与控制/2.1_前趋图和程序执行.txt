

--- Page 41 ---
计算机操作系统
第二章进程的描述与控制
在传统的操作系统中，为了提高资源利用率和系统吞吐量，通常采用多道程序技术，
将多个程序同时装入内存，并使之并发运行，传统意义上的程序不再能独立运行。此时，
作为资源分配和独立运行的基本单位都是进程。操作系统所具有的四大特征也都是基于进
程而形成的，并从进程的角度对操作系统进行研究。可见，在操作系统中，进程是一个极
其重要的概念。因此，本章专门对进程进行详细阐述。
2.1前趋图和程序执行
在早期未配置OS的系统和单道批处理系统中，程序的执行方式是顺序执行，即在内
存中仅装入一道用户程序，由它独占系统中的所有资源，只有在一个用户程序执行完成后，
才允许装入另一个程序并执行。可见，这种方式浪费资源、系统运行效率低等缺点。而在
多道程序系统中，由于内存中可以同时装入多个程序，使它们共享系统资源，并发执行，
显然可以克服上述缺点。程序的这两种执行方式间有着显著的不同，尤其是考虑到程序并
发执行时的特征，才导致了在操作系统中引入进程的概念。因此，这里有必要先对程序的
顺序和并发执行方式做简单的描述。
2.1.1前趋图
一
为了能更好地描述程序的顺序和并发执行情况，我们先介绍用于描述程序执行先后顺
序的前趋图。所谓前趋图(PrecedenceGraph)，是指一个有向无循环图，可记为DAG(Directed
AcyclicGraph)，它用于描述进程之间执行的先后顺序。图中的每个结点可用来表示一个进
程或程序段，乃至一条语句，结点间的有向边则表示两个结点之间存在的偏序（PartialOrder)
或前趋关系（PrecedenceRelation)。
进程（或程序)之间的前趋关系可用“→”来表示，如果进程P；和P存在着前趋关系，
可表示为(P，P)∈→，也可写成P→P，表示在P开始执行之前P;必须完成。此时称P
是P的直接前趋，而称P是P;的直接后继。在前趋图中，把没有前趋的结点称为初始结点
(InitialNode)，把没有后继的结点称为终止结点（FinalNode)。此外，每个结点还具有一个重
量(Weight)，用于表示该结点所含有的程序量或程序的执行时间。在图2-1(a)所示的前趋图
中，存在着如下前趋关系：
P→P2,P1→P3，P1-→P4,P2→P5，P3→P5，P4→P6，P4→P7,Ps→P8，P6→P8,P→P9，P8→P9
或表示为：
32

--- Page 42 ---
第二章进程的描述与控制
P={P1,P2,P3,P4,P5,P6,P7,P8,P9}
={(P1,P2),(P1,P3),(P1,P4),(P2,P5),(P3,P5),(P4,P6),(P4,P7),(P5,P8),(P6,P8),(P7,P9),(P8,P9)}
应当注意，前趋图中是不允许有循环的，否则必然会产生不可能实现的前趋关系。如
图2-1(b)所示的前趋关系中就存在着循环。它一方面要求在S3开始执行之前，S2必须完成，
另一方面又要求在S2开始执行之前，S3必须完成。显然，这种关系是不可能实现的。
S2→S3，S3→→S2
P
Ps
S
P6
S
P
(a)具有九个结点的前趋图
(b)具有循环的前趋图
图2-1前趋图
2.1.2程序顺序执行
1.程序的顺序执行
通常，一个应用程序由若干个程序段组成，每一个程序段完成特定的功能，它们在执
行时，都需要按照某种先后次序顺序执行，仅当前一程序段执行完后，才运行后一程序段。
例如，在进行计算时，应先运行输入程序，用于输入用户的程序和数据；然后运行计算程
序，对所输入的数据进行计算；最后才是运行打印程序，打印计算结果。我们用结点(Node)
代表各程序段的操作（在图2-1中用圆圈表示)，其中I代表输入操作，C代表计算操作，P
为打印操作，用箭头指示操作的先后次序。这样，上述的三个程序段间就存在着这样的前
趋关系：I一C→P，其执行的顺序可用前趋图2-2（a)描述。
（C)(P)
(C)—-(P2
S）
HS3
(a)程序的顺序执行
(b）三条语句的顺序执行
图2-2程序顺序执行的前趋图
即使是一个程序段，也可能存在着执行顺序问题，下面示出了一个包含了三条语句的
程序段：
S:a:=x+y;
S2:b :=a-5;
S3:c:=b+1;
其中，语句S2必须在语句S后(即a被赋值)才能执行，语句S也只能在b被赋值后才能执行，
因此，三条语句存在着这样的前趋关系：S一S2→S3，应按前趋图2-2(b)所示的顺序执行。
2.程序顺序执行时的特征
由上所述可以得知，在程序顺序执行时，具有这样三个特征：①顺序性：指处理机严
格地按照程序所规定的顺序执行，即每一操作必须在下一个操作开始之前结束；②封闭性：
33

--- Page 43 ---
计算机操作系统
指程序在封闭的环境下运行，即程序运行时独占全机资源，资源的状态(除初始状态外)只
有本程序才能改变它，程序一旦开始执行，其执行结果不受外界因素影响；③可再现性：
指只要程序执行时的环境和初始条件相同，当程序重复执行时，不论它是从头到尾不停顿
地执行，还是“停停走走”地执行，都可获得相同的结果。程序顺序执行时的这种特性，
为程序员检测和校正程序的错误带来了很大的方便。
2.1.3程序并发执行
程序顺序执行时，虽然可以给程序员带来方便，但系统资源的利用率却很低。为此，在
系统中引入了多道程序技术，使程序或程序段间能并发执行。然而，并非所有的程序都能并
发执行。事实上，只有在不存在前趋关系的程序之间才有可能并发执行，否则无法并发执行。
1.程序的并发执行
我们通过一个常见的例子来说明程序的顺序执行和并发执行。在图2-2中的输入程序、
计算程序和打印程序三者之间，存在着I→C一P这样的前趋关系，以至对一个作业的输入、
计算和打印三个程序段必须顺序执行。但若是对一批作业进行处理时，每道作业的输入、计
算和打印程序段的执行情况如图2-3所示。输入程序(I)在输入第一次数据后，由计算程序(C1)
对该数据进行计算的同时，输入程序(L2)可再输入第二次数据，从而使第一个计算程序(C)可
与第二个输入程序(I2)并发执行。事实上，正是由于C和I之间并不存在前趋关系，因此它们
之间可以并发执行。一般来说，输入程序(I+i)在输入第i+1次数据时，计算程序（C)可能正
在对程序(I)的第i次输入的数据进行计算，而打印程序(Pi-1)正在打印程序（C-1)的计算结果。
由图2-3可以看出，存在前趋关系I→Ci，I→I+1，C→P，C→Ci+1，P;→Pi+1，而I+1
和C及P-1是重叠的，即在P-1和C;以及I+1之间，不存在前趋关系，可以并发执行。
对于具有下述四条语句的程序段：
S:a:=x+2
S2:b :=y+4
S3: C :=a+b
S4:d:=c+b
可画出图2-4所示的前趋关系。可以看出：S必须在a和b被赋值后方能执行：S4必须在
S之后执行：但S和S2则可以并发执行，因为它们彼此互不依赖。
(14
S)
S2
P1
图2-3程序并发执行时的前趋图
图2-4四条语句的前趋关系
2.程序并发执行时的特征
在引入了程序间的并发执行功能后，虽然提高了系统的吞吐量和资源利用率，但由于
34
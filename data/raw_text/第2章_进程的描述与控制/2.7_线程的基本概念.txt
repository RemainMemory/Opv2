

--- Page 84 ---
signal(j.mutex);
copy(b.sender, i.sender);
将消息缓冲区i中的信息复制到接收区b;
b.size =i.size;
copy(b.text, i.text);
releasebuf(i);
释放消息缓冲区；
2.7线程(Threads)的基本概念
在20世纪60年代中期，人们在设计多道程序OS时，引[入了进程的概念，从而解决
了在单处理机环境下的程序并发执行问题。此后在长达20年的时间里，在多道程序OS中
一直是以进程作为能拥有资源和独立调度（运行）的基本单位的。直到80年代中期，人们又
提出了比进程更小的基本单位一线程的概念，试图用它来提高程序并发执行的程度，以
进一步改善系统的服务质量。特别是在进入20世纪90年代后，多处理机系统得到迅速发
展，由于线程能更好地提高程序的并行执行程度，因而近几年推出的多处理机OS无一例
外地都引I入了线程，用以改善OS的性能。
2.7.1线程的引入
一
如果说，在OS中引I入进程的目的是为了使多个程序能并发执行，以提高资源利用率
和系统吞吐量，那么，在操作系统中再引入线程，则是为了减少程序在并发执行时所付出
的时空开销，使OS具有更好的并发性。
1.进程的两个基本属性
首先让我们来回顾进程的两个基本属性：①）进程是一个可拥有资源的独立单位，一个
进程要能独立运行，它必须拥有一定的资源，包括用于存放程序正文、数据的磁盘和内存
地址空间，以及它在运行时所需要的I/O设备、已打开的文件、信号量等；②进程同时又
是一个可独立调度和分派的基本单位，一个进程要能独立运行，它还必须是一个可独立调
在，也可以根据其PCB中的信息，对进程进行调度，还可将断点信息保存在其PCB中。
反之，再利用进程PCB中的信息来恢复进程运行的现场。正是由于进程有这两个基本属性，
才使进程成为一个能独立运行的基本单位，从而也就构成了进程并发执行的基础。
2.程序并发执行所需付出的时空开销
为使程序能并发执行，系统必须进行以下的一系列操作：
（1）创建进程，系统在创建一个进程时，必须为它分配其所必需的、除处理机以外的
所有资源，如内存空间、IO设备，以及建立相应的PCB；
(2）撤消进程，系统在撤消进程时，又必须先对其所占有的资源执行回收操作，然后
再撤消PCB；
(3）进程切换，对进程进行上下文切换时，需要保留当前进程的CPU环境，设置新选
中进程的CPU环境，因而须花费不少的处理机时间。
75

--- Page 85 ---
计算机操作系统
据此可知，由于进程是一个资源的拥有者，因而在创建、撤消和切换中，系统必须为
之付出较大的时空开销。这就限制了系统中所设置进程的数目，而且进程切换也不宜过于
频繁，从而限制了并发程度的进一步提高。
3.线程一一作为调度和分派的基本单位
如何能使多个程序更好地并发执行，同时又尽量减少系统的开销，已成为近年来设计
操作系统时所追求的重要目标。有不少研究操作系统的学者们想到，要设法将进程的上述
两个属性分开，由OS分开处理，亦即并不把作为调度和分派的基本单位也同时作为拥有
资源的单位，以做到“轻装上阵”；而对于拥有资源的基本单位，又不对之施以频繁的切
换。正是在这种思想的指导下，形成了线程的概念。
随着VLSI技术和计算机体系结构的发展，出现了对称多处理机(SMP)计算机系统。它
调运行，充分发挥它们的并行处理能力，以提高系统性能，还必须配置性能良好的多处理
机OS。但利用传统的进程概念和设计方法已难以设计出适合于SMP结构计算机系统的OS。
其最根本的原因是进程“太重”，致使为实现多处理机环境下的进程的创建、调度、分派，
都需花费较大的时间和空间开销。如果在OS中引I入线程，以线程作为调度和分派的基本
单位，则可以有效地改善多处理机系统的性能。因此，一些主要的OS(UNIX、Windows)
厂家又进一步对线程技术做了开发，使之适用于SMP的计算机系统。
2.7.2线程与进程的比较
由于线程具有许多传统进程所具有的特征，所以又称之为轻型进程(Light-Weight
Process)或进程元，相应地，把传统进程称为重型进程(Heavy-WeightProcess)。它相当于只
有一个线程的任务。下面我们从调度性、并发性、系统开销和拥有资源等方面对线程和进
程进行比较。
1.调度的基本单位
在传统的OS中，进程是作为独立调度和分派的基本单位，因而进程是能独立运行的
基本单位。在每次被调度时，都需要进行上下文切换，开销较大。而在引I入线程的OS中，
已把线程作为调度和分派的基本单位，因而线程是能独立运行的基本单位。当线程切换时，
仅需保存和设置少量寄存器内容，切换代价远低于进程。在同一进程中，线程的切换不会
引起进程的切换，但从一个进程中的线程切换到另一个进程中的线程时，必然就会引起进
程的切换。
2.并发性
间亦可并发执行，甚至还允许在一个进程中的所有线程都能并发执行。同样，不同进程中
的线程也能并发执行。这使得OS具有更好的并发性，从而能更加有效地提高系统资源的
利用率和系统的吞吐量。例如，在文字处理器中可以设置三个线程：第一个线程用于显示
在网页浏览器中，可以设置一个线程来显示图像或文本，再设置一个线程用于从网络中接
收数据。
76

--- Page 86 ---
第二章进程的描述与控制
此外，有的应用程序需要执行多个相似的任务。例如，一个网络服务器经常会接到许
多客户的请求，如果仍采用传统的单线程的进程来执行该任务，则每次只能为一个客户服
务。但如果在一个进程中可以设置多个线程，将其中的一个专用于监听客户的请求，则每
当有一个客户请求时，便立即创建一个线程来处理该客户的请求。
3.拥有资源
进程可以拥有资源，并作为系统中拥有资源的一个基本单位。然而，线程本身并不拥
有系统资源，而是仅有一点必不可少的、能保证独立运行的资源。比如，在每个线程中都
应具有一个用于控制线程运行的线程控制块TCB、用于指示被执行指令序列的程序计数器、
保留局部变量、少数状态参数和返回地址等的一组寄存器和堆栈。
线程除了拥有自己的少量资源外，还允许多个线程共享该进程所拥有的资源，这首先
表现在：属于同一进程的所有线程都具有相同的地址空间，这意味着，线程可以访问该地
器、信号量机构等的内存空间和它所申请到的IO设备等。
4.独立性
在同一进程中的不同线程之间的独立性要比不同进程之间的独立性低得多。这是因为，
为防止进程之间彼此干扰和破坏，每个进程都拥有一个独立的地址空间和其它资源，除了
共享全局变量外，不允许其它进程的访问。但是同一进程中的不同线程往往是为了提高并
发性以及进行相互之间的合作而创建的，它们共享进程的内存地址空间和资源，如每个线
写，甚至完全清除。由一个线程打开的文件可以供其它线程读、写。
5.系统开销
在创建或撤消进程时，系统都要为之分配和回收进程控制块、分配或回收其它资源，
如内存空间和IVO设备等。OS为此所付出的开销，明显大于线程创建或撤消时所付出的开
销。类似地，在进程切换时，涉及到进程上下文的切换，而线程的切换代价也远低于进程
的。例如，在Solaris2OS中，线程的创建要比进程的创建快30倍，而线程上下文切换要
比进程上下文的切换快5倍。此外，由于一个进程中的多个线程具有相同的地址空间，线
程之间的同步和通信也比进程的简单。因此，在一些OS中，线程的切换、同步和通信都
无需操作系统内核的干预。
6.支持多处理机系统
在多处理机系统中，对于传统的进程，即单线程进程，不管有多少处理机，该进程只
能运行在一个处理机上。但对于多线程进程，就可以将一个进程中的多个线程分配到多个
处理机上，使它们并行执行，这无疑将加速进程的完成。因此，现代多处理机OS都无一
例外地引入了多线程。
2.7.3线程的状态和线程控制块
1.线程运行的三个状态
与传统的进程一样，在各线程之间也存在着共享资源和相互合作的制约关系，致使线
程在运行时也具有间断性。相应地，线程在运行时也具有下述三种基本状态：
77

--- Page 87 ---
计算机操作系统
(1）执行状态，表示线程已获得处理机而正在运行；
(2）就绪状态，指线程已具备了各种执行条件，只须再获得CPU便可立即执行；
(3）阻塞状态，指线程在执行中因某事件受阻而处于暂停状态，例如，当一个线程执
行从键盘读入数据的系统调用时，该线程就被阻塞。
线程状态之间的转换和进程状态之间的转换是一样的，如图2-5所示。
2.线程控制块TCB
如同每个进程有一个进程控制块一样，系统也为每个线程配置了一个线程控制块TCB，
将所有用于控制和管理线程的信息记录在线程控制块中。线程控制块通常有这样几项：①线
程标识符，为每个线程赋予一个唯一的线程标识符；②一组寄存器，包括程序计数器PC、
状态寄存器和通用寄存器的内容；③线程运行状态，用于描述线程正处于何种运行状态；
④优先级，描述线程执行的优先程度；5线程专有存储区，用于线程切换时存放现场保
护信息，和与该线程相关的统计信息等；信号屏蔽，即对某些信号加以屏蔽；堆栈
指针，在线程运行时，经常会进行过程调用，而过程的调用通常会出现多重嵌套的情况，
这样，就必须将每次过程调用中所使用的局部变量以及返回地址保存起来。为此，应为每
个线程设置一个堆栈，用它来保存局部变量和返回地址。相应地，在TCB中，也须设置两
个指向堆栈的指针：指向用户自己堆栈的指针和指向核心栈的指针。前者是指当线程运行
在用户态时，使用用户自己的用户栈来保存局部变量和返回地址，后者是指当线程运行在
核心态时使用系统的核心栈。
3.多线程OS中的进程属性
通常在多线程OS中的进程都包含了多个线程，并为它们提供资源。OS支持在一个进
程中的多个线程能并发执行，但此时的进程就不再作为一个执行的实体。多线程OS中的
进程有以下属性：
（1）进程是一个可拥有资源的基本单位。在多线程OS中，进程仍是作为系统资源分配
的基本单位，任一进程所拥有的资源都包括：用户的地址空间、实现进程（线程)间同步和
通信的机制、已打开的文件和已申请到的IVO设备，以及一张由核心进程维护的地址映射
表，该表用于实现用户程序的逻辑地址到其内存物理地址的映射。
(2）多个线程可并发执行。通常一个进程都含有若干个相对独立的线程，其数目可多
可少，但至少要有一个线程。由进程为这些（个)线程提供资源及运行环境，使它们能并发
执行。在OS中的所有线程都只能属于某一个特定进程。实际上，现在把传统进程的执行
方法称为单线程方法。如传统的UINIX系统能支持多用户进程，但只支持单线程方法。反
之，将每个进程支持多个线程执行的方法称为多线程方法。如Java的运行环境是单进程多
线程的，Windows2000、Solaris、Mach等采用的则是多进程多线程的方法。
(3）进程已不是可执行的实体。在多线程OS中，是把线程作为独立运行(或称调度)的
基本单位。此时的进程已不再是一个基本的可执行实体。虽然如此，进程仍具有与执行相
关的状态。例如，所谓进程处于“执行”状态，实际上是指该进程中的某线程正在执行。
此外，对进程所施加的与进程状态有关的操作也对其线程起作用。例如，在把某个进程挂
起时，该进程中的所有线程也都将被挂起；又如，在把某进程激活时，属于该进程的所有
线程也都将被激活。
78

--- Page 88 ---
第二章进程的描述与控制
2.8线程的实现
2.8.1线程的实现方式
线程已在许多系统中实现，但各系统的实现方式并不完全相同。在有的系统中，特别
是一些数据库管理系统，如infomix所实现的是用户级线程；而另一些系统（如Macintosh
和OS/2操作系统）所实现的是内核支持线程；还有一些系统如Solaris操作系统，则同时实
现了这两种类型的线程。
1.内核支持线程KST(KernelSupportedThreads)
在OS中的所有进程，无论是系统进程还是用户进程，都是在操作系统内核的支持下
运行的，是与内核紧密相关的。而内核支持线程KST同样也是在内核的支持下运行的，它
们的创建、阻塞、撤消和切换等，也都是在内核空间实现的。为了对内核线程进行控制和
管理，在内核空间也为每一个内核线程设置了一个线程控制块，内核根据该控制块而感知
某线程的存在，并对其加以控制。当前大多数OS都支持内核支持线程。
这种线程实现方式主要有四个主要优点：
（1）在多处理器系统中，内核能够同时调度同一进程中的多个线程并行执行；
（2）如果进程中的一个线程被阻塞了，内核可以调度该进程中的其它线程占有处理器
运行，也可以运行其它进程中的线程；
(3）内核支持线程具有很小的数据结构和堆栈，线程的切换比较快，切换开销小；
（4）内核本身也可以采用多线程技术，可以提高系统的执行速度和效率。
内核支持线程的主要缺点是：对于用户的线程切换而言，其模式切换的开销较大，在
同一个进程中，从一个线程切换到另一个线程时，需要从用户态转到核心态进行，这是因
为用户进程的线程在用户态运行，而线程调度和管理是在内核实现的，系统开销较大。
2.用户级线程ULT（UserLevelThreads）
用户级线程是在用户空间中实现的。对线程的创建、撤消、同步与通信等功能，都无
需内核的支持，即用户级线程是与内核无关的。在一个系统中的用户级线程的数目可以达
到数百个至数千个。由于这些线程的任务控制块都是设置在用户空间，而线程所执行的操
作也无需内核的帮助，因而内核完全不知道用户级线程的存在。
值得说明的是，对于设置了用户级线程的系统，其调度仍是以进程为单位进行的。在
采用轮转调度算法时，各个进程轮流执行一个时间片，这对诸进程而言貌似是公平的。但
假如在进程A中包含了一个用户级线程，而在另一个进程B中含有100个用户级线程，这
样，进程A中线程的运行时间将是进程B中各线程运行时间的100倍：相应地，其速度要
快上100倍，因此说实质上并不公平。
假如系统中设置的是内核支持线程，则调度便是以线程为单位进行的。在采用轮转法
调度时，是各个线程轮流执行一个时间片。同样假定进程A中只有一个内核支持线程，而
在进程B中有100个内核支持线程。此时进程B可以获得的CPU时间是进程A的100倍，
且进程B可使100个系统调用并发工作。
79
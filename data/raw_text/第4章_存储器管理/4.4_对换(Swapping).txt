

--- Page 144 ---
第四章存储器管理
请求分配
u.size分区
检索空闲分区链（表)
无法分配
否
空闲分区
否
找到大于u.size
返回
总和≥usize？
的可用区否？
是
是
进行紧凑形成
按动态分区方式
连续空闲区
进行分配
修改有关的
进行紧凑形成
返回分区号
数据结构
连续空闲区
及首址
图4-13动态分区分配算法流程图
对换（Swapping)
对换技术也称为交换技术，最早用于麻省理工学院的单用户分时系统CTSS中。由于
当时计算机的内存都非常小，为了使该系统能分时运行多个用户程序而引入了对换技术。
系统把所有的用户作业存放在磁盘上，每次只能调入一个作业进入内存，当该作业的一个
时间片用完时，将它调至外存的后备队列上等待，再从后备队列上将另一个作业调入内存。
这就是最早出现的分时系统中所用的对换技术。现在已经很少使用。
由上所述可知，要实现内、外存之间的对换，系统中必须有一台I/O速度较高的外存，
而且其容量也必须足够大，能容纳正在分时运行的所有用户作业，自前最常使用的是大容
量磁盘存储器。下面我们主要介绍目前在多道程序环境中广泛使用的对换技术。
4.4.1多道程序环境下的对换技术
1.对换的引入
在多道程序环境下，一方面，在内存中的某些进程由于某事件尚未发生而被阻塞运行，
但它却占用了大量的内存空间，甚至有时可能出现在内存中所有进程都被阻塞，而无可运
行之进程，迫使CPU停止下来等待的情况；另一方面，却又有着许多作业，因内存空间不
足，一直驻留在外存上，而不能进入内存运行。显然这对系统资源是一种严重的浪费，
且使系统吞吐量下降。为了解决这一问题，在系统中又增设了对换（也称交换)设施。所谓
“对换”，是指把内存中暂时不能运行的进程或者暂时不用的程序和数据换出到外存上，
以便腾出足够的内存空间，再把已具备运行条件的进程或进程所需要的程序和数据换入
135

--- Page 145 ---
计算机操作系统
内存。对换是改善内存利用率的有效措施，它可以直接提高处理机的利用率和系统的吞
吐量。
自从20世纪60年代初期出现“对换”技术后，便引起了人们的重视。在早期的UNIX
系统中已引入了对换功能，该功能一直保留至今，各个UNIX版本实现对换功能的方法也
大体上是一样的，即在系统中设置一个对换进程，由它将内存中暂时不能运行的进程调出
到磁盘的对换区；同样也由该进程将磁盘上已具备运行条件的进程调入内存。在Windows
OS中也具有对换功能。如果一个新进程在装入内存时发现内存不足，可以将已在内存中的
老进程调至磁盘，腾出内存空间。由于对换技术的确能有效地改善内存的利用率，故现在
已被广泛地应用于OS中。
2.对换的类型
在每次对换时，都是将一定数量的程序或数据换入或换出内存。根据每次对换时所对
换的数量，可将对换分为如下两类：
（1）整体对换。在第三章中介绍处理机调度时已经说明了，处理机中级调度实际上就
是存储器的对换功能，其目的是用来解决内存紧张问题，并可进一步提高内存的利用率和
系统的吞吐量。由于在中级调度中对换是以整个进程为单位的，故称之为“进程对换”或
“整体对换”。这种对换被广泛地应用于多道程序系统中，并作为处理机中级调度。
（2）页面（分段）对换。如果对换是以进程的一个“页面”或“分段”为单位进行的，则
在此，我们只介绍进程对换，而分页或分段对换，将放在虚拟存储器中介绍。为了实现进
程对换，系统必须能实现三方面的功能：对对换空间的管理、进程的换出和进程的换入。
4.4.2对换空间的管理
1.对换空间管理的主要目标
在具有对换功能的OS中，通常把磁盘空间分为文件区和对换区两部分。
1）对文件区管理的主要目标
文件区占用磁盘空间的大部分，用于存放各类文件。由于通常的文件都是较长时间地
驻留在外存上，对它访问的频率是较低的，故对文件区管理的主要目标是提高文件存储空
间的利用率，然后才是提高对文件的访问速度。因此，对文件区空间的管理采取离散分配
方式。
2）对对换空间管理的主要目标
对换空间只占用磁盘空间的小部分，用于存放从内存换出的进程。由于这些进程在对
换区中驻留的时间是短暂的，而对换操作的频率却较高，故对对换空间管理的主要目标，
是提高进程换入和换出的速度，然后才是提高文件存储空间的利用率。为此，对对换区空
间的管理采取连续分配方式，较少考虑外存中的碎片问题。
2.对换区空闲盘块管理中的数据结构
为了实现对对换区中的空闲盘块的管理，在系统中应配置相应的数据结构，用于记录
外存对换区中的空闲盘块的使用情况。其数据结构的形式与内存在动态分区分配方式中所
136

--- Page 146 ---
第四章存储器管理
用数据结构相似，即同样可以用空闲分区表或空闲分区链。在空闲分区表的每个表目中，
应包含两项：对换区的首址及其大小，分别用盘块号和盘块数表示。
3.对换空间的分配与回收
由于对换分区的分配采用的是连续分配方式，因而对换空间的分配与回收与动态分区
方式时的内存分配与回收方法雷同。其分配算法可以是首次适应算法、循环首次适应算法
或最佳适应算法等。具体的分配操作也与图4-8中内存的分配过程相同。对换区的回收操
作可分为四种情况：
（1）回收分区与插入点的前一个空闲分区F相邻接；
（2）回收分区与插入点的后一个空闲分区F2相邻接；
（3）回收分区同时与插入点的前、后两个分区邻接；
（4）回收分区既不与F邻接，又不与F2邻接。
对上述这几种情况的处理方法也与动态分区方式相同，故在这里不再赘述。
4.4.3进程的换出与换入
当内核因执行某操作而发现内存不足时，例如，当一进程由于创建子进程而需要更多
的内存空间，但又无足够的内存空间等情况发生时，便调用（或换醒）对换进程，它的主要
任务是实现进程的换出和换入。
1.进程的换出
对换进程在实现进程换出时，是将内存中的某些进程调出至对换区，以便腾出内存空
间。换出过程可分为以下两步：
（1）选择被换出的进程。对换进程在选择被换出的进程时，将检查所有驻留在内存中
的进程，首先选择处于阻塞状态或睡眠状态的进程，当有多个这样的进程时，应当选择优
先级最低的进程作为换出进程。在有的系统中，为了防止低优先级进程在被调入内存后很
快又被换出，还需考虑进程在内存的驻留时间。如果系统中已无阻塞进程，而现在的内存
空间仍不足以满足需要，便选择优先级最低的就绪进程换出。
(2）进程换出过程。应当注意，在选择换出进程后，在对进程换出时，只能换出非共
出。在进行换出时，应先申请对换空间，若申请成功，就启动磁盘，将该进程的程序和数
据传送到磁盘的对换区上。若传送过程未出现错误，便可回收该进程所占用的内存空间，
并对该进程的进程控制块和内存分配表等数据结构做相应的修改。若此时内存中还有可换
出的进程，则继续执行换出过程，直到内存中再无阻塞进程为止。
2.进程的换入
对换进程将定时执行换入操作，它首先查看PCB集合中所有进程的状态，从中找出
“就绪”状态但已换出的进程。当有许多这样的进程时，它将选择其中已换出到磁盘上时
间最久（必须大于规定时间，如2s)的进程作为换入进程，为它申请内存。如果申请成功，
可直接将进程从外存调入内存；如果失败，则需先将内存中的某些进程换出，腾出足够的
内存空间后，再将进程调入。
在对换进程成功地换入一个进程后，若还有可换入的进程，则再继续执行换入换出过
137